(function (module) {
    mifosX.controllers = _.extend(module, {
        AccCoaController: function (scope,$rootScope, translate, resourceFactory, location, anchorScroll) {
			
			$rootScope.tempNodeID = -100; // variable used to store nodeID (from directive), so it(nodeID) is available for detail-table
			
            scope.coadata = [];
            scope.isTreeView = false;

            scope.routeTo = function (id) {
                location.path('/viewglaccount/' + id);
            };

            scope.scrollto = function (link){
                location.hash(link);
                anchorScroll();

            };

            if (!scope.searchCriteria.acoa) {
                scope.searchCriteria.acoa = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.acoa;

            scope.onFilter = function () {
                scope.searchCriteria.acoa = scope.filterText || '';
                scope.saveSC();
            };

            scope.deepCopy = function (obj) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    var out = [], i = 0, len = obj.length;
                    for (; i < len; i++) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                if (typeof obj === 'object') {
                    var out = {}, i;
                    for (i in obj) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                return obj;
            }

            scope.ChartsPerPage = 15;
            resourceFactory.accountCoaResource.getAllAccountCoas(function (data) {
                scope.coadatas = scope.deepCopy(data);
                scope.ASSET = translate.instant('ASSET') ;
                scope.LIABILITY = translate.instant('LIABILITY') ;
                scope.EQUITY = translate.instant('EQUITY') ;
                scope.INCOME = translate.instant('INCOME') ;
                scope.EXPENSE = translate.instant('EXPENSE') ;
                scope.Accounting = translate.instant('Accounting') ;

                var assetObject = {id: -1, name: scope.ASSET, parentId: -999, children: []};
                var liabilitiesObject = {id: -2, name: scope.LIABILITY, parentId: -999, children: []};
                var equitiyObject = {id: -3, name: scope.EQUITY, parentId: -999, children: []};
                var incomeObject = {id: -4, name: scope.INCOME, parentId: -999, children: []};
                var expenseObject = {id: -5, name: scope.EXPENSE, parentId: -999, children: []};
                var rootObject = {id: -999, name: scope.Accounting, children: []};
                var rootArray = [rootObject, assetObject, liabilitiesObject, equitiyObject, incomeObject, expenseObject];
				
                var idToNodeMap = {};
                for (var i in rootArray) {
                    idToNodeMap[rootArray[i].id] = rootArray[i];
                }

                for (i = 0; i < data.length; i++) {
                    if (data[i].type.value == "ASSET") {
                        if (data[i].parentId == null)  data[i].parentId = -1;
                    } else if (data[i].type.value == "LIABILITY") {
                        if (data[i].parentId == null)  data[i].parentId = -2;
                    } else if (data[i].type.value == "EQUITY") {
                        if (data[i].parentId == null)  data[i].parentId = -3;
                    } else if (data[i].type.value == "INCOME") {
                        if (data[i].parentId == null)  data[i].parentId = -4;
                    } else if (data[i].type.value == "EXPENSE") {
                        if (data[i].parentId == null)  data[i].parentId = -5;
                    }
                    delete data[i].disabled;
                    delete data[i].manualEntriesAllowed;
                    delete data[i].type;
                    delete data[i].usage;
                    delete data[i].description;
                    delete data[i].nameDecorated;
                    delete data[i].tagId;
                    data[i].children = [];
                    idToNodeMap[data[i].id] = data[i];
                }

                function sortByParentId(a, b) {
                    return a.parentId - b.parentId;
                }

                data.sort(sortByParentId);
                var glAccountsArray = rootArray.concat(data);
				
				var root = [];
                for (var i = 0; i < glAccountsArray.length; i++) {
                    var currentObj = glAccountsArray[i];
                    if (typeof currentObj.parentId === "undefined") {
                        root.push(currentObj);
                    } else {
                        parentNode = idToNodeMap[currentObj.parentId];
                        parentNode.children.push(currentObj);
                        currentObj.collapsed = "true";
                    }
                }
                scope.treedata = root;
            });
			
			
        }
    });
    mifosX.ng.application.controller('AccCoaController', ['$scope','$rootScope', '$translate', 'ResourceFactory', '$location','$anchorScroll', mifosX.controllers.AccCoaController]).run(function ($log) {
        $log.info("AccCoaController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccCreateGLAccountController: function (scope, resourceFactory, location, $routeParams) {
            scope.coadata = [];
            scope.accountTypes = [];
            scope.usageTypes = [];
            scope.headerTypes = [];

            resourceFactory.accountCoaTemplateResource.get({type: '0'}, function (data) {
                scope.coadata = data;
                scope.accountTypes = data.accountTypeOptions;
                scope.usageTypes = data.usageOptions;
                
                scope.formData = {
                        manualEntriesAllowed: true,
                        type: scope.accountTypes[0].id,
                        usage: scope.usageTypes[0].id
                    };
                scope.formData.type;
                scope.formData.parentId;
                
                for (var i = 0; i < data.accountTypeOptions.length; i++) {
                	if(data.accountTypeOptions[i].value == $routeParams.acctype ) {
                		console.log($routeParams.acctype + data.accountTypeOptions[i].value)
                		scope.formData.type = scope.accountTypes[i].id;
                	}
                }

                //by default display assetTagsOptions and assetHeaderAccountOptions
                scope.types = data.allowedAssetsTagOptions,
                scope.headerTypes = data.assetHeaderAccountOptions;
                scope.changeType();


                for (var i = 0; i < scope.headerTypes.length; i++) {
                    if(scope.headerTypes[i].id == $routeParams.parent ) {
                        console.log($routeParams.parent + scope.headerTypes[i].id)
                        scope.formData.parentId = scope.headerTypes[i].id;
                    }
                }

            });

            scope.changeType = function () {
                if (scope.formData.type == 1) {
                    scope.types = scope.coadata.allowedAssetsTagOptions;
                    scope.headerTypes = scope.coadata.assetHeaderAccountOptions
                } else if (scope.formData.type == 2) {
                    scope.types = scope.coadata.allowedLiabilitiesTagOptions;
                    scope.headerTypes = scope.coadata.liabilityHeaderAccountOptions;
                } else if (scope.formData.type == 3) {
                    scope.types = scope.coadata.allowedEquityTagOptions;
                    scope.headerTypes = scope.coadata.equityHeaderAccountOptions;
                } else if (scope.formData.type == 4) {
                    scope.types = scope.coadata.allowedIncomeTagOptions;
                    scope.headerTypes = scope.coadata.incomeHeaderAccountOptions;
                } else if (scope.formData.type == 5) {
                    scope.types = scope.coadata.allowedExpensesTagOptions;
                    scope.headerTypes = scope.coadata.expenseHeaderAccountOptions;
                }
            } ;

            if($routeParams.parent){
            	scope.cancel = '#/viewglaccount/' + $routeParams.parent
        	}else{
        		scope.cancel = "#/accounting_coa"
        	}
            

            scope.submit = function () {
                resourceFactory.accountCoaResource.save(this.formData, function (data) {
                    location.path('/viewglaccount/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('AccCreateGLAccountController', ['$scope', 'ResourceFactory', '$location','$routeParams', mifosX.controllers.AccCreateGLAccountController]).run(function ($log) {
        $log.info("AccCreateGLAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccCreateRuleController: function (scope, resourceFactory, location) {

            scope.formData = {};
            scope.creditRuleType = 'Account';
            scope.debitRuleType = 'Account';
            scope.formData.creditTags = [];
            scope.formData.debitTags = [];

            resourceFactory.accountingRulesTemplateResource.get(function (data) {
                scope.glAccounts = data.allowedAccounts;
                scope.offices = data.allowedOffices;
                scope.creditTagOptions = data.allowedCreditTagOptions;
                scope.debitTagOptions = data.allowedDebitTagOptions;
                scope.formData.officeId = scope.offices[0].id;
                scope.formData.accountToCredit = scope.glAccounts[0];
                scope.formData.accountToDebit = scope.glAccounts[1];
            });
            
            scope.addDebitTag = function () {
                for (var i in this.availableDebit) {
                    for (var j in scope.debitTagOptions) {
                        if (scope.debitTagOptions[j].id == this.availableDebit[i].id) {
                            var temp = {};
                            temp.id = this.availableDebit[i].id;
                            temp.name = this.availableDebit[i].name;
                            scope.formData.debitTags.push(temp);
                            scope.debitTagOptions.splice(j, 1);
                        }
                    }
                }
            };
            scope.removeDebitTag = function () {
                for (var i in this.selectedDebit) {
                    for (var j in scope.formData.debitTags) {
                        if (scope.formData.debitTags[j].id == this.selectedDebit[i].id) {
                            var temp = {};
                            temp.id = this.selectedDebit[i].id;
                            temp.name = this.selectedDebit[i].name;
                            scope.debitTagOptions.push(temp);
                            scope.formData.debitTags.splice(j, 1);
                        }
                    }
                }
            };
            scope.addCreditTag = function () {
                for (var i in this.availableCredit) {
                    for (var j in scope.creditTagOptions) {
                        if (scope.creditTagOptions[j].id == this.availableCredit[i].id) {
                            var temp = {};
                            temp.id = this.availableCredit[i].id;
                            temp.name = this.availableCredit[i].name;
                            scope.formData.creditTags.push(temp);
                            scope.creditTagOptions.splice(j, 1);
                        }
                    }
                }
            };
            scope.removeCreditTag = function () {
                for (var i in this.selectedCredit) {
                    for (var j in scope.formData.creditTags) {
                        if (scope.formData.creditTags[j].id == this.selectedCredit[i].id) {
                            var temp = {};
                            temp.id = this.selectedCredit[i].id;
                            temp.name = this.selectedCredit[i].name;
                            scope.creditTagOptions.push(temp);
                            scope.formData.creditTags.splice(j, 1);
                        }
                    }
                }
            };
            
            scope.resetCredits = function () {
                scope.formData.creditTags = [];
            }

            scope.resetDebits = function () {
                scope.formData.debitTags = [];
            }

            scope.submit = function () {
                var accountingRule = new Object();
                accountingRule.name = this.formData.name;
                accountingRule.officeId = this.formData.officeId;
                accountingRule.description = this.formData.description;

                //Construct creditsTags array
                if (this.creditRuleType == 'tags') {
                    accountingRule.allowMultipleCreditEntries = this.formData.allowMultipleCreditEntries;
                    accountingRule.creditTags = [];
                    for (var i = 0; i < this.formData.creditTags.length; i++) {
                        accountingRule.creditTags.push(this.formData.creditTags[i].id);
                    }
                } else {
                    accountingRule.accountToCredit = this.formData.accountToCredit.id;
                }

                //Construct debitTags array
                if (this.debitRuleType == 'tags') {
                    accountingRule.allowMultipleDebitEntries = this.formData.allowMultipleDebitEntries;
                    accountingRule.debitTags = [];
                    for (var i = 0; i < this.formData.debitTags.length; i++) {
                        accountingRule.debitTags.push(this.formData.debitTags[i].id);
                    }
                } else {
                    accountingRule.accountToDebit = this.formData.accountToDebit.id;
                }

                resourceFactory.accountingRulesResource.save(accountingRule, function (data) {
                    location.path('/viewaccrule/' + data.resourceId);
                });
            }

        }
    });
    mifosX.ng.application.controller('AccCreateRuleController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.AccCreateRuleController]).run(function ($log) {
        $log.info("AccCreateRuleController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccEditGLAccountController: function (scope, routeParams, resourceFactory, location) {
            scope.coadata = [];
            scope.accountTypes = [];
            scope.usageTypes = [];
            scope.headerTypes = [];
            scope.accountOptions = [];

            resourceFactory.accountCoaResource.get({glAccountId: routeParams.id, template: 'true'}, function (data) {
                scope.coadata = data;
                scope.glAccountId = data.id;
                scope.accountTypes = data.accountTypeOptions;
                scope.usageTypes = data.usageOptions;
                scope.formData = {
                    name: data.name,
                    glCode: data.glCode,
                    manualEntriesAllowed: data.manualEntriesAllowed,
                    description: data.description,
                    type: data.type.id,
                    tagId: data.tagId.id,
                    usage: data.usage.id,
                    parentId: data.parentId
                };
                scope.changeType() ;
            });

            scope.changeType = function () {
                if (scope.formData.type == 1) {
                    scope.types = scope.coadata.allowedAssetsTagOptions;
                    scope.headerTypes = scope.coadata.assetHeaderAccountOptions
                } else if (scope.formData.type == 2) {
                    scope.types = scope.coadata.allowedLiabilitiesTagOptions;
                    scope.headerTypes = scope.coadata.liabilityHeaderAccountOptions;
                } else if (scope.formData.type == 3) {
                    scope.types = scope.coadata.allowedEquityTagOptions;
                    scope.headerTypes = scope.coadata.equityHeaderAccountOptions;
                } else if (scope.formData.type == 4) {
                    scope.types = scope.coadata.allowedIncomeTagOptions;
                    scope.headerTypes = scope.coadata.incomeHeaderAccountOptions;
                } else if (scope.formData.type == 5) {
                    scope.types = scope.coadata.allowedExpensesTagOptions;
                    scope.headerTypes = scope.coadata.expenseHeaderAccountOptions;
                }
            } ;

            scope.submit = function () {
                resourceFactory.accountCoaResource.update({'glAccountId': routeParams.id}, this.formData, function (data) {
                    location.path('/viewglaccount/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('AccEditGLAccountController', ['$scope', '$routeParams', 'ResourceFactory', '$location', mifosX.controllers.AccEditGLAccountController]).run(function ($log) {
        $log.info("AccEditGLAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccEditRuleController: function (scope, resourceFactory, location, routeParams) {

            scope.formData = {};
            scope.creditRuleType = 'Account';
            scope.debitRuleType = 'Account';
            scope.formData.creditTags = [];
            scope.formData.debitTags = [];
            scope.offices = [];

            resourceFactory.accountingRulesResource.getById({accountingRuleId: routeParams.id, template: true}, function (data) {
                //Initialize the template options
                scope.glAccounts = data.allowedAccounts;
                scope.offices = data.allowedOffices;
                scope.creditTagOptions = data.allowedCreditTagOptions;
                scope.debitTagOptions = data.allowedDebitTagOptions;
                scope.accountingRuleId = data.id;
                //update text fields
                scope.formData.name = data.name;
                scope.formData.officeId = data.officeId;
                scope.formData.description = data.description;

                //update formData for view previous details.
                for (var i = 0; i < data.allowedOffices.length; i++) {
                    if (data.officeId == data.allowedOffices[i].id) {
                        scope.formData.office = data.allowedOffices[i].id;
                    }
                }

                //update credits
                if (data.creditAccounts) {
                    //if the selected type is account then creditAccounts array will have only 1 account, which is a selected account.
                    scope.formData.accountToCredit = data.creditAccounts[0].id;
                    scope.creditRuleType = 'Account';
                } else {
                    //if the selected type is tags then push the tags into creditTags array
                    scope.formData.creditTags = [];
                    scope.creditRuleType = 'tags';
                    scope.formData.allowMultipleCreditEntries = data.allowMultipleCreditEntries;
                    for (var i = 0; i < data.creditTags.length; i++) {
                        scope.formData.creditTags.push(data.creditTags[i].tag);
                    }
                }

                //update debits
                if (data.debitAccounts) {
                    //if the selected type is account then debitAccounts array will have only 1 account, which is a selected account.
                    scope.formData.accountToDebit = data.debitAccounts[0].id;
                    scope.debitRuleType = 'Account';
                } else {
                    //if the selected type is tags then push the tags into debitTags array
                    scope.formData.debitTags = [];
                    scope.debitRuleType = 'tags';
                    scope.formData.allowMultipleDebitEntries = data.allowMultipleDebitEntries;
                    for (var i = 0; i < data.debitTags.length; i++) {
                        scope.formData.debitTags.push(data.debitTags[i].tag);
                    }
                }
            });
            
            scope.addDebitTag = function () {
                for (var i in this.availableDebit) {
                    for (var j in scope.debitTagOptions) {
                        if (scope.debitTagOptions[j].id == this.availableDebit[i].id) {
                            var temp = {};
                            temp.id = this.availableDebit[i].id;
                            temp.name = this.availableDebit[i].name;
                            scope.formData.debitTags.push(temp);
                            scope.debitTagOptions.splice(j, 1);
                        }
                    }
                }
            };
            scope.removeDebitTag = function () {
                for (var i in this.selectedDebit) {
                    for (var j in scope.formData.debitTags) {
                        if (scope.formData.debitTags[j].id == this.selectedDebit[i].id) {
                            var temp = {};
                            temp.id = this.selectedDebit[i].id;
                            temp.name = this.selectedDebit[i].name;
                            scope.debitTagOptions.push(temp);
                            scope.formData.debitTags.splice(j, 1);
                        }
                    }
                }
            };
            scope.addCreditTag = function () {
                for (var i in this.availableCredit) {
                    for (var j in scope.creditTagOptions) {
                        if (scope.creditTagOptions[j].id == this.availableCredit[i].id) {
                            var temp = {};
                            temp.id = this.availableCredit[i].id;
                            temp.name = this.availableCredit[i].name;
                            scope.formData.creditTags.push(temp);
                            scope.creditTagOptions.splice(j, 1);
                        }
                    }
                }
            };
            scope.removeCreditTag = function () {
                for (var i in this.selectedCredit) {
                    for (var j in scope.formData.creditTags) {
                        if (scope.formData.creditTags[j].id == this.selectedCredit[i].id) {
                            var temp = {};
                            temp.id = this.selectedCredit[i].id;
                            temp.name = this.selectedCredit[i].name;
                            scope.creditTagOptions.push(temp);
                            scope.formData.creditTags.splice(j, 1);
                        }
                    }
                }
            };
            
            scope.resetCredits = function () {
                scope.formData.creditTags = [];
            }

            scope.resetDebits = function () {
                scope.formData.debitTags = [];
            }

            scope.submit = function () {
                var accountingRule = new Object();
                accountingRule.name = this.formData.name;
                accountingRule.officeId = this.formData.officeId;
                accountingRule.description = this.formData.description;

                //Construct creditsTags array
                if (this.creditRuleType == 'tags') {
                    accountingRule.allowMultipleCreditEntries = this.formData.allowMultipleCreditEntries;
                    accountingRule.creditTags = [];
                    for (var i = 0; i < this.formData.creditTags.length; i++) {
                        accountingRule.creditTags.push(this.formData.creditTags[i].id);
                    }
                } else {
                    accountingRule.accountToCredit = this.formData.accountToCredit;
                }

                //Construct debitTags array
                if (this.debitRuleType == 'tags') {
                    accountingRule.allowMultipleDebitEntries = this.formData.allowMultipleDebitEntries;
                    accountingRule.debitTags = [];
                    for (var i = 0; i < this.formData.debitTags.length; i++) {
                        accountingRule.debitTags.push(this.formData.debitTags[i].id);
                    }
                } else {
                    accountingRule.accountToDebit = this.formData.accountToDebit;
                }

                resourceFactory.accountingRulesResource.update({accountingRuleId: routeParams.id}, accountingRule, function (data) {
                    location.path('/viewaccrule/' + data.resourceId);
                });
            }

        }
    });
    mifosX.ng.application.controller('AccEditRuleController', ['$scope', 'ResourceFactory', '$location', '$routeParams', mifosX.controllers.AccEditRuleController]).run(function ($log) {
        $log.info("AccEditRuleController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccFreqPostingController: function (scope, resourceFactory, location, dateFilter) {

            scope.formData = {};
            scope.formData.crAccounts = [];
            scope.formData.dbAccounts = [];
            scope.first = {};
            scope.allowCreditEntries = true;
            scope.allowDebitEntries = true;
            scope.errorcreditevent = false;
            scope.errordebitevent = false;
            scope.restrictDate = new Date();
            scope.showPaymentDetails = false;

            resourceFactory.accountingRulesResource.getAllRules({associations: 'all'}, function (data) {
                scope.rules = data;
            });

            resourceFactory.paymentTypeResource.getAll( function (data) {
                scope.paymentTypes = data;
            });
            resourceFactory.currencyConfigResource.get({fields: 'selectedCurrencyOptions'}, function (data) {
                scope.currencyOptions = data.selectedCurrencyOptions;
                scope.formData.currencyCode = scope.currencyOptions[0].code;
            });

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
                scope.formData.officeId = scope.offices[0].id;
            });

            //event for rule change
            scope.resetCrAndDb = function (rule) {
            	  scope.rule = rule;
                scope.formData.crAccounts = [{}];
                scope.formData.dbAccounts = [{}];
                
                if(rule.allowMultipleDebitEntries) {
                  scope.allowDebitEntries = true;
                }else{
                  scope.allowDebitEntries = false;
                }
                if(rule.allowMultipleCreditEntries) {
                  scope.allowCreditEntries = true;
                }else{
                  scope.allowCreditEntries = false;
                }
            }
            
            //events for credits
            scope.addCrAccount = function () {
                scope.errorcreditevent = false;
                scope.formData.crAccounts.push({});
                scope.formData.crAmountTemplate = undefined;
                if (scope.formData.rule) {
                    if (!scope.formData.rule.allowMultipleCreditEntries) {
                        scope.allowCreditEntries = false;
                    }
                }
            }

            scope.removeCrAccount = function (index) {
                scope.formData.crAccounts.splice(index, 1);
                if (scope.formData.crAccounts.length == 0) {
                    scope.allowCreditEntries = true;
                }
            }

            //events for debits
            scope.addDebitAccount = function () {
                scope.errordebitevent = false;
                scope.formData.dbAccounts.push({});
                scope.formData.debitAmountTemplate = undefined;
                if (scope.formData.rule) {
                    if (!scope.formData.rule.allowMultipleDebitEntries) {
                        scope.allowDebitEntries = false;
                    }
                }
            }

            scope.removeDebitAccount = function (index) {
                scope.formData.dbAccounts.splice(index, 1);
                if (scope.formData.dbAccounts.length == 0) {
                    scope.allowDebitEntries = true;
                }
            }

            scope.submit = function () {
                var jeTransaction = new Object();
                var reqDate = dateFilter(scope.first.date, scope.df);
                jeTransaction.locale = scope.optlang.code;
                jeTransaction.dateFormat = scope.df;
                jeTransaction.officeId = this.formData.officeId;
                jeTransaction.transactionDate = reqDate;
                jeTransaction.referenceNumber = this.formData.referenceNumber;
                jeTransaction.comments = this.formData.comments;
                if (this.formData.rule) {
                    jeTransaction.accountingRule = this.formData.rule.id;
                }
                jeTransaction.currencyCode = this.formData.currencyCode;
                jeTransaction.paymentTypeId = this.formData.paymentTypeId;
                jeTransaction.accountNumber = this.formData.accountNumber;
                jeTransaction.checkNumber = this.formData.checkNumber;
                jeTransaction.routingCode = this.formData.routingCode;
                jeTransaction.receiptNumber = this.formData.receiptNumber;
                jeTransaction.bankNumber = this.formData.bankNumber;

                //Construct credits array
                jeTransaction.credits = [];
                for (var i = 0; i < this.formData.crAccounts.length; i++) {
                    var temp = new Object();
                    temp.glAccountId = this.formData.crAccounts[i].select.id;
                    temp.amount = this.formData.crAccounts[i].crAmount;
                    jeTransaction.credits.push(temp);
                }

                //construct debits array
                jeTransaction.debits = [];
                for (var i = 0; i < this.formData.dbAccounts.length; i++) {
                    var temp = new Object();
                    temp.glAccountId = this.formData.dbAccounts[i].select.id;
                    temp.amount = this.formData.dbAccounts[i].debitAmount;
                    jeTransaction.debits.push(temp);
                }

                resourceFactory.journalEntriesResource.save(jeTransaction, function (data) {
                    location.path('/viewtransactions/' + data.transactionId);
                });
            }
        }
    });
    mifosX.ng.application.controller('AccFreqPostingController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.AccFreqPostingController]).run(function ($log) {
        $log.info("AccFreqPostingController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccOGMController: function (scope, resourceFactory, paginatorService,routeParams, location,$uibModal) {
            scope.routeTo = function (id) {
                location.path('/viewofficeglmapping/' + id);
            };

            var fetchFunction = function () {
                var params = {};
                resourceFactory.officeToGLAccountMappingResource.search(params, callback);
            };

            scope.mappingDatas =  paginatorService.paginate();

        }
    });
    mifosX.ng.application.controller('AccOGMController', ['$scope', 'ResourceFactory',  'PaginatorService', '$routeParams','$location','$uibModal', mifosX.controllers.AccOGMController]).run(function ($log) {
        $log.info("AccOGMController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccountingClosureController: function (scope, resourceFactory, location, anchorScroll, translate, routeParams, dateFilter) {
            scope.first = {};
            scope.formData = {};
            scope.first.date = new Date();
            scope.accountClosures = [];
            scope.restrictDate = new Date();
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });

            var params = {}
            if (routeParams.officeId != undefined) {
                params.officeId = routeParams.officeId;
            }

            resourceFactory.accountingClosureResource.get(params, function (data) {
                scope.accountClosures = data;
            });

            scope.routeTo = function (id) {
                location.path('/view_close_accounting/' + id);
            };
            
            scope.scrollto = function (link){
                location.hash(link);
                anchorScroll();

            };

            scope.submit = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.closingDate = reqDate;
                resourceFactory.accountingClosureResource.save(this.formData, function (data) {
                    location.path('/view_close_accounting/' + data.resourceId);
                });
            }

            scope.updateLastClosed = function (officeId) {
                resourceFactory.accountingClosureResource.get({officeId: officeId}, function (data) {
                    scope.accountClosures = data;
                    scope.lastClosed = undefined;
                    if (data.length > 0) {
                        scope.lastClosed = data[0].closingDate;
                    }
                });
            }
            scope.closedAccountingDetails = function (officeId) {
                resourceFactory.accountingClosureResource.get({officeId: officeId}, function (data) {
                    scope.accountClosures = data;
                });
            }
        }
    });
    mifosX.ng.application.controller('AccountingClosureController', ['$scope', 'ResourceFactory', '$location', '$translate', '$routeParams', 'dateFilter','$anchorScroll', mifosX.controllers.AccountingClosureController]).run(function ($log) {
        $log.info("AccountingClosureController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccountingRuleController: function (scope, resourceFactory, location, anchorScroll) {
            scope.routeTo = function (id) {
                location.path('/viewaccrule/' + id);
            };
            scope.scrollto = function (link){
                location.hash(link);
                anchorScroll();

            };

            resourceFactory.accountingRulesResource.get(function (data) {
                scope.rules = data;
            });
         

        }
    });
    mifosX.ng.application.controller('AccountingRuleController', ['$scope', 'ResourceFactory', '$location','$anchorScroll', mifosX.controllers.AccountingRuleController]).run(function ($log) {
        $log.info("AccountingRuleController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccViewGLAccountContoller: function (scope, routeParams, location, resourceFactory, route, $uibModal) {
            scope.glaccountdata = [];
            scope.accountOptions = [];

            resourceFactory.accountCoaResource.get({glAccountId: routeParams.id, template: 'true'}, function (data) {

                //to display parent name
                if (data.type.value == "ASSET") {
                    scope.accountOptions = data.assetHeaderAccountOptions || [];
                    for (var i = 0; i < scope.accountOptions.length; i++) {
                        if (scope.accountOptions[i].id == data.parentId) {
                            data.parentName = scope.accountOptions[i].name;
                        }
                    }
                } else if (data.type.value == "LIABILITY") {
                    scope.accountOptions = data.liabilityHeaderAccountOptions || [];
                    for (var i = 0; i < scope.accountOptions.length; i++) {
                        if (scope.accountOptions[i].id == data.parentId) {
                            data.parentName = scope.accountOptions[i].name;
                        }
                    }
                } else if (data.type.value == "EQUITY") {
                    scope.accountOptions = data.equityHeaderAccountOptions || [];
                    for (var i = 0; i < scope.accountOptions.length; i++) {
                        if (scope.accountOptions[i].id == data.parentId) {
                            data.parentName = scope.accountOptions[i].name;
                        }
                    }
                } else if (data.type.value == "INCOME") {
                    scope.accountOptions = data.incomeHeaderAccountOptions || [];
                    for (var i = 0; i < scope.accountOptions.length; i++) {
                        if (scope.accountOptions[i].id == data.parentId) {
                            data.parentName = scope.accountOptions[i].name;
                        }
                    }
                } else if (data.type.value == "EXPENSE") {
                    scope.accountOptions = data.expenseHeaderAccountOptions || [];
                    for (var i = 0; i < scope.accountOptions.length; i++) {
                        if (scope.accountOptions[i].id == data.parentId) {
                            data.parentName = scope.accountOptions[i].name;
                        }
                    }
                }
                scope.glaccount = data;
            });

            scope.deleteGLAccount = function () {
                $uibModal.open({
                    templateUrl: 'deleteglacc.html',
                    controller: GlAccDeleteCtrl
                });
            };
            var GlAccDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.accountCoaResource.delete({glAccountId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/accounting_coa');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.changeState = function (disabled) {
                resourceFactory.accountCoaResource.update({'glAccountId': routeParams.id}, {disabled: !disabled}, function (data) {
                    route.reload();
                });
            };
        }
    });
    mifosX.ng.application.controller('AccViewGLAccountContoller', ['$scope', '$routeParams', '$location', 'ResourceFactory', '$route', '$uibModal', mifosX.controllers.AccViewGLAccountContoller]).run(function ($log) {
        $log.info("AccViewGLAccountContoller initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddFinancialMappingController: function (scope, resourceFactory, location) {
            scope.formData = {};

            resourceFactory.officeToGLAccountMappingResource.get({mappingId:'template'}, function (data) {
                scope.formData.financialActivityId = 100;
                scope.glAccountOptions = data.glAccountOptions;
                scope.financialActivityOptions = data.financialActivityOptions;
                scope.accountOptions = scope.glAccountOptions.assetAccountOptions;
            });

            scope.updateActivityOptions = function(activityId){
                if(activityId === 100 || activityId === 101 || activityId === 102 || activityId === 103){
                    scope.accountOptions = scope.glAccountOptions.assetAccountOptions;
                }else if(activityId === 200 || activityId === 201){
                    scope.accountOptions = scope.glAccountOptions.liabilityAccountOptions;
                }else if(activityId === 300){
                    scope.accountOptions = scope.glAccountOptions.equityAccountOptions;
                }
            };

            scope.submit = function () {
                resourceFactory.officeToGLAccountMappingResource.create(this.formData, function (data) {
                    location.path('/viewfinancialactivitymapping/' + data.resourceId);
                });
            };

        }
    });
    mifosX.ng.application.controller('AddFinancialMappingController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.AddFinancialMappingController]).run(function ($log) {
        $log.info("AddFinancialMappingController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportCOAController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/glaccounts/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams += '&officeId=' + scope.formData.officeId;
                    }else {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }

            };

            scope.changeStaff = function() {
                if(scope.formData.staffId) {
                    if (scope.first.queryParams.indexOf("staffId")==-1) {
                        scope.first.queryParams = scope.first.queryParams + '&staffId=' + scope.formData.staffId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&staffId=\d+/i,"&staffId="+ scope.formData.staffId);
                    }
                } else {
                    if(scope.formData.officeId)
                        scope.first.queryParams = '&' + 'officeId=' + scope.formData.officeId;
                    else
                        scope.first.queryParams = '&';
                }
            };
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "chartofaccounts"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };

            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/glaccounts/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportCOAController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportCOAController]).run(function ($log) {
        $log.info("BulkImportCOAController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportJournalEntriesController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/journalentries/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        scope.first.queryParams += 'officeId=' + scope.formData.officeId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }
            };

            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };
            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "gljournalentries"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };

            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/journalentries/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportJournalEntriesController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportJournalEntriesController]).run(function ($log) {
        $log.info("BulkImportJournalEntriesController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        DefineOpeningBalancesController: function (scope, resourceFactory, location, translate, routeParams, dateFilter) {
            scope.first = {};
            scope.formData = {};
            scope.first.date = new Date();
            scope.accountClosures = [];
            scope.restrictDate = new Date();
            scope.totalDebitAmount = 0;
            scope.totalCreditAmount = 0;

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });

            resourceFactory.currencyConfigResource.get({fields: 'selectedCurrencyOptions'}, function (data) {
                scope.currencyOptions = data.selectedCurrencyOptions;
                scope.formData.currencyCode = scope.currencyOptions[0].code;
            });

            scope.submit = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.transactionDate = reqDate;
                this.formData.currencyCode = scope.formData.currencyCode;
                this.formData.credits = [];
                this.formData.debits = [];
                scope.errorDetails = [];
                var noErrors = true;
                for (var i in scope.allGls) {
                    if (scope.allGls[i].credit && scope.allGls[i].credit != "" && scope.allGls[i].debit && scope.allGls[i].debit != "") {
                        if(noErrors){
                            noErrors = false;
                            var errorObj = new Object();
                            errorObj.code = 'error.msg.accounting.defining.openingbalance.both.credit.debits.are.passed';
                            scope.errorDetails.push([errorObj]);
                        }
                    } else if (scope.allGls[i].debit && scope.allGls[i].debit != "") {
                        this.formData.debits.push({"glAccountId":scope.allGls[i].glAccountId, "amount":scope.allGls[i].debit});
                    } else if (scope.allGls[i].credit && scope.allGls[i].credit) {
                        this.formData.credits.push({"glAccountId":scope.allGls[i].glAccountId, "amount":scope.allGls[i].credit});
                    }
                }
                if(noErrors){
                    delete scope.errorDetails;
                    resourceFactory.journalEntriesResource.save({command:"defineOpeningBalance"}, this.formData, function (data) {
                        location.path('/viewtransactions/' + data.transactionId);
                    });
                }
            }

            scope.keyPress = function(){
                this.formData.credits = [];
                this.formData.debits = [];
                scope.totalDebitAmount = 0;
                scope.totalCreditAmount = 0;

                for(var l in scope.allGls) {
                    if (scope.allGls[l].debit != null && scope.allGls[l].debit != "") {
                        scope.totalDebitAmount += parseFloat(scope.allGls[l].debit);
                    }
                    if(scope.allGls[l].credit != null && scope.allGls[l].credit != ""){
                        scope.totalCreditAmount += parseFloat(scope.allGls[l].credit)
                    }
                }

            };

            scope.updateDebitCreditAmounts = function (gl) {
                if (gl.amount) {
                    if (gl.entryType) {
                        if (gl.entryType.value == "DEBIT") {
                            gl.debit = gl.amount;
                        } else if (gl.entryType.value == "CREDIT") {
                            gl.credit = gl.amount;
                        }
                    }
                }
            }

            scope.mergeAllGLs = function () {
                scope.allGls = [];
                scope.debitTotal = 0;

                _.each(scope.data.assetAccountOpeningBalances, function(gl){
                    scope.updateDebitCreditAmounts(gl);
                    scope.allGls.push(gl);
                });

                _.each(scope.data.liabityAccountOpeningBalances, function(gl){
                    scope.updateDebitCreditAmounts(gl);
                    scope.allGls.push(gl);
                });

                _.each(scope.data.equityAccountOpeningBalances, function(gl){
                    scope.updateDebitCreditAmounts(gl);
                    scope.allGls.push(gl);
                });

                _.each(scope.data.incomeAccountOpeningBalances, function(gl){
                    scope.updateDebitCreditAmounts(gl);
                    scope.allGls.push(gl);
                });

                _.each(scope.data.expenseAccountOpeningBalances, function(gl){
                    scope.updateDebitCreditAmounts(gl);
                    scope.allGls.push(gl);
                });

            }

            scope.retrieveOpeningBalances = function (officeId, currencyCode) {
                resourceFactory.officeOpeningResource.get({officeId: officeId, currencyCode: currencyCode}, function (data) {
                    scope.data = data;
                    scope.mergeAllGLs();
                });
            }
        }
    });
    mifosX.ng.application.controller('DefineOpeningBalancesController', ['$scope', 'ResourceFactory', '$location', '$translate', '$routeParams', 'dateFilter', mifosX.controllers.DefineOpeningBalancesController]).run(function ($log) {
        $log.info("DefineOpeningBalancesController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditFinancialActivityMappingController: function (scope, resourceFactory, location,routeParams) {
            scope.formData = {};
            scope.accountOptions = [];
            resourceFactory.officeToGLAccountMappingResource.withTemplate({mappingId: routeParams.mappingId},function (data) {
                scope.mapping = data;
                scope.glAccountOptions = data.glAccountOptions;
                scope.formData.financialActivityId = data.financialActivityData.id;
                scope.formData.glAccountId = data.glAccountData.id;
                scope.financialActivityOptions = data.financialActivityOptions;
                scope.updateActivityOptions(scope.formData.financialActivityId);
            });

            scope.updateActivityOptions = function(activityId){
                if(activityId === 100 || activityId === 101 || activityId === 102 || activityId === 103){
                    scope.accountOptions = scope.glAccountOptions.assetAccountOptions;
                }else if(activityId === 200 || activityId === 201){
                    scope.accountOptions = scope.glAccountOptions.liabilityAccountOptions;
                }else if(activityId === 300){
                    scope.accountOptions = scope.glAccountOptions.equityAccountOptions;
                }
            };

            scope.submit = function () {
                resourceFactory.officeToGLAccountMappingResource.update({mappingId: routeParams.mappingId},this.formData, function (data) {
                    location.path('/viewfinancialactivitymapping/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditFinancialActivityMappingController', ['$scope', 'ResourceFactory', '$location','$routeParams', mifosX.controllers.EditFinancialActivityMappingController]).run(function ($log) {
        $log.info("EditFinancialActivityMappingController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        FinancialActivityMappingsController: function (scope, resourceFactory, location) {

            resourceFactory.officeToGLAccountMappingResource.getAll(function (data) {
                scope.mappings = data;
            });

            scope.routeTo = function (resourceId){
                location.path('/viewfinancialactivitymapping/' + resourceId);
            };
        }
    });
    mifosX.ng.application.controller('FinancialActivityMappingsController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.FinancialActivityMappingsController]).run(function ($log) {
        $log.info("FinancialActivityMappingsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        JournalEntryController: function (scope, resourceFactory, location, dateFilter) {

            scope.formData = {};
            scope.formData.crAccounts = [{}];
            scope.formData.dbAccounts = [{}];
            scope.first = {};
            scope.errorcreditevent = false;
            scope.errordebitevent = false;
            scope.creditaccounttemplate = false;
            scope.debitaccounttemplate = false;
            scope.restrictDate = new Date();
            scope.showPaymentDetails = false;
            resourceFactory.accountCoaResource.getAllAccountCoas({manualEntriesAllowed: true, usage: 1, disabled: false}, function (data) {
                scope.glAccounts = data;
            });

            resourceFactory.paymentTypeResource.getAll( function (data) {
                scope.paymentTypes = data;
            });

            resourceFactory.currencyConfigResource.get({fields: 'selectedCurrencyOptions'}, function (data) {
                scope.currencyOptions = data.selectedCurrencyOptions;
                scope.formData.currencyCode = scope.currencyOptions[0].code;
            });

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
                scope.formData.officeId = scope.offices[0].id;
            });

            //events for credits
            scope.addCrAccount = function () {
                scope.formData.crAccounts.push({});
            }

            scope.removeCrAccount = function (index) {
                scope.formData.crAccounts.splice(index, 1);
            }

            //events for debits
            scope.addDebitAccount = function () {
                    scope.formData.dbAccounts.push({});
            }

            scope.removeDebitAccount = function (index) {
                scope.formData.dbAccounts.splice(index, 1);
            }

            scope.submit = function () {
                var jeTransaction = new Object();
                var reqDate = dateFilter(scope.first.date, scope.df);
                jeTransaction.locale = scope.optlang.code;
                jeTransaction.dateFormat = scope.df;
                jeTransaction.officeId = this.formData.officeId;
                jeTransaction.transactionDate = reqDate;
                jeTransaction.referenceNumber = this.formData.referenceNumber;
                jeTransaction.comments = this.formData.comments;
                jeTransaction.currencyCode = this.formData.currencyCode;
                jeTransaction.paymentTypeId = this.formData.paymentTypeId;
                jeTransaction.accountNumber = this.formData.accountNumber;
                jeTransaction.checkNumber = this.formData.checkNumber;
                jeTransaction.routingCode = this.formData.routingCode;
                jeTransaction.receiptNumber = this.formData.receiptNumber;
                jeTransaction.bankNumber = this.formData.bankNumber;

                //Construct credits array
                jeTransaction.credits = [];
                for (var i = 0; i < this.formData.crAccounts.length; i++) {
                    var temp = new Object();
                    if(this.formData.crAccounts[i].select){
                    	temp.glAccountId = this.formData.crAccounts[i].select.id;
                    }
                    temp.amount = this.formData.crAccounts[i].crAmount;
                    jeTransaction.credits.push(temp);
                }
                //construct debits array
                jeTransaction.debits = [];
                for (var i = 0; i < this.formData.dbAccounts.length; i++) {
                    var temp = new Object();
                    if(this.formData.dbAccounts[i].select){
                    	temp.glAccountId = this.formData.dbAccounts[i].select.id;
                    }
                    temp.amount = this.formData.dbAccounts[i].debitAmount;
                    jeTransaction.debits.push(temp);
                }

                resourceFactory.journalEntriesResource.save(jeTransaction, function (data) {
                    location.path('/viewtransactions/' + data.transactionId);
                });
            }
        }
    });
    mifosX.ng.application.controller('JournalEntryController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.JournalEntryController]).run(function ($log) {
        $log.info("JournalEntryController initialized");
    });
}(mifosX.controllers || {}));;
(function (module) {
    mifosX.controllers = _.extend(module, {
        PeriodicAccrualAccountingController: function (scope, resourceFactory, location, translate, routeParams, dateFilter) {
            scope.first = {};
            scope.formData = {};
            scope.accrueTill = new Date();
            scope.restrictDate = new Date();

            scope.submit = function () {
                var reqDate = dateFilter(scope.accrueTill, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.tillDate = reqDate;
                resourceFactory.periodicAccrualAccountingResource.run(this.formData, function (data) {
                    location.path('/accounting');
                });
            }
        }
    });
    mifosX.ng.application.controller('PeriodicAccrualAccountingController', ['$scope', 'ResourceFactory', '$location', '$translate', '$routeParams', 'dateFilter', mifosX.controllers.PeriodicAccrualAccountingController]).run(function ($log) {
        $log.info("PeriodicAccrualAccountingController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateProvisoningEntriesController: function (scope, resourceFactory, location, dateFilter, translate) {
            scope.template = [];
            scope.formData = {};
            scope.translate = translate;
            scope.submitteddate = new Date();

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.date = dateFilter(this.submitteddate, scope.df);
                resourceFactory.provisioningentries.post(this.formData, function (data) {
                    location.path('/viewprovisioningentry/' + data.resourceId);

                });
            };
        }
    });
    mifosX.ng.application.controller('CreateProvisoningEntriesController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$translate', mifosX.controllers.CreateProvisoningEntriesController]).run(function ($log) {
        $log.info("CreateProvisoningEntriesController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewAllProvisoningEntriesController: function (scope, routeParams, paginatorService, resourceFactory, location, $uibModal) {

            scope.routeTo = function (id) {
                location.path('/viewprovisioningentry/' + id);
            };

            scope.viewJournals = function (id) {
                location.path('/viewprovisioningjournalentry/' + id);
            };

            scope.recreate = function (id) {
                resourceFactory.provisioningentries.reCreateProvisioningEntries({entryId: id}, this.formData, function (data) {
                    location.path('/viewprovisioningentry/'+id);
                });
            };

            scope.searchTransaction = function () {
                scope.entries = paginatorService.paginate(fetchFunction, 10);
            };

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.dateFormat = scope.df;
                scope.saveSC();
                resourceFactory.provisioningentries.getAll(params, callback) ;
            };

            paginatorService.currentOffset = 0 ;
            scope.entries = paginatorService.paginate(fetchFunction, 10);
        }
    });
    mifosX.ng.application.controller('ViewAllProvisoningEntriesController', ['$scope', '$routeParams', 'PaginatorService', 'ResourceFactory', '$location', '$uibModal', mifosX.controllers.ViewAllProvisoningEntriesController]).run(function ($log) {
        $log.info("ViewAllProvisoningEntriesController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewProvisioningEntryController: function (scope, routeParams, paginatorService, resourceFactory, location, $uibModal) {
            scope.charge = [];
            scope.choice = 0;
            var i = 0 ;
            var temp = 0 ;
            scope.totalReservedAmount;
            scope.formData = {};
            scope.transactions = [];

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });
            resourceFactory.loanProductResource.getAllLoanProducts(function (data) {
                scope.loanproducts = data;
            }) ;
            resourceFactory.provisioningcategory.getAll(function (data) {
                scope.provisioningcategories = data;
            }) ;


            resourceFactory.provisioningentries.get({entryId: routeParams.entryId}, function (data) {
                scope.data = data ;
                scope.createdby = data.createdUser ;
                scope.createdDate = data.createdDate ;
                scope.totalReservedAmount = data.reservedAmount ;
                scope.isjournalEntriesCreated = !data.journalEntry ;
            });

            scope.searchTransaction = function () {
                scope.transactions = paginatorService.paginate(fetchFunction, 10);
            };

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.entryId = routeParams.entryId ;
                params.offset = offset;
                params.limit = limit;
                if (scope.formData.officeId) {
                    params.officeId = scope.formData.officeId;
                }

                if (scope.formData.loanproductId) {
                    params.productId = scope.formData.loanproductId;
                }

                if (scope.formData.categoryId) {
                    params.categoryId = scope.formData.categoryId;
                }
                scope.saveSC();
                resourceFactory.provisioningentriesSearch.get(params, callback);
            };

            paginatorService.currentOffset = 0 ;
            scope.transactions = paginatorService.paginate(fetchFunction, 10);

            scope.submit = function () {
                resourceFactory.provisioningentries.createJournals({entryId: routeParams.entryId}, this.formData, function (data) {
                    location.path('/viewprovisioningentries/');
                });
            };
        }
    });
    mifosX.ng.application.controller('ViewProvisioningEntryController', ['$scope', '$routeParams', 'PaginatorService', 'ResourceFactory', '$location', '$uibModal', mifosX.controllers.ViewProvisioningEntryController]).run(function ($log) {
        $log.info("ViewProvisioningEntryController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewProvisioningJournalEntriesController: function (scope, routeParams, paginatorService, resourceFactory, location, $uibModal) {
            scope.charge = [];
            scope.choice = 0;
            scope.transactions = [];
            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.entryId = routeParams.entryId ;
                params.offset = offset;
                params.limit = limit;
                scope.saveSC();
                resourceFactory.provisioningjournals.get(params, callback);
            };

            paginatorService.currentOffset = 0 ;
            scope.transactions = paginatorService.paginate(fetchFunction, 10);
            scope.displayResults = true;

            scope.submit = function () {
                resourceFactory.provisioningentries.createJournals({entryId: routeParams.entryId}, this.formData, function (data) {
                    location.path('/viewprovisioningentries/');
                });
            };
        }
    });
    mifosX.ng.application.controller('ViewProvisioningJournalEntriesController', ['$scope', '$routeParams', 'PaginatorService', 'ResourceFactory', '$location', '$uibModal', mifosX.controllers.ViewProvisioningJournalEntriesController]).run(function ($log) {
        $log.info("ViewProvisioningJournalEntriesController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        SearchTransactionController: function (scope, resourceFactory, paginatorService, dateFilter, location) {
            scope.filters = [
                {option: "All", value: ""},
                {option: "Manual Entries", value: true},
                {option: "System Entries", value: false}
            ];
            scope.isCollapsed = true;
            scope.displayResults = false;
            scope.transactions = [];
            scope.glAccounts = [];
            scope.offices = [];
            scope.date = {};
            scope.formData = {};

            scope.routeTo = function (id) {
                location.path('/viewtransactions/' + id);
            };

            resourceFactory.accountCoaResource.getAllAccountCoas({
                manualEntriesAllowed: true,
                usage: 1,
                disabled: false
            }, function (data) {
                scope.glAccounts = data;
            });

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });

            if (!scope.searchCriteria.journals) {
                scope.searchCriteria.journals = [null, null, null, null, null, null];
                scope.saveSC();
            }
            scope.formData.transactionId = scope.searchCriteria.journals[0];
            scope.formData.glAccount = scope.searchCriteria.journals[1];
            scope.formData.officeId = scope.searchCriteria.journals[2];
            scope.formData.manualEntriesOnly = scope.searchCriteria.journals[3];
            scope.date.first = scope.searchCriteria.journals[4];
            scope.date.second = scope.searchCriteria.journals[5];

            var fetchFunction = function (offset, limit, callback) {
                var reqFirstDate = dateFilter(scope.date.first, scope.df);
                var reqSecondDate = dateFilter(scope.date.second, scope.df);
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.dateFormat = scope.df;

                if (scope.formData.transactionId) {
                    params.transactionId = scope.formData.transactionId;
                    scope.searchCriteria.journals[0] = params.transactionId;
                } else
                    scope.searchCriteria.journals[0] = null;

                if (scope.formData.glAccount) {
                    params.glAccountId = scope.formData.glAccount;
                    scope.searchCriteria.journals[1] = params.glAccountId;
                } else
                    scope.searchCriteria.journals[1] = null;

                if (scope.formData.officeId) {
                    params.officeId = scope.formData.officeId;
                    scope.searchCriteria.journals[2] = params.officeId;
                } else
                    scope.searchCriteria.journals[2] = null;

                if (scope.formData.manualEntriesOnly == true || scope.formData.manualEntriesOnly == false) {
                    params.manualEntriesOnly = scope.formData.manualEntriesOnly;
                    scope.searchCriteria.journals[3] = params.manualEntriesOnly;
                } else
                    scope.searchCriteria.journals[3] = null;

                if (scope.date.first) {
                    params.fromDate = reqFirstDate;
                    scope.searchCriteria.journals[4] = params.fromDate;
                } else
                    scope.searchCriteria.journals[4] = null;

                if (scope.date.second) {
                    params.toDate = reqSecondDate;
                    scope.searchCriteria.journals[5] = params.toDate;
                } else
                    scope.searchCriteria.journals[5] = null;

                if(scope.formData.loanaccountId){
                    params.loanId = scope.formData.loanaccountId;
                    scope.searchCriteria.journals[6] = params.loanId;
                } else
                    scope.searchCriteria.journals[6] = null;

                if(scope.formData.savingsaccountId){
                    params.savingsId = scope.formData.savingsaccountId;
                    scope.searchCriteria.journals[7] = params.savingsId;
                } else
                    scope.searchCriteria.journals[7] = null;

                scope.saveSC();
                resourceFactory.journalEntriesResource.search(params, callback);
            };

            scope.clearFilters = function () {
                scope.formData.transactionId = null;
                scope.formData.glAccount = null;
                document.getElementById('glAccounts_chosen').childNodes[0].childNodes[0].innerHTML = "Select Account name Or Code";
                scope.formData.officeId = null;
                document.getElementById('offices_chosen').childNodes[0].childNodes[0].innerHTML = "Select office";
                scope.formData.manualEntriesOnly = null;
                document.getElementById('filters_chosen').childNodes[0].childNodes[0].innerHTML = "Select filter";
                scope.date.first = null;
                scope.date.second = null;
                scope.formData.loanaccountId = null;
                scope.formData.savingsaccountId = null;
            };

            scope.searchTransaction = function () {
                scope.displayResults = true;
                scope.transactions = paginatorService.paginate(fetchFunction, 14);
                scope.isCollapsed = false;
            };

            if(location.search().loanId != null){
                scope.formData.loanaccountId = location.search().loanId;
                scope.displayResults = true;
                scope.transactions = paginatorService.paginate(fetchFunction, 14);
                scope.isCollapsed = false;
                scope.isValid = true;
                scope.path = "#/viewloanaccount/" + scope.formData.loanaccountId;
            }

            if(location.search().savingsId != null){
                scope.formData.savingsaccountId = location.search().savingsId;
                scope.displayResults = true;
                scope.transactions = paginatorService.paginate(fetchFunction, 14);
                scope.isCollapsed = false;
                scope.isValid = true;
                scope.path = "#/viewsavingaccount/" + scope.formData.savingsaccountId;
            }
        }
    });
    mifosX.ng.application.controller('SearchTransactionController', ['$scope', 'ResourceFactory', 'PaginatorService', 'dateFilter', '$location', mifosX.controllers.SearchTransactionController]).run(function ($log) {
        $log.info("SearchTransactionController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewAccountingClosureController: function (scope, resourceFactory, location, routeParams, $uibModal) {
            scope.accountClosure = {};
            scope.choice = 0;
            resourceFactory.accountingClosureResource.getView({accId: routeParams.id}, function (data) {
                scope.accountClosure = data;
            });
            scope.deleteAcc = function () {
                $uibModal.open({
                    templateUrl: 'deleteacc.html',
                    controller: AccDeleteCtrl
                });
            };
            var AccDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.accountingClosureResource.delete({accId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/accounts_closure');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ViewAccountingClosureController', ['$scope', 'ResourceFactory', '$location', '$routeParams', '$uibModal', mifosX.controllers.ViewAccountingClosureController]).run(function ($log) {
        $log.info("ViewAccountingClosureController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewAccRuleController: function (scope, resourceFactory, routeParams, location, $uibModal) {

            resourceFactory.accountingRulesResource.getById({accountingRuleId: routeParams.id}, function (data) {
                scope.rule = data;
            });
            scope.deleteRule = function () {
                $uibModal.open({
                    templateUrl: 'deleteaccrule.html',
                    controller: AccRuleDeleteCtrl
                });
            };
            var AccRuleDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.accountingRulesResource.delete({accountingRuleId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/accounting_rules');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ViewAccRuleController', ['$scope', 'ResourceFactory', '$routeParams', '$location', '$uibModal', mifosX.controllers.ViewAccRuleController]).run(function ($log) {
        $log.info("ViewAccRuleController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewFinancialActivityController: function (scope, resourceFactory, routeParams, location, $uibModal) {
            resourceFactory.officeToGLAccountMappingResource.get({mappingId: routeParams.mappingId},function (data) {
                scope.mapping = data;
            });

            scope.deletemapping = function () {
                $uibModal.open({
                    templateUrl: 'deletemapping.html',
                    controller: AccRuleDeleteCtrl
                });
            };
            var AccRuleDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.officeToGLAccountMappingResource.delete({mappingId: routeParams.mappingId}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/financialactivityaccountmappings');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewFinancialActivityController', ['$scope', 'ResourceFactory', '$routeParams', '$location', '$uibModal', mifosX.controllers.ViewFinancialActivityController]).run(function ($log) {
        $log.info("ViewFinancialActivityController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {

        ViewTransactionController: function (scope, routeParams, resourceFactory, location, route, $uibModal) {
            scope.flag = false;
            scope.manualEntry = false;
            scope.productName = routeParams.productName;
            scope.clientName = routeParams.clientName;
            scope.accountNo = routeParams.accountNo;
            scope.clientId = routeParams.clientId;
            scope.loanId = routeParams.loanId;
            scope.groupId = routeParams.groupId;
            scope.groupName = routeParams.groupName;
            scope.journalEntryTransactionId = routeParams.transactionId;
            if(scope.journalEntryTransactionId != null && scope.journalEntryTransactionId !=""){
                scope.journalEntryTransactionId = scope.journalEntryTransactionId.substring(1,scope.journalEntryTransactionId.length);
            }


            resourceFactory.journalEntriesResource.get({transactionId: routeParams.transactionId, transactionDetails:true}, function (data) {
                scope.transactionNumber = routeParams.transactionId;
                scope.transactions = data.pageItems;
                for (var i in data.pageItems) {
                    scope.manualEntry = data.pageItems[i].manualEntry;
                    if (data.pageItems[i].reversed == false) {
                        scope.flag = true;
                    }
                }
            });
            scope.confirmation = function () {
                $uibModal.open({
                    templateUrl: 'confirmation.html',
                    controller: ConfirmationCtrl,
                    resolve: {
                        id: function () {
                            return scope.trxnid;
                        }
                    }
                });
            };

            var ConfirmationCtrl = function ($scope, $uibModalInstance, id) {
                $scope.transactionnumber = id.transactionId;
                $scope.redirect = function () {
                    $uibModalInstance.close('delete');
                    location.path('/viewtransactions/' + id.transactionId);
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.showTransaction = function (transaction) {
                scope.transaction = transaction;
                $uibModal.open({
                    templateUrl: 'viewjournalentry.html',
                    controller: ViewJournalEntryCtrl,
                    resolve: {
                        transaction: function () {
                            return scope.transaction;
                        }
                    }
                });
            };

            var ViewJournalEntryCtrl = function ($scope, $uibModalInstance, transaction) {
                $scope.transaction = transaction;
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.reverseTransaction = function (transactionId) {
                $uibModal.open({
                    templateUrl: 'reverseTransaction.html',
                    controller: ReverseJournalEntriesCtrl,
                    resolve: {
                        transactionId: function () {
                            return transactionId;
                        }
                    }
                });
            }

            var ReverseJournalEntriesCtrl = function ($scope, $uibModalInstance, transactionId) {
                $scope.data = {
                    reverseComments:""
                };
                $scope.reverse = function () {
                    reverseData = {transactionId: transactionId, comments: $scope.data.reverseComments};
                    resourceFactory.journalEntriesResource.reverse(reverseData, function (data) {
                    $uibModalInstance.dismiss('cancel');

                    scope.trxnid = data;
                    scope.confirmation();

                    route.reload();

                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ViewTransactionController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$route', '$uibModal', mifosX.controllers.ViewTransactionController]).run(function ($log) {
        $log.info("ViewTransactionController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateStandingInstructionController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.restrictDate = new Date();
            var params = {clientId: routeParams.clientId,officeId:routeParams.officeId};
            var accountType = routeParams.accountType || '';
            if (accountType == 'fromsavings') params.fromAccountType = 2;
            else if (accountType == 'fromloans') params.fromAccountType = 1;
            else params.fromAccountType = 0;

            scope.toOffices = [];
            scope.toClients = [];
            scope.toAccountTypes = [];
            scope.toAccounts = [];
            scope.destinationOptions = [{id:1,name:'own account'},{id:2,name:'with in bank'}];
            scope.showselctclient = 'false';
            scope.allowclientedit = 'true';

            scope.formData = {fromOfficeId: Number(params.officeId), fromClientId: Number(params.clientId),fromAccountType:params.fromAccountType};
            resourceFactory.standingInstructionTemplateResource.get(scope.formData, function (data) {
                scope.standinginstruction = data;
                scope.toOffices = data.toOfficeOptions;
                scope.toAccountTypes = data.toAccountTypeOptions;
            });

            scope.changeEvent = function () {

                var params = scope.formData;

                resourceFactory.standingInstructionTemplateResource.get(params, function (data) {
                    scope.standinginstruction = data;
                    scope.toOffices = data.toOfficeOptions;
                    scope.toAccountTypes = data.toAccountTypeOptions;
                    scope.toClients = data.toClientOptions;
                    scope.toAccounts = data.toAccountOptions;
                    scope.formData.transferAmount = data.transferAmount;
                });
            };

            scope.changedestination = function () {
                if(scope.destination == 1){
                    scope.allowclientedit = 'false';
                    scope.formData.toOfficeId = scope.formData.fromOfficeId;
                    scope.formData.toClientId = scope.formData.fromClientId;
                    console.log(scope.formData);
                    scope.changeEvent();
                }else{
                    scope.allowclientedit = 'true';
                    scope.formData.toOfficeId = null;
                    scope.formData.toClientId = null;
                }
            }

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                if (this.formData.validFrom) this.formData.validFrom = dateFilter(this.formData.validFrom, scope.df);
                if (this.formData.validTill) this.formData.validTill = dateFilter(this.formData.validTill, scope.df);
                if(this.recurrenceOnMonthDay){
                 var reqDate = dateFilter(this.recurrenceOnMonthDay, 'dd MMMM');
                 this.formData.recurrenceOnMonthDay = reqDate;
                 this.formData.monthDayFormat = 'dd MMMM';
                }
                this.formData.fromClientId = scope.standinginstruction.fromClient.id;
                this.formData.fromOfficeId = scope.standinginstruction.fromClient.officeId;
                resourceFactory.standingInstructionResource.save(this.formData, function (data) {
                    location.path('/viewclient/' + data.clientId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateStandingInstructionController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.CreateStandingInstructionController]).run(function ($log) {
        $log.info("CreateStandingInstructionController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditStandingInstructionController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.restrictDate = new Date();
            var params = {};
            scope.formData = {};
            scope.showselctclient = 'false';
            scope.allowclientedit = 'true';
            scope.standingInstructionId =  routeParams.instructionId;
            if(routeParams.from == 'list'){
                scope.fromlist = true;
            }
            scope.from = routeParams.from;
            params.standingInstructionId = scope.standingInstructionId;
            resourceFactory.standingInstructionResource.withTemplate(params, function (data) {
                scope.standinginstruction = data;
                scope.formData = {
                    priority:data.priority.id,
                    status:data.status.id,
                    instructionType:data.instructionType.id,
                    amount:data.amount,
                    validFrom:data.validFrom,
                    validTill:data.validTill,
                    recurrenceType:data.recurrenceType.id,
                    recurrenceInterval:data.recurrenceInterval
                }
                if(data.recurrenceFrequency){
                    scope.formData.recurrenceFrequency=data.recurrenceFrequency.id;   
                }
                
                if(data.fromClient.id == data.toClient.id){
                    scope.allowclientedit = false;
                }
                if (data.recurrenceOnMonthDay) {
                    var d = new Date();
                    var n = d.getFullYear();
                    data.recurrenceOnMonthDay.push(n);
                    var actDate = dateFilter(data.recurrenceOnMonthDay, 'dd MMMM');
                    scope.recurrenceOnMonthDay = new Date(actDate);
                }
                scope.formData.validFrom = new Date(scope.formData.validFrom);
                if(scope.formData.validTill){
                   scope.formData.validTill = new Date(scope.formData.validTill);
                }
            });

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                if (this.formData.validFrom) this.formData.validFrom = dateFilter(this.formData.validFrom, scope.df);
                if (this.formData.validTill) this.formData.validTill = dateFilter(this.formData.validTill, scope.df);
                if(this.recurrenceOnMonthDay){
                 var reqDate = dateFilter(this.recurrenceOnMonthDay, 'dd MMMM');
                 this.formData.recurrenceOnMonthDay = reqDate;
                 this.formData.monthDayFormat = 'dd MMMM';
                }
                resourceFactory.standingInstructionResource.update({standingInstructionId: scope.standingInstructionId},this.formData, function (data) {
                    location.path('/viewstandinginstruction/' + scope.standingInstructionId);
                });
            };

            scope.cancel = function(){
                if(scope.fromlist){
                    scope.viewliststandinginstruction();
                }else{
                    scope.viewstandinginstruction();
                }
            }

            scope.viewstandinginstruction = function () {
                location.path('/viewstandinginstruction/'+ scope.standingInstructionId);
            };

            scope.viewliststandinginstruction = function () {
                location.path('/liststandinginstructions/'+scope.standinginstruction.fromClient.officeId+'/'+scope.standinginstruction.fromClient.id);
            };
        }
    });
    mifosX.ng.application.controller('EditStandingInstructionController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.EditStandingInstructionController]).run(function ($log) {
        $log.info("EditStandingInstructionController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ListStandingInstructionController: function (scope, resourceFactory, paginatorService,routeParams, dateFilter, location,$uibModal) {
            scope.restrictDate = new Date();
            var params = {officeId:routeParams.officeId,clientId: routeParams.clientId};
            if(routeParams.clientId){
                scope.formData = {fromOfficeId: Number(params.officeId), fromClientId: Number(params.clientId),fromAccountType:2};
                scope.fromClient = true;
            }else{ 
                scope.formData = {fromAccountType:2};
                scope.fromClient = false;
            }
            resourceFactory.standingInstructionTemplateResource.get(scope.formData, function (data) {
                scope.standinginstruction = data;
                if(data.fromClient){
                    scope.formData.clientName = data.fromClient.displayName;
                    scope.searchTransaction();
                }
            });

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.dateFormat = scope.df;

                if (scope.formData.transferType) {
                    params.transferType = scope.formData.transferType;
                }

                if (scope.formData.clientName) {
                    params.clientName = scope.formData.clientName;
                }

                if (scope.formData.fromClientId) {
                    params.clientId = scope.formData.fromClientId;
                }

               
                if (scope.formData.fromAccountId) {
                    params.fromAccountId = scope.formData.fromAccountId;
                    params.fromAccountType = scope.formData.fromAccountType;
                }

                        

                resourceFactory.standingInstructionResource.search(params, callback);
            };

             scope.searchTransaction = function () {
                scope.displayResults = true;
                scope.instructions = paginatorService.paginate(fetchFunction, 14);
                scope.isCollapsed = false;
            };


            scope.deletestandinginstruction = function (id) {
                $uibModal.open({
                    templateUrl: 'delInstruction.html',
                    controller: DelInstructionCtrl,
                    resolve: {
                        ids: function () {
                            return id;
                        }
                    }
                });
            };

            var DelInstructionCtrl = function ($scope, $uibModalInstance, ids) {
                $scope.delete = function () {
                    resourceFactory.standingInstructionResource.cancel({standingInstructionId: ids}, function (data) {
                        scope.searchTransaction();
                        $uibModalInstance.close('delete');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ListStandingInstructionController', ['$scope', 'ResourceFactory', 'PaginatorService', '$routeParams','dateFilter', '$location','$uibModal', mifosX.controllers.ListStandingInstructionController]).run(function ($log) {
        $log.info("ListStandingInstructionController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ListTransactionsController: function (scope, resourceFactory, paginatorService,routeParams, dateFilter, location) {

            scope.standingInstructionId = routeParams.instructionId;
            scope.details ={};
            scope.transactions={};
            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.dateFormat = scope.df;
                 params.standingInstructionId = scope.standingInstructionId;
               
                 resourceFactory.standingInstructionResource.getTransactions(params, function (data) {
                scope.details.fromAccount = data.fromAccount;
                scope.details.toAccount = data.toAccount;
                scope.details.fromAccountType = data.fromAccountType;
                scope.details.toAccountType = data.toAccountType;
                scope.details.toClient = data.toClient;
                scope.details.name = data.name;
                scope.details.id = data.id;
                callback(data.transactions);
            });

            
            

            };
        scope.transactions = paginatorService.paginate(fetchFunction, 14);

        }
    });
    mifosX.ng.application.controller('ListTransactionsController', ['$scope', 'ResourceFactory', 'PaginatorService', '$routeParams','dateFilter', '$location', mifosX.controllers.ListTransactionsController]).run(function ($log) {
        $log.info("ListTransactionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        MakeAccountTransferController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.restrictDate = new Date();
            var params = {fromAccountId: routeParams.accountId};
            var accountType = routeParams.accountType || '';
            if (accountType == 'fromsavings') params.fromAccountType = 2;
            else if (accountType == 'fromloans') params.fromAccountType = 1;
            else params.fromAccountType = 0;

            scope.toOffices = [];
            scope.toClients = [];
            scope.toAccountTypes = [];
            scope.toAccounts = [];

            scope.back = function () {
                window.history.back();
            };

            scope.formData = {fromAccountId: params.fromAccountId, fromAccountType: params.fromAccountType};
            resourceFactory.accountTransfersTemplateResource.get(params, function (data) {
                scope.transfer = data;
                scope.toOffices = data.toOfficeOptions;
                scope.toAccountTypes = data.toAccountTypeOptions;
                scope.formData.transferAmount = data.transferAmount;
            });

            scope.changeClient = function (client) {
                scope.formData.toClientId = client.id;
                scope.changeEvent();
            };

            scope.changeEvent = function () {

                var params = scope.formData;
                delete params.transferAmount;
                delete params.transferDate;
                delete params.transferDescription;

                resourceFactory.accountTransfersTemplateResource.get(params, function (data) {
                    scope.transfer = data;
                    scope.toOffices = data.toOfficeOptions;
                    scope.toAccountTypes = data.toAccountTypeOptions;
                    scope.toClients = data.toClientOptions;
                    scope.toAccounts = data.toAccountOptions;
                    scope.formData.transferAmount = data.transferAmount;
                });
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                if (this.formData.transferDate) this.formData.transferDate = dateFilter(this.formData.transferDate, scope.df);
                this.formData.fromClientId = scope.transfer.fromClient.id;
                this.formData.fromOfficeId = scope.transfer.fromClient.officeId;
                resourceFactory.accountTransferResource.save(this.formData, function (data) {
                    if (params.fromAccountType == 1) {
                        location.path('/viewloanaccount/' + data.loanId);
                    } else if (params.fromAccountType == 2) {
                        location.path('/viewsavingaccount/' + data.savingsId);
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('MakeAccountTransferController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.MakeAccountTransferController]).run(function ($log) {
        $log.info("MakeAccountTransferController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        StandingInstructionsHistoryController: function (scope, resourceFactory, paginatorService, dateFilter, $uibModal) {
            scope.date = {};
            scope.formData = {};
            scope.transactions = {};
            scope.isCollapsed = true;
            scope.displayResults = false;

            resourceFactory.standingInstructionTemplateResource.get({}, function (data) {
                scope.template = data;
            });

            if (!scope.searchCriteria.sih) {
                scope.searchCriteria.sih = [null, null, null, null, null, null, null];
                scope.saveSC();
            }
            scope.formData.clientName = scope.searchCriteria.sih[0];
            scope.formData.clientId = scope.searchCriteria.sih[1];
            scope.formData.transferType = scope.searchCriteria.sih[2];
            scope.formData.fromAccountType = scope.searchCriteria.sih[3];
            scope.formData.fromAccountId = scope.searchCriteria.sih[4];
            scope.date.first = scope.searchCriteria.sih[5];
            scope.date.second = scope.searchCriteria.sih[6];

            var fetchFunction = function (offset, limit, callback) {
                var reqFirstDate = dateFilter(scope.date.first, scope.df);
                var reqSecondDate = dateFilter(scope.date.second, scope.df);
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.dateFormat = scope.df;

                if (scope.formData.clientName) {
                    params.clientName = scope.formData.clientName;
                    scope.searchCriteria.sih[0] = params.clientName;
                } else
                    scope.searchCriteria.sih[0] = null;

                if (scope.formData.clientId) {
                    params.clientId = scope.formData.clientId;
                    scope.searchCriteria.sih[1] = params.clientId;
                } else
                    scope.searchCriteria.sih[1] = null;

                if (scope.formData.transferType) {
                    params.transferType = scope.formData.transferType;
                    scope.searchCriteria.sih[2] = params.transferType;
                } else
                    scope.searchCriteria.sih[2] = null;

                if (scope.formData.fromAccountType) {
                    params.fromAccountType = scope.formData.fromAccountType;
                    scope.searchCriteria.sih[3] = params.fromAccountType;
                } else
                    scope.searchCriteria.sih[3] = null;

                if (scope.formData.fromAccountId) {
                    params.fromAccountId = scope.formData.fromAccountId;
                    scope.searchCriteria.sih[4] = params.fromAccountId;
                } else
                    scope.searchCriteria.sih[4] = null;

                if (scope.date.first) {
                    params.fromDate = reqFirstDate;
                    scope.searchCriteria.sih[5] = params.fromDate;
                } else
                    scope.searchCriteria.sih[5] = null;

                if (scope.date.second) {
                    params.toDate = reqSecondDate;
                    scope.searchCriteria.sih[6] = params.toDate;
                } else
                    scope.searchCriteria.sih[6] = null;

                scope.saveSC();
                resourceFactory.standingInstructionHistoryResource.get(params, callback);
            };

            scope.getTransactions = function () {
                scope.transactions = paginatorService.paginate(fetchFunction, 14);
                scope.displayResults = true;
                scope.isCollapsed = false;
            }

            scope.isFailed = function (transaction) {
                return transaction.status == 'failed' && transaction.errorLog.length > 0;
            };

            scope.errorLog = function (transaction) {
                $uibModal.open({
                    templateUrl: 'errorlog.html',
                    controller: ErrorLogCtrl,
                    resolve: {
                        transaction: function () {
                            return transaction;
                        }
                    }
                });
            };

            var ErrorLogCtrl = function ($scope, $uibModalInstance, transaction) {
                $scope.error = transaction.errorLog;
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('close');
                };
            };
        }
    });
    mifosX.ng.application.controller('StandingInstructionsHistoryController', ['$scope', 'ResourceFactory', 'PaginatorService', 'dateFilter', '$uibModal', mifosX.controllers.StandingInstructionsHistoryController]).run(function ($log) {
        $log.info("StandingInstructionsHistoryController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewAccountTransferDetailsController: function (scope, resourceFactory, location, routeParams) {

            resourceFactory.accountTransferResource.get({transferId: routeParams.id}, function (data) {
                scope.transferData = data;
            });
        }
    });
    mifosX.ng.application.controller('ViewAccountTransferDetailsController', ['$scope', 'ResourceFactory', '$location', '$routeParams', mifosX.controllers.ViewAccountTransferDetailsController]).run(function ($log) {
        $log.info("ViewAccountTransferDetailsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewStandingInstructionController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.restrictDate = new Date();
            var params = {};
            scope.formData = {};
            scope.showselctclient = 'false';
            scope.allowclientedit = 'true';
            scope.standingInstructionId =  routeParams.instructionId;
            params.standingInstructionId = scope.standingInstructionId;

            resourceFactory.standingInstructionResource.get(params, function (data) {
                scope.standinginstruction = data;
                if(data.fromClient.id == data.toClient.id){
                    scope.allowclientedit = false;
                }
                
            });
            
            scope.cancel = function(){
                location.path('/liststandinginstructions/'+scope.standinginstruction.fromClient.officeId+'/'+scope.standinginstruction.fromClient.id);
            }

        }
    });
    mifosX.ng.application.controller('ViewStandingInstructionController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.ViewStandingInstructionController]).run(function ($log) {
        $log.info("ViewStandingInstructionController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AdHocQueryListController: function (scope, resourceFactory, location) {
            scope.adhocquerys = [];

            scope.routeTo = function (id) {
                location.path('/viewadhocquery/' + id);
            };
            
            resourceFactory.adHocQueryResource.getAllAdHocQuery(function (data) {
                scope.adhocquerys = data;

                for (var j = 0; j < data.length; j+= 1) {
                    var d = data[j];
                    for (var i = 0; i < d.reportRunFrequencies.length; i+= 1) {
                        if (d.reportRunFrequency === d.reportRunFrequencies[i].id) {
                            d.reportRunFrequency = d.reportRunFrequencies[i].code;
                            break;
                        }
                    }
                }
            });
        }
    });
    mifosX.ng.application.controller('AdHocQueryListController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.AdHocQueryListController]).run(function ($log) {
        $log.info("AdHocQueryListController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
    	CreateAdHocQueryController: function (scope, location, resourceFactory) {
            scope.formData = {};
            scope.template = {};
            scope.customReportRunFrequencyFieldShow = false;

            resourceFactory.adHocQueryTemplateResource.get(function(data) {
              scope.template = data;
            });

            scope.reportRunFrequencySelected = function(id) {
              scope.customReportRunFrequencyFieldShow = id === 5;
            };

            scope.submit = function () {
                resourceFactory.adHocQueryResource.save(this.formData, function (data) {
                	//alert(this.formData.isActive);
                	//this.formData.isActive=this.formData.isActive ? 1 : 0;
                    location.path("/viewadhocquery/" + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateAdHocQueryController', ['$scope', '$location', 'ResourceFactory', mifosX.controllers.CreateAdHocQueryController]).run(function ($log) {
        $log.info("CreateAdHocQueryController initialized");
    });
}(mifosX.controllers || {}));


;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditAdHocQueryController: function (scope, routeParams, resourceFactory, location) {

            scope.formData = {};
            scope.adhocquery = [];
            scope.template = {};
            scope.customReportRunFrequencyFieldShow = false;

            resourceFactory.adHocQueryResource.get({adHocId: routeParams.id, template: 'true'}, function (data) {
                scope.formData.name = data.name;
                scope.formData.query = data.query;
                scope.formData.tableFields = data.tableFields;
                scope.formData.tableName = data.tableName;
                scope.adHocId = data.id;
                scope.formData.isActive=data.isActive;
                scope.formData.email=data.email;
                scope.formData.email=data.email;
                scope.formData.email=data.email;
                scope.formData.reportRunFrequency= data.reportRunFrequency;
                scope.formData.reportRunEvery= data.reportRunEvery;
                scope.template.reportRunFrequencies= data.reportRunFrequencies;
                scope.customReportRunFrequencyFieldShow = data.reportRunFrequency === 5;
            });
           
            scope.reportRunFrequencySelected = function(id) {
              scope.customReportRunFrequencyFieldShow = id === 5;
            };

           scope.submit = function () {
        	   
        	   //this.formData.isActive=this.formData.isActive ? 1 : 0;
        	  // alert(this.formData.email); 
        	   resourceFactory.adHocQueryResource.update({'adHocId': scope.adHocId}, this.formData, function (data) {
                    
                	location.path('/viewadhocquery/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditAdHocQueryController', ['$scope', '$routeParams', 'ResourceFactory', '$location', mifosX.controllers.EditAdHocQueryController]).run(function ($log) {
        $log.info("EditAdHocQueryController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewAdHocQueryController: function (scope, routeParams, route, location, resourceFactory, $modal) {
            scope.adhocquery = [];
            scope.formData = {};
            scope.customReportRunFrequencyFieldShow = false;
            resourceFactory.adHocQueryResource.get({'adHocId': routeParams.id}, function (data) {
                scope.adhocquery = data;

                scope.customReportRunFrequencyFieldShow = data.reportRunFrequency === 5;
                for (var i = 0; i < data.reportRunFrequencies.length; i+= 1) {
                    if (data.reportRunFrequency === data.reportRunFrequencies[i].id) {
                        data.reportRunFrequency = data.reportRunFrequencies[i].code;
                        break;
                    }
                }
            });
            
            var AdHocDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.adHocQueryResource.delete({adHocId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/adhocquery');
                        // added dummy request param because Content-Type header gets removed
                        // if the request does not contain any data (a request body)
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.deleteadhocquery = function () {
                $modal.open({
                    templateUrl: 'deleteadhocquery.html',
                    controller: AdHocDeleteCtrl
                });
            };
        }
    });
    mifosX.ng.application.controller('ViewAdHocQueryController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', '$uibModal', mifosX.controllers.ViewAdHocQueryController]).run(function ($log) {
        $log.info("ViewAdHocQueryController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportCentersController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/centers/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.centerTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        resourceFactory.centerTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams += '&officeId=' + scope.formData.officeId;
                    }else {
                        resourceFactory.centerTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }

            };

            scope.changeStaff = function() {
                if(scope.formData.staffId) {
                    if (scope.first.queryParams.indexOf("staffId")==-1) {
                        scope.first.queryParams = scope.first.queryParams + '&staffId=' + scope.formData.staffId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&staffId=\d+/i,"&staffId="+ scope.formData.staffId);
                    }
                } else {
                    if(scope.formData.officeId)
                        scope.first.queryParams = '&' + 'officeId=' + scope.formData.officeId;
                    else
                        scope.first.queryParams = '&';
                }
            };

            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "centers"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };
            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/centers/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportCentersController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportCentersController]).run(function ($log) {
        $log.info("BulkImportCentersController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CenterAttendanceController: function (scope, resourceFactory, routeParams, location, dateFilter) {
            scope.center = [];
            scope.tempData = {};
            scope.formData = {};
            scope.first = {};
            scope.first.date = new Date();
            scope.centerId = routeParams.centerId;
            resourceFactory.centerResource.get({centerId: routeParams.centerId, associations: 'groupMembers,collectionMeetingCalendar'}, function (data) {
                scope.center = data;
                scope.meeting = data.collectionMeetingCalendar;
            });
            resourceFactory.centerMeetingResource.getMeetingInfo({centerId: routeParams.centerId, templateSource: 'template', calenderId: routeParams.calendarId}, function (data) {
                scope.clients = data.clients;
                scope.attendanceOptions = data.attendanceTypeOptions;
                for (var i = 0; i < scope.clients.length; i++) {
                    scope.tempData[scope.clients[i].id] = data.attendanceTypeOptions[0].id;

                }
            });

            scope.attendanceUpdate = function (id) {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.meetingDate = reqDate;
                this.formData.clientsAttendance = [];
                for (var i = 0; i < scope.clients.length; i++) {
                    this.formData.clientsAttendance[i] = {clientId: scope.clients[i].id, attendanceType: this.tempData[scope.clients[i].id]};

                }
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.calendarId = id;
                resourceFactory.centerMeetingResource.save({centerId: routeParams.centerId, calendarId: routeParams.calendarId}, this.formData, function (data) {
                    location.path('/viewcenter/' + routeParams.centerId);
                }, function(response){
                    if(!response.status) {
                        scope.errorStatus = "Attendance already exist";
                    } else {
                        scope.errorStatus = "";
                    }
                });
            }

        }
    });
    mifosX.ng.application.controller('CenterAttendanceController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.CenterAttendanceController]).run(function ($log) {
        $log.info("CenterAttendanceController initialized");
    });
}(mifosX.controllers || {}));


;(function (module) {
    mifosX.controllers = _.extend(module, {
        CenterController: function (scope, resourceFactory, location) {
            scope.centers = [];
            scope.actualCenters = [];
            scope.searchText = "";
            scope.searchResults = [];
            scope.showClosed = false;
            scope.routeTo = function (id) {
                location.path('/viewcenter/' + id);
            };

            if (!scope.searchCriteria.centers) {
                scope.searchCriteria.centers = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.centers || '';

            scope.onFilter = function () {
                scope.searchCriteria.centers = scope.filterText;
                scope.saveSC();
            };


            scope.centersPerPage = 15;
            scope.getResultsPage = function (pageNumber) {
                if(scope.searchText){
                    var startPosition = (pageNumber - 1) * scope.centersPerPage;
                    scope.centers = scope.actualCenters.slice(startPosition, startPosition + scope.centersPerPage);
                    return;
                }
                var items = resourceFactory.centerResource.get({
                    offset: ((pageNumber - 1) * scope.centersPerPage),
                    limit: scope.centersPerPage,
                    paged: 'true',
                    orderBy: 'name',
                    sortOrder: 'ASC'
                }, function (data) {
                    scope.centers = data.pageItems;
                });
            }

            scope.initPage = function () {
                var items = resourceFactory.centerResource.get({
                    offset: 0,
                    limit: scope.centersPerPage,
                    paged: 'true',
                    orderBy: 'name',
                    sortOrder: 'ASC'
                }, function (data) {
                    scope.totalCenters = data.totalFilteredRecords;
                    scope.centers = data.pageItems;
                });
            }
            scope.initPage();

            scope.search = function () {
                scope.actualCenters = [];
                scope.searchResults = [];
                scope.filterText = "";
                var searchString = scope.searchText;
                searchString = searchString.replace(/(^"|"$)/g, '');
                var exactMatch=false;
                var n = searchString.localeCompare(scope.searchText);
                if(n!=0)
                {
                    exactMatch=true;
                }
                if(!scope.searchText){
                    scope.initPage();
                } else {
                    resourceFactory.globalSearch.search({query: searchString ,  resource: "groups",exactMatch: exactMatch}, function (data) {
                        var arrayLength = data.length;
                        for (var i = 0; i < arrayLength; i++) {
                            var result = data[i];
                            var center = {};
                            center.status = {};
                            center.subStatus = {};
                            if(result.entityType  == 'CENTER') {
                                center.name = result.entityName;
                                center.id = result.entityId;
                                center.accountNo = result.entityAccountNo;
                                center.officeName = result.parentName;
                                center.status.value = result.entityStatus.value;
                                center.status.code = result.entityStatus.code;
                                center.externalId = result.entityExternalId;
                                scope.actualCenters.push(center);
                            }
                        }
                        var numberOfCenters = scope.actualCenters.length;
                        scope.totalCenters = numberOfCenters;
                        scope.centers = scope.actualCenters.slice(0, scope.centersPerPage);
                    });
                }
            }

        }
    });
    mifosX.ng.application.controller('CenterController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.CenterController]).run(function ($log) {
        $log.info("CenterController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CloseCenterController: function (scope, routeParams, route, location, resourceFactory, dateFilter) {
            scope.template = [];
            scope.center = [];
            scope.first = {};
            scope.formData = {};
            scope.restrictDate = new Date();
            scope.first.date = new Date();
            resourceFactory.centerResource.get({centerId: routeParams.id, associations: 'groupMembers,collectionMeetingCalendar'}, function (data) {
                scope.center = data;
            });
            resourceFactory.centerTemplateResource.get({command: 'close'}, function (data) {
                scope.template = data;
                if(data.closureReasons[0]) {
                    scope.formData.closureReasonId = data.closureReasons[0].id;
                }
            });

            scope.closeGroup = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.closureDate = reqDate;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                resourceFactory.centerResource.save({centerId: routeParams.id, command: 'close'}, this.formData, function (data) {
                    location.path('/viewcenter/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CloseCenterController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', 'dateFilter', mifosX.controllers.CloseCenterController]).run(function ($log) {
        $log.info("CloseCenterController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateCenterController: function (scope, resourceFactory, location, dateFilter) {
            scope.offices = [];
            scope.staffs = [];
            scope.data = {};
            scope.first = {};
            scope.first.submitondate = new Date ();
            scope.formData = {};
            scope.restrictDate = new Date();
            scope.first.date = new Date();
            scope.addedGroups = [];
            resourceFactory.centerTemplateResource.get({staffInSelectedOfficeOnly:true},function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
                scope.groups = data.groupMembersOptions;
                scope.formData.officeId = data.officeOptions[0].id;
                scope.getGroups();
            });

            scope.getGroups = function() {
                resourceFactory.groupResource.getAllGroups({officeId: scope.formData.officeId }, function (data) {
                    scope.groups = data.filter(function (group) {
                        return !group.centerId;
                    });
                });
            }

            scope.changeOffice = function () {
                resourceFactory.centerTemplateResource.get({staffInSelectedOfficeOnly:true, officeId: scope.formData.officeId
                }, function (data) {
                    scope.staffs = data.staffOptions;
                });
                scope.getGroups();

            };
            scope.setChoice = function () {
                if (this.formData.active) {
                    scope.choice = 1;
                }
                else if (!this.formData.active) {
                    scope.choice = 0;
                }
            };

            scope.viewGroup = function (item) {
                scope.group = item;
            };

            scope.add = function () {
                if(scope.available != ""){
                    var temp = {};
                    temp.id = scope.available.id;
                    temp.name = scope.available.name;
                    scope.addedGroups.push(temp);
                }
            };

            scope.sub = function (id) {
                for (var i = 0; i < scope.addedGroups.length; i++) {
                    if (scope.addedGroups[i].id == id) {
                        scope.addedGroups.splice(i, 1);
                        break;
                    }
                }
            };

            scope.submit = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.activationDate = reqDate;

                if (scope.first.submitondate) {
                    reqDate = dateFilter(scope.first.submitondate, scope.df);
                    this.formData.submittedOnDate = reqDate;
                }

                scope.formData.groupMembers = [];
                for (var i in scope.addedGroups) {
                    scope.formData.groupMembers[i] = scope.addedGroups[i].id;
                }

                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.active = this.formData.active || false;
                resourceFactory.centerResource.save(this.formData, function (data) {
                    location.path('/viewcenter/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateCenterController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.CreateCenterController]).run(function ($log) {
        $log.info("CreateCenterController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditCenterController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.managecode = routeParams.managecode;
            scope.first = {};
            scope.first.date = new Date();
            scope.centerId = routeParams.id;
            scope.restrictDate = new Date();
            resourceFactory.centerResource.get({centerId: routeParams.id, template: 'true',staffInSelectedOfficeOnly:true}, function (data) {
                scope.edit = data;
                scope.staffs = data.staffOptions;
                scope.formData = {
                    name: data.name,
                    externalId: data.externalId,
                    staffId: data.staffId
                };

                if (data.activationDate) {
                    var newDate = dateFilter(data.activationDate, scope.df);
                    scope.first.date = new Date(newDate);
                }

                if (data.timeline.submittedOnDate) {
                    scope.mindate = new Date(data.timeline.submittedOnDate);
                }
            });

            scope.updateGroup = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.activationDate = reqDate;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                resourceFactory.centerResource.update({centerId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewcenter/' + routeParams.id);
                });
            };
            scope.activate = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                var newActivation = new Object();
                newActivation.activationDate = reqDate;
                newActivation.locale = scope.optlang.code;
                newActivation.dateFormat = scope.df;
                resourceFactory.centerResource.save({centerId: routeParams.id, command: 'activate'}, newActivation, function (data) {
                    location.path('/viewcenter/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditCenterController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.EditCenterController]).run(function ($log) {
        $log.info("EditCenterController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ManageGroupMembersController: function ($q, scope, resourceFactory, location, routeParams, $uibModal) {
        	
        	scope.centerId = routeParams.id;
            scope.indexOfClientToBeDeleted = "";

            scope.viewGroup = function (item) {
                scope.group = item;
            };

            resourceFactory.centerResource.get({centerId: routeParams.id, template: 'true', associations: 'groupMembers'}, function (data) {
                scope.data = data;
                scope.groups = data.groupMembers;

                resourceFactory.groupResource.getAllGroups({orderBy: 'name', sortOrder: 'ASC',orphansOnly: true,
                    officeId : scope.data.officeId},function(data){
                    scope.allGroups = data;
                });
            });
            
            scope.groupsOptions = function(value){
                return _.filter(scope.allGroups,function(group){
                        return group.name.indexOf(value) != -1
                });
            };

            scope.add = function () {
            	if(scope.available != ""){
	                scope.associate = {};
	            	scope.associate.groupMembers = [];
	                scope.associate.groupMembers[0] = scope.available.id;
	                var temp = {};
                    temp.id = scope.available.id;
                    temp.name = scope.available.name;
                    resourceFactory.centerResource.save({centerId: routeParams.id, command: 'associateGroups' }, scope.associate, function (data) {
	                	scope.groups.push(temp);
                        scope.available = "";
	                });
            	}
            };

            scope.remove = function (index,id) {
                scope.indexOfClientToBeDeleted = index;
            	$uibModal.open({
                    templateUrl: 'delete.html',
                    controller: GroupDeleteCtrl
                });
            	scope.disassociate = {};
            	scope.disassociate.groupMembers = [];
            	scope.disassociate.groupMembers.push(id);
            };
            
            var GroupDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                	resourceFactory.centerResource.save({centerId: routeParams.id, command: 'disassociateGroups' }, scope.disassociate, function (data) {
                        scope.groups.splice(scope.indexOfClientToBeDeleted, 1);
                        scope.available = "";
                        $uibModalInstance.close('activate');
                	});
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ManageGroupMembersController', ['$q','$scope', 'ResourceFactory', '$location', '$routeParams', '$uibModal', mifosX.controllers.ManageGroupMembersController]).run(function ($log) {
        $log.info("ManageGroupMembersController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewCenterController: function (scope, routeParams, resourceFactory, location, route, http, $uibModal, dateFilter, API_VERSION, $sce, $rootScope) {

            scope.center = [];
            scope.staffData = {};
            scope.formData = {};
            scope.report = false;
            scope.hidePentahoReport = true;
            resourceFactory.centerResource.get({centerId: routeParams.id, associations: 'groupMembers,collectionMeetingCalendar'}, function (data) {
                scope.center = data;
                scope.isClosedCenter = scope.center.status.value == 'Closed';
                scope.staffData.staffId = data.staffId;
                if(data.collectionMeetingCalendar) {
                    scope.meeting = data.collectionMeetingCalendar;
                }
            });
            scope.routeTo = function (id) {
                location.path('/viewsavingaccount/' + id);
            };
            resourceFactory.runReportsResource.get({reportSource: 'GroupSummaryCounts', genericResultSet: 'false', R_groupId: routeParams.id}, function (data) {
                scope.summary = data[0];
            });

            resourceFactory.centerAccountResource.get({centerId: routeParams.id}, function (data) {
                scope.accounts = data;
            });
            resourceFactory.groupNotesResource.getAllNotes({groupId: routeParams.id}, function (data) {
                scope.notes = data;
            });
            scope.deleteCenter = function () {
                $uibModal.open({
                    templateUrl: 'delete.html',
                    controller: CenterDeleteCtrl
                });
            };
            scope.unassignStaffCenter = function () {
                $uibModal.open({
                    templateUrl: 'unassignstaff.html',
                    controller: CenterUnassignCtrl
                });
            };
            var CenterDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.centerResource.delete({centerId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('activate');
                        location.path('/centers');
                    });

                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            var CenterUnassignCtrl = function ($scope, $uibModalInstance) {
                $scope.unassign = function () {
                    resourceFactory.groupResource.save({groupId: routeParams.id, command: 'unassignStaff'}, scope.staffData, function (data) {
                        $uibModalInstance.close('activate');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.saveNote = function () {
                resourceFactory.groupNotesResource.save({groupId: routeParams.id}, this.formData, function (data) {
                    var today = new Date();
                    temp = { id: data.resourceId, note: scope.formData.note, createdByUsername: "test", createdOn: today };
                    scope.notes.push(temp);
                    scope.formData.note = "";
                    scope.predicate = '-id';
                });
            }

            resourceFactory.DataTablesResource.getAllDataTables({apptable: 'm_center'}, function (data) {
                scope.centerdatatables = data;
            });
            scope.viewDataTable = function (registeredTableName,data){
                if (scope.datatabledetails.isMultirow) {
                    location.path("/viewdatatableentry/"+registeredTableName+"/"+scope.center.id+"/"+data.row[0]);
                }else{
                    location.path("/viewsingledatatableentry/"+registeredTableName+"/"+scope.center.id);
                }
            };

            scope.dataTableChange = function (datatable) {
                resourceFactory.DataTablesResource.getTableDetails({datatablename: datatable.registeredTableName, entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                    scope.datatabledetails = data;
                    scope.datatabledetails.isData = data.data.length > 0 ? true : false;
                    scope.datatabledetails.isMultirow = data.columnHeaders[0].columnName == "id" ? true : false;
                    scope.showDataTableAddButton = !scope.datatabledetails.isData || scope.datatabledetails.isMultirow;
                    scope.showDataTableEditButton = scope.datatabledetails.isData && !scope.datatabledetails.isMultirow;
                    scope.singleRow = [];
                    for (var i in data.columnHeaders) {
                        if (scope.datatabledetails.columnHeaders[i].columnCode) {
                            for (var j in scope.datatabledetails.columnHeaders[i].columnValues) {
                                for (var k in data.data) {
                                    if (data.data[k].row[i] == scope.datatabledetails.columnHeaders[i].columnValues[j].id) {
                                        data.data[k].row[i] = scope.datatabledetails.columnHeaders[i].columnValues[j].value;
                                    }
                                }
                            }
                        }
                    }
                    if (scope.datatabledetails.isData) {
                        for (var i in data.columnHeaders) {
                            if (!scope.datatabledetails.isMultirow) {
                                var row = {};
                                row.key = data.columnHeaders[i].columnName;
                                row.value = data.data[0].row[i];
                                scope.singleRow.push(row);
                            }
                        }
                    }
                });
            };
            //viewStaffAssignmentHistory [Report]
            scope.viewStaffAssignmentHistory = function () {
                //alert("center id : "+ scope.center.id);
                scope.hidePentahoReport = true;
                scope.formData.outputType = 'HTML';
                scope.baseURL = $rootScope.hostUrl + API_VERSION + "/runreports/" + encodeURIComponent("Staff Assignment History");
                scope.baseURL += "?output-type=" + encodeURIComponent(scope.formData.outputType) + "&tenantIdentifier=" + $rootScope.tenantIdentifier+"&locale="+scope.optlang.code;
                //alert("url: "+ scope.baseURL);
                var reportParams = "";
                var paramName = "R_centerId";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.center.id);
                if (reportParams > "") {
                    scope.baseURL += "&" + reportParams;
                }
                // allow untrusted urls for iframe http://docs.angularjs.org/error/$sce/insecurl
                scope.baseURL = $sce.trustAsResourceUrl(scope.baseURL);

            };

            scope.deleteAll = function (apptableName, entityId) {
                resourceFactory.DataTablesResource.delete({datatablename: apptableName, entityId: entityId, genericResultSet: 'true'}, {}, function (data) {
                    route.reload();
                });
            };
        }
    });

    mifosX.ng.application.controller('ViewCenterController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$route', '$http', '$uibModal', 'dateFilter', 'API_VERSION', '$sce', '$rootScope', mifosX.controllers.ViewCenterController]).run(function ($log) {
        $log.info("ViewCenterController initialized");
    });
}(mifosX.controllers || {}));
;/**
 * Created by nikpa on 26-06-2017.
 */

(function (module) {
    mifosX.controllers = _.extend(module, {
        AddFamilyMembersController: function (scope, resourceFactory, routeParams,dateFilter, location) {

            scope.formData={};
            scope.date = {};
            clientId=routeParams.clientId;
            familyMemberId=routeParams.familyMemberId;

            resourceFactory.familyMemberTemplate.get({clientId:clientId},function(data)
            {
                scope.relationshipIdOptions=data.relationshipIdOptions;
                scope.genderIdOptions=data.genderIdOptions;
                scope.maritalStatusIdOptions=data.maritalStatusIdOptions;
                scope.professionIdOptions=data.professionIdOptions;

            });





            scope.routeTo=function()
            {
                location.path('/viewclient/'+clientId);
            }

            scope.addClientMember=function()
            {


                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;

                if(scope.date.dateOfBirth){
                    this.formData.dateOfBirth = dateFilter(scope.date.dateOfBirth,  scope.df);
                }
                resourceFactory.familyMembers.post({clientId:clientId},scope.formData,function(data)
                {

                    location.path('/viewclient/'+clientId);


                })
            }

        }


    });
    mifosX.ng.application.controller('AddFamilyMembersController', ['$scope','ResourceFactory', '$routeParams','dateFilter', '$location', mifosX.controllers.AddFamilyMembersController]).run(function ($log) {
        $log.info("AddFamilyMemberController initialized");
    });

}
(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddNewClientChargeController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.clientId = routeParams.id;
            scope.offices = [];
            scope.date = {};

            resourceFactory.clientChargesResource.get({clientId: routeParams.id, resourceType: 'template'}, function (data) {
                scope.chargeOptions = data.chargeOptions;
            });

            scope.chargeSelected = function (id) {
                resourceFactory.chargeResource.get({chargeId: id, template: 'true'}, function (data) {
                    scope.chargeCalculationType = data.chargeCalculationType.id;
                    scope.chargeTimeType = data.chargeTimeType.id;
                    scope.chargeDetails = data;
                    scope.formData.amount = data.amount;
                });
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                if (scope.date.specificduedate) {
                    this.formData.dueDate = dateFilter(scope.date.specificduedate, scope.df);
                }
                resourceFactory.clientChargesResource.save({clientId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewclient/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('AddNewClientChargeController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.AddNewClientChargeController]).run(function ($log) {
        $log.info("AddNewClientChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
    	BulkImportClientsController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {
        	
        	scope.first = {};
        	scope.first.templateUrl =  API_VERSION + '/clients/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
        	+ '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
        	scope.formData = {};
        	var requestParams = {staffInSelectedOfficeOnly:true};
        	
        	resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
        	});
        	
        	scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        resourceFactory.centerTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams += '&officeId=' + scope.formData.officeId;
                    }else {
                        resourceFactory.centerTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }

            };

            scope.changeStaff = function() {
                if(scope.formData.staffId) {
                    if (scope.first.queryParams.indexOf("staffId")==-1) {
                        scope.first.queryParams = scope.first.queryParams + '&staffId=' + scope.formData.staffId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&staffId=\d+/i,"&staffId="+ scope.formData.staffId);
                    }
                } else {
                    if(scope.formData.officeId)
                        scope.first.queryParams = '&' + 'officeId=' + scope.formData.officeId;
                    else
                        scope.first.queryParams = '&';
                }
            };

            scope.changeLegalForm=function () {
            if (scope.formData.legalForm){
                var changedLegalForm;
                if(scope.formData.legalForm=="Person"){
                    changedLegalForm="CLIENTS_PERSON";
                }else if(scope.formData.legalForm=="Entity") {
                    changedLegalForm = "CLIENTS_ENTTTY";
                }
                    if (scope.first.queryParams.indexOf("legalFormType") == -1) {
                        scope.first.queryParams = scope.first.queryParams + '&' + 'legalFormType=' + changedLegalForm;
                    } else {
                        scope.first.queryParams = scope.first.queryParams.replace(/&legalFormType=\w+/i, "&legalFormType=" +changedLegalForm);
                    }
            }
        }
        	
        	 scope.onFileSelect = function (files) {
                 scope.formData.file = files[0];
                 scope.formData.entityType=null;
                 if (scope.formData.file.name.toLowerCase().indexOf("person")!=-1) {
                     scope.formData.entityType = "CLIENTS_PERSON";
                 }else if (scope.formData.file.name.toLowerCase().indexOf("entity")!=-1){
                     scope.formData.entityType="CLIENTS_ENTTTY";
                 }

             };
            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "client"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };
         
             scope.upload = function () {
                 Upload.upload({
                     url: $rootScope.hostUrl + API_VERSION + '/clients/uploadtemplate?legalFormType='+scope.formData.entityType+'',
                     data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                 }).then(function (data) {
                         // to fix IE not refreshing the model
                         if (!scope.$$phase) {
                             scope.$apply();
                         }
                     });
             };
        }
    });
    mifosX.ng.application.controller('BulkImportClientsController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportClientsController]).run(function ($log) {
        $log.info("BulkImportClientsController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ClientActionsController: function (scope, resourceFactory, location, routeParams, dateFilter) {

            scope.action = routeParams.action || "";
            scope.clientId = routeParams.id;
            scope.formData = {};
            scope.entityformData = {};
            scope.entityformData.datatables = {};
            scope.restrictDate = new Date();
            scope.taskPermissionName = 'ALL_FUNCTIONS';
            scope.submittedDatatables = [];
            var submitStatus = [];
            scope.showTransferDate = false;

            var retrieveTransferDate = function(){
                resourceFactory.clientResource.retrieveTransferDate({clientId: scope.clientId, anotherresource: 'transferproposaldate'}, function (data1) {
                    scope.transferDate = data1;
                    if(scope.transferDate){
                        scope.showTransferDate = true;
                    }
                })
            };

            scope.RequestEntities = function(entity,status){
                resourceFactory.entityDatatableChecksResource.getAll({limit:-1},function (response) {
                    scope.entityDatatableChecks = _.filter(response.pageItems , function(datatable){
                        var AllTables = (datatable.entity == entity && datatable.status.value == status);
                        return AllTables;
                    });
                    scope.entityDatatableChecks = _.pluck(scope.entityDatatableChecks,'datatableName');
                    scope.datatables = [];
                    var k=0;
                    _.each(scope.entityDatatableChecks,function(entitytable) {
                        resourceFactory.DataTablesResource.getTableDetails({datatablename:entitytable,entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                            data.registeredTableName = entitytable;
                            var colName = data.columnHeaders[0].columnName;
                            if (colName == 'id') {
                                data.columnHeaders.splice(0, 1);
                            }

                            colName = data.columnHeaders[0].columnName;
                            if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                                data.columnHeaders.splice(0, 1);
                                scope.isCenter = (colName == 'center_id') ? true : false;
                            }

                            data.noData = (data.data.length == 0);
                            if(data.noData){
                                scope.datatables.push(data);
                                scope.entityformData.datatables[k] = {data:{}};
                                submitStatus[k] = "save";
                                _.each(data.columnHeaders,function(Header){
                                    scope.entityformData.datatables[k].data[Header.columnName] = "";
                                });
                                k++;
                                scope.isEntityDatatables = true;
                            }
                        });
                    });

                });
            };

            // Transaction UI Related

            switch (scope.action) {
                case "activate":
                    resourceFactory.clientResource.get({clientId: routeParams.id}, function (data) {
                        scope.client = data;
                        if (data.timeline.submittedOnDate) {
                            scope.mindate = new Date(data.timeline.submittedOnDate);
                        }
                    });
                    scope.labelName = 'label.input.activationdate';
                    scope.breadcrumbName = 'label.anchor.activate';
                    scope.modelName = 'activationDate';
                    scope.showActivationDateField = true;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'ACTIVATE_CLIENT';
                    scope.RequestEntities('m_client','ACTIVATE');
                    break;
                case "assignstaff":
                    scope.breadcrumbName = 'label.anchor.assignstaff';
                    scope.labelName = 'label.input.staff';
                    scope.staffField = true;
                    resourceFactory.clientResource.get({clientId: routeParams.id, template: 'true',staffInSelectedOfficeOnly:true}, function (data) {
                        if (data.staffOptions) {
                            scope.staffOptions = data.staffOptions;
                            scope.formData.staffId = scope.staffOptions[0].id;
                        }
                    });
                    scope.taskPermissionName = 'ASSIGNSTAFF_CLIENT';
                    break;
                case "close":
                    scope.labelName = 'label.input.closuredate';
                    scope.labelNamereason = 'label.input.closurereason';
                    scope.breadcrumbName = 'label.anchor.close';
                    scope.modelName = 'closureDate';
                    scope.reasonmodelName = 'closureReasonId';
                    scope.reasonField = true;
                    scope.showDateField = true;
                    resourceFactory.clientResource.get({anotherresource: 'template', commandParam: 'close'}, function (data) {
                        scope.reasons = data.narrations;
                        scope.formData.reasonId = scope.narrations[0].id;
                    });
                    scope.taskPermissionName = 'CLOSE_CLIENT';
                    scope.RequestEntities('m_client','CLOSE');
                    break;
                case "delete":
                    scope.breadcrumbName = 'label.anchor.delete';
                    scope.labelName = 'label.areyousure';
                    scope.showDeleteClient = true;
                    scope.taskPermissionName = 'DELETE_CLIENT';
                    break;
                case "unassignstaff":
                    scope.labelName = 'label.heading.unassignstaff';
                    scope.breadcrumbName = 'label.anchor.activate';
                    scope.showDeleteClient = true;
                    scope.taskPermissionName = 'UNASSIGNSTAFF_CLIENT';
                    break;
                case "updatedefaultaccount":
                    scope.breadcrumbName = 'label.anchor.updatedefaultaccount';
                    scope.labelName = 'label.input.savingsaccount';
                    scope.savingsField = false;
                    resourceFactory.clientResource.get({clientId: routeParams.id, template: 'true'}, function (data) {
                        if (data.savingAccountOptions) {
                            scope.savingsField = true;
                            scope.savingAccountOptions = data.savingAccountOptions;
                            scope.formData.savingsAccountId = scope.savingAccountOptions[0].id;
                            if(data.savingsAccountId){
                                scope.formData.savingsAccountId = data.savingsAccountId;
                            }
                            
                        }
                    });
                    break;
                case "acceptclienttransfer":
                    scope.breadcrumbName = 'label.anchor.acceptclienttransfer';
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'ACCEPTTRANSFER_CLIENT';
                    retrieveTransferDate();
                    break;
                case "rejecttransfer":
                    scope.breadcrumbName = 'label.anchor.rejecttransfer';
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'REJECTTRANSFER_CLIENT';
                    retrieveTransferDate();
                    break;
                case "undotransfer":
                    scope.breadcrumbName = 'label.anchor.undotransfer';
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'WITHDRAWTRANSFER_CLIENT';
                    retrieveTransferDate();
                    break;
                case "reject":
                    scope.labelName = 'label.input.rejectiondate';
                    scope.labelNamereason = 'label.input.rejectionreason';
                    scope.breadcrumbName = 'label.anchor.reject';
                    scope.modelName = 'rejectionDate';
                    scope.reasonmodelName = 'rejectionReasonId';
                    scope.reasonField = true;
                    scope.showDateField = true;
                    resourceFactory.clientResource.get({anotherresource: 'template', commandParam: 'reject'}, function (data) {
                        scope.reasons = data.narrations;
                        if(data.narrations != "") {
                            scope.formData.rejectionReasonId = data.narrations[0].id;
                        }
                    });
                    scope.taskPermissionName = 'REJECT_CLIENT';
                    break;
                case "withdraw":
                    scope.labelName = 'label.input.withdrawaldate';
                    scope.labelNamereason = 'label.input.withdrawalreason';
                    scope.breadcrumbName = 'label.anchor.withdraw';
                    scope.modelName = 'withdrawalDate';
                    scope.reasonmodelName = 'withdrawalReasonId';
                    scope.reasonField = true;
                    scope.showDateField = true;
                    resourceFactory.clientResource.get({anotherresource: 'template', commandParam: 'withdraw'}, function (data) {
                        scope.reasons = data.narrations;
                        if(data.narrations != "") {
                            scope.formData.withdrawalReasonId = data.narrations[0].id;
                        }
                    });
                    scope.taskPermissionName = 'WITHDRAW_CLIENT';
                    break;
                case "reactivate":
                    resourceFactory.clientResource.get({clientId: routeParams.id}, function (data) {
                        scope.client = data;
                        if (data.timeline.submittedOnDate) {
                            scope.mindate = new Date(data.timeline.submittedOnDate);
                        }
                    });
                    scope.labelName = 'label.input.reactivationdate';
                    scope.breadcrumbName = 'label.anchor.reactivate';
                    scope.modelName = 'reactivationDate';
                    scope.showActivationDateField = true;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'REACTIVATE_CLIENT';
                    break;
                case "undoReject":
                    resourceFactory.clientResource.get({clientId: routeParams.id}, function (data) {
                        scope.client = data;
                        if (data.timeline.submittedOnDate) {
                            scope.mindate = new Date(data.timeline.submittedOnDate);
                        }
                    });
                    scope.labelName = 'label.input.reopeneddate';
                    scope.breadcrumbName = 'label.anchor.undoReject';
                    scope.modelName = 'reopenedDate';
                    scope.showActivationDateField = true;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UNDOREJECT_CLIENT';
                    break;
                case "undoWithdrawn":
                    resourceFactory.clientResource.get({clientId: routeParams.id}, function (data) {
                        scope.client = data;
                        if (data.timeline.submittedOnDate) {
                            scope.mindate = new Date(data.timeline.submittedOnDate);
                        }
                    });
                    scope.labelName = 'label.input.reopeneddate';
                    scope.breadcrumbName = 'label.anchor.undoWithdrawn';
                    scope.modelName = 'reopenedDate';
                    scope.showActivationDateField = true;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UNDOWITHDRAWAL_CLIENT';
                    break;

            }

            function asyncLoop(iterations, func, callback) {
                var index = 0;
                var done = false;
                var loop = {
                    next: function() {
                        if (done) {
                            return;
                        }

                        if (index < iterations) {
                            index++;
                            func(loop);

                        } else {
                            done = true;
                            callback();
                        }
                    },

                    iteration: function() {
                        return index - 1;
                    },

                    break: function() {
                        done = true;
                    }
                };
                loop.next();
                return loop;
            }

            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.submitDatatable = function(){
                if(scope.datatables) {
                    asyncLoop(Object.keys(scope.entityformData.datatables).length,function(loop){
                        var cnt = loop.iteration();
                        var formData = scope.entityformData.datatables[cnt];
                        formData.registeredTableName = scope.datatables[cnt].registeredTableName;

                        var params = {
                            datatablename: formData.registeredTableName,
                            entityId: routeParams.id,
                            genericResultSet: 'true'
                        };

                        angular.extend(formData.data,{dateFormat: scope.df, locale: scope.optlang.code});

                        _.each(formData.data, function (columnHeader) {
                            if (columnHeader.dateType) {
                                columnHeader = dateFilter(columnHeader.dateType.date, params.dateFormat);
                            }
                            else if (columnHeader.dateTimeType) {
                                columnHeader = dateFilter(columnHeader.columnName.date, scope.df) + " " + dateFilter(columnHeader.columnName.time, scope.tf);
                            }
                        });

                        var action = submitStatus[cnt];
                        resourceFactory.DataTablesResource[action](params, formData.data, function (data) {

                            submitStatus[cnt] = "update";
                            scope.submittedDatatables.push(scope.datatables[cnt].registeredTableName);
                            loop.next();

                        },function(){
                            rootScope.errorDetails[0].push({datatable:scope.datatables[cnt].registeredTableName});
                            loop.break();
                        });

                    },function(){
                        scope.submit();
                    });
                }
                else{
                    scope.submit();
                }
            };

            scope.cancel = function () {
                location.path('/viewclient/' + routeParams.id);
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                if (this.formData[scope.modelName]) {
                    this.formData[scope.modelName] = dateFilter(this.formData[scope.modelName], scope.df);
                }

                if (scope.action == "activate") {
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'activate'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "assignstaff") {
                    delete this.formData.locale;
                    delete this.formData.dateFormat;
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'assignStaff'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "unassignstaff") {
                    delete this.formData.locale;
                    delete this.formData.dateFormat;
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'unassignstaff'}, {staffId: routeParams.staffId}, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "close") {
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'close'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "reject") {

                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'reject'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "withdraw") {
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'withdraw'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "reactivate") {
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'reactivate'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "undoReject") {
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'undoRejection'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "undoWithdrawn") {
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'undoWithdrawal'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "acceptclienttransfer") {
                    delete this.formData.locale;
                    delete this.formData.dateFormat;
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'acceptTransfer'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "rejecttransfer") {
                    delete this.formData.locale;
                    delete this.formData.dateFormat;
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'rejectTransfer'}, this.formData, function (data) {
                        resourceFactory.clientResource.save({clientId: routeParams.id, command: 'withdrawTransfer'}, {} ,function (data) {
                            location.path('/viewclient/' + data.clientId);
                        });
                    });
                    
                }
                if (scope.action == "undotransfer") {
                    delete this.formData.locale;
                    delete this.formData.dateFormat;
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'withdrawTransfer'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
                if (scope.action == "updatedefaultaccount") {
                    delete this.formData.locale;
                    delete this.formData.dateFormat;
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'updateSavingsAccount'}, this.formData, function (data) {
                        location.path('/viewclient/' + data.clientId);
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('ClientActionsController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.ClientActionsController]).run(function ($log) {
        $log.info("ClientActionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ClientChargesOverviewController: function (scope, resourceFactory, location, routeParams) {
            scope.clientId = routeParams.id
            scope.charges = [];
            scope.chargesPerPage = 14;

            scope.routeToCharge = function (chargeId) {
                location.path('/viewclient/' + scope.clientId + '/charges/' + chargeId);
            };

            scope.getClientChargeResultsPage = function (pageNumber) {
                var items = resourceFactory.clientChargesResource.getCharges({
                    clientId: routeParams.id,
                    offset: ((pageNumber - 1) * scope.chargesPerPage),
                    limit: scope.chargesPerPage
                }, function (data) {
                    scope.totalCharges= data.totalFilteredRecords;
                    scope.charges = data.pageItems;
                });
            }

            scope.getClientChargeResultsPage(1);

        }
    });
    mifosX.ng.application.controller('ClientChargesOverviewController', ['$scope', 'ResourceFactory', '$location', '$routeParams', mifosX.controllers.ClientChargesOverviewController]).run(function ($log) {
        $log.info("ClientChargesOverviewController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ClientController: function (scope, resourceFactory, location) {
            scope.clients = [];
            scope.actualClients = [];
            scope.searchText = "";
            scope.searchResults = [];
            scope.showClosed = false;
            scope.routeTo = function (id) {
                location.path('/viewclient/' + id);
            };

            scope.clientsPerPage = 15;

            scope.getResultsPage = function (pageNumber) {
                if(scope.searchText){
                    var startPosition = (pageNumber - 1) * scope.clientsPerPage;
                    scope.clients = scope.actualClients.slice(startPosition, startPosition + scope.clientsPerPage);
                    return;
                }
                var items = resourceFactory.clientResource.getAllClients({
                    offset: ((pageNumber - 1) * scope.clientsPerPage),
                    limit: scope.clientsPerPage
                }, function (data) {
                    scope.clients = data.pageItems;
                });
            }
            scope.initPage = function () {

                var items = resourceFactory.clientResource.getAllClients({
                    offset: 0,
                    limit: scope.clientsPerPage
                }, function (data) {
                    scope.totalClients = data.totalFilteredRecords;
                    scope.clients = data.pageItems;
                });
            }
            scope.initPage();

            scope.search = function () {
                scope.actualClients = [];
                scope.searchResults = [];
                scope.filterText = "";
                var searchString = scope.searchText;
                searchString = searchString.replace(/(^"|"$)/g, '');
                var exactMatch=false;
                var n = searchString.localeCompare(scope.searchText);
                if(n!=0)
                {
                    exactMatch=true;
                }

                if(!scope.searchText){
                    scope.initPage();
                } else {
                    resourceFactory.globalSearch.search({query: searchString , resource: "clients,clientIdentifiers",exactMatch: exactMatch}, function (data) {
                        var arrayLength = data.length;
                        for (var i = 0; i < arrayLength; i++) {
                            var result = data[i];
                            var client = {};
                            client.status = {};
                            client.subStatus = {};
                            client.status.value = result.entityStatus.value;
                            client.status.code  = result.entityStatus.code;
                            if(result.entityType  == 'CLIENT'){

                                client.displayName = result.entityName;
                                client.accountNo = result.entityAccountNo;
                                client.id = result.entityId;
                                client.externalId = result.entityExternalId;
                                client.officeName = result.parentName;
                            }else if (result.entityType  == 'CLIENTIDENTIFIER'){
                                numberOfClients = numberOfClients + 1;
                                client.displayName = result.parentName;
                                client.id = result.parentId;
                                client.externalId = result.parentExternalId;

                            }
                            scope.actualClients.push(client);
                        }
                        var numberOfClients = scope.actualClients.length;
                        scope.totalClients = numberOfClients;
                        scope.clients = scope.actualClients.slice(0, scope.clientsPerPage);
                    });
                }
            }

        }
    });



    mifosX.ng.application.controller('ClientController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.ClientController]).run(function ($log) {
        $log.info("ClientController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ClientDocumentController: function (scope, location, http, routeParams, API_VERSION, Upload, $rootScope) {
            scope.clientId = routeParams.clientId;
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.submit = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/clients/' + scope.clientId + '/documents',
                    data: { name : scope.formData.name, description : scope.formData.description, file: scope.formData.file},
                }).then(function (data) {
                        // to fix IE not refreshing the model
                        if (!scope.$$phase) {
                            scope.$apply();
                        }
                        location.path('/viewclient/' + scope.clientId);
                    });
            };
        }
    });
    mifosX.ng.application.controller('ClientDocumentController', ['$scope', '$location', '$http', '$routeParams', 'API_VERSION', 'Upload', '$rootScope', mifosX.controllers.ClientDocumentController]).run(function ($log) {
        $log.info("ClientDocumentController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ClientIdentifierController: function (scope, routeParams, location, resourceFactory) {
            scope.clientId = routeParams.clientId;
            scope.formData = {};
            scope.documenttypes = [];
            scope.statusTypes = [{
                id: 1,
                label: 'Active'
            }, {
                id: 2,
                label: 'Inactive',
            }];
            resourceFactory.clientIdenfierTemplateResource.get({clientId: routeParams.clientId}, function (data) {
                scope.documenttypes = data.allowedDocumentTypes;
                scope.formData.documentTypeId = data.allowedDocumentTypes[0].id;
            });

            scope.submit = function () {
                resourceFactory.clientIdenfierResource.save({clientId: scope.clientId}, this.formData, function (data) {
                    location.path('/viewclient/' + data.clientId);
                });
            };

        }
    });
    mifosX.ng.application.controller('ClientIdentifierController', ['$scope', '$routeParams', '$location', 'ResourceFactory', mifosX.controllers.ClientIdentifierController]).run(function ($log) {
        $log.info("ClientIdentifierController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        ClientScreenReportController: function (scope, resourceFactory, location, $http, API_VERSION, routeParams, $rootScope, $sce) {
            scope.clientId = routeParams.clientId;
            resourceFactory.templateResource.get({entityId: 0, typeId: 0}, function (data) {
                scope.clientTemplateData = data;
            });
            scope.print = function (template) {
                var templateWindow = window.open('', 'Screen Report', 'height=400,width=600');
                templateWindow.document.write('<html><head>');
                templateWindow.document.write('</head><body>');
                templateWindow.document.write(template);
                templateWindow.document.write('</body></html>');
                templateWindow.print();
                templateWindow.close();
            };
            scope.getClientTemplate = function (templateId) {
                scope.selectedTemplate = templateId;
                $http({
                    method: 'POST',
                    url: $rootScope.hostUrl + API_VERSION + '/templates/' + templateId + '?clientId=' + routeParams.clientId,
                    data: {}
                }).then(function (data) {
                    scope.template = $sce.trustAsHtml(data.data);
                });
            };
        }
    });
    mifosX.ng.application.controller('ClientScreenReportController', ['$scope', 'ResourceFactory', '$location', '$http', 'API_VERSION', '$routeParams', '$rootScope', '$sce', mifosX.controllers.ClientScreenReportController]).run(function ($log) {
        $log.info("ClientScreenReportController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateClientController: function (scope, resourceFactory, location, http, dateFilter, API_VERSION, Upload, $rootScope, routeParams, WizardHandler) {

            scope.offices = [];
            scope.staffs = [];
            scope.savingproducts = [];
            scope.first = {};
            scope.first.date = new Date();
            scope.first.submitondate = new Date ();
            scope.formData = {};
            scope.formDat = {};
            scope.clientNonPersonDetails = {};
            scope.restrictDate = new Date();
            scope.showSavingOptions = false;
            scope.savings = {};
            scope.savings.opensavingsproduct = false;
            scope.forceOffice = null;
            scope.showNonPersonOptions = false;
            scope.clientPersonId = 1;
            //address
            scope.addressTypes=[];
            scope.countryOptions=[];
            scope.stateOptions=[];
            scope.addressTypeId={};
            entityname="ADDRESS";
            scope.addressArray=[];
            scope.formData.address=[];
            //familymembers
            scope.formData.familyMembers=[];
            scope.familyArray=[];
            scope.datatables = [];
            scope.noOfTabs = 1;
            scope.step = '-';
            scope.formData.datatables = [];
            scope.formDat.datatables = [];
            scope.tf = "HH:mm";
            scope.clientId = routeParams.clientId;

            var requestParams = {staffInSelectedOfficeOnly:true};
            if (routeParams.groupId) {
                requestParams.groupId = routeParams.groupId;
            }
            if (routeParams.officeId) {
                requestParams.officeId = routeParams.officeId;
            }
            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
                scope.formData.officeId = scope.offices[0].id;
                scope.savingproducts = data.savingProductOptions;
                scope.genderOptions = data.genderOptions;
                scope.clienttypeOptions = data.clientTypeOptions;
                scope.clientClassificationOptions = data.clientClassificationOptions;
                scope.clientNonPersonConstitutionOptions = data.clientNonPersonConstitutionOptions;
                scope.clientNonPersonMainBusinessLineOptions = data.clientNonPersonMainBusinessLineOptions;
                scope.clientLegalFormOptions = data.clientLegalFormOptions;
                scope.datatables = data.datatables;
                if (!_.isUndefined(scope.datatables) && scope.datatables.length > 0) {
                    scope.noOfTabs = scope.datatables.length + 1;
                    angular.forEach(scope.datatables, function (datatable, index) {
                        scope.updateColumnHeaders(datatable.columnHeaderData);
                        angular.forEach(datatable.columnHeaderData, function (colHeader, i) {
                            if (_.isEmpty(scope.formDat.datatables[index])) {
                                scope.formDat.datatables[index] = {data: {}};
                            }

                            if (_.isEmpty(scope.formData.datatables[index])) {
                                scope.formData.datatables[index] = {
                                    registeredTableName: datatable.registeredTableName,
                                    data: {locale: scope.optlang.code}
                                };
                            }

                            if (datatable.columnHeaderData[i].columnDisplayType == 'DATETIME') {
                                scope.formDat.datatables[index].data[datatable.columnHeaderData[i].columnName] = {};
                            }
                        });
                    });
                }

                if (data.savingProductOptions.length > 0) {
                    scope.showSavingOptions = true;
                }
                if(routeParams.officeId) {
                    scope.formData.officeId = routeParams.officeId;
                    for(var i in data.officeOptions) {
                        if(data.officeOptions[i].id == routeParams.officeId) {
                            scope.forceOffice = data.officeOptions[i];
                            break;
                        }
                    }
                }
                if(routeParams.groupId) {
                    if(typeof data.staffId !== "undefined") {
                        scope.formData.staffId = data.staffId;
                    }
                }


                scope.enableAddress=data.isAddressEnabled;

                	   if (scope.enableAddress === true) {
                           scope.addressTypes = data.address[0].addressTypeIdOptions;
                           scope.countryOptions = data.address[0].countryIdOptions;
                           scope.stateOptions = data.address[0].stateProvinceIdOptions;
                       
                    resourceFactory.addressFieldConfiguration.get({entity:entityname},function(data){

                        for(var i=0;i<data.length;i++)
                        {
                            data[i].field='scope.'+data[i].field;
                            if(data[i].is_enabled == undefined) {
                                //For dev.mifos.io or demo.mifos.io
                                eval(data[i].field+"="+data[i].isEnabled);
                            } else {
                                //For fineract server
                                eval(data[i].field+"="+data[i].is_enabled);
                            }
                        }

                    })


                }


                scope.relationshipIdOptions=data.familyMemberOptions.relationshipIdOptions;
                scope.genderIdOptions=data.familyMemberOptions.genderIdOptions;
                scope.maritalStatusIdOptions=data.familyMemberOptions.maritalStatusIdOptions;
                scope.professionIdOptions=data.familyMemberOptions.professionIdOptions;



            });

            scope.updateColumnHeaders = function(columnHeaderData) {
                var colName = columnHeaderData[0].columnName;
                if (colName == 'id') {
                    columnHeaderData.splice(0, 1);
                }

                colName = columnHeaderData[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    columnHeaderData.splice(0, 1);
                }
            };

            // address

            scope.addAddress=function()
            {
                scope.addressArray.push({});
            }

            scope.removeAddress=function(index)
            {
                scope.addressArray.splice(index,1);
            }




            // end of address


            // family members

            scope.addFamilyMember=function()
            {
                scope.familyArray.push({});
            }

            scope.removeFamilyMember=function(index)
            {
                scope.familyArray.splice(index,1);
            }


            // end of family members




            scope.displayPersonOrNonPersonOptions = function (legalFormId) {
                if(legalFormId == scope.clientPersonId || legalFormId == null) {
                    scope.showNonPersonOptions = false;
                }else {
                    scope.showNonPersonOptions = true;
                }
            };

            scope.changeOffice = function (officeId) {
                resourceFactory.clientTemplateResource.get({staffInSelectedOfficeOnly:true, officeId: officeId
                }, function (data) {
                    scope.staffs = data.staffOptions;
                    scope.savingproducts = data.savingProductOptions;
                });
            };

            scope.setChoice = function () {
                if (this.formData.active) {
                    scope.choice = 1;
                }
                else if (!this.formData.active) {
                    scope.choice = 0;
                }
            };
            if(routeParams.groupId) {
                scope.cancel = '#/viewgroup/' + routeParams.groupId
                scope.groupid = routeParams.groupId;
            }else {
                scope.cancel = "#/clients"
            }

            //return input type
            //return input type
            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.dateTimeFormat = function (colHeaders) {
                angular.forEach(colHeaders, function (colHeader, i) {
                    if (colHeaders[i].columnDisplayType == 'DATETIME') {
                        return scope.df + " " + scope.tf;
                    }
                });
                return scope.df;
            };

            scope.submit = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);

                this.formData.locale = scope.optlang.code;
                this.formData.active = this.formData.active || false;
                this.formData.dateFormat = scope.df;
                this.formData.activationDate = reqDate;

                if (!_.isUndefined(scope.datatables) && scope.datatables.length > 0) {
                    angular.forEach(scope.datatables, function (datatable, index) {
                        scope.columnHeaders = datatable.columnHeaderData;
                        angular.forEach(scope.columnHeaders, function (colHeader, i) {
                            scope.dateFormat = scope.df + " " + scope.tf
                            if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName])) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName],
                                        scope.dateFormat);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            } else if (scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date) && !_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time)) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date, scope.df)
                                        + " " + dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time, scope.tf);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            }
                        });
                    });
                } else {
                    delete scope.formData.datatables;
                }

                if (routeParams.groupId) {
                    this.formData.groupId = routeParams.groupId;
                }

                if (routeParams.officeId) {
                    this.formData.officeId = routeParams.officeId;
                }

                if (scope.first.submitondate) {
                    reqDate = dateFilter(scope.first.submitondate, scope.df);
                    this.formData.submittedOnDate = reqDate;
                }

                if (scope.first.dateOfBirth) {
                    this.formData.dateOfBirth = dateFilter(scope.first.dateOfBirth, scope.df);
                }

                if (this.formData.legalFormId == scope.clientPersonId || this.formData.legalFormId == null) {
                    delete this.formData.fullname;
                } else {
                    delete this.formData.firstname;
                    delete this.formData.middlename;
                    delete this.formData.lastname;
                }

                if(scope.first.incorpValidityTillDate) {
                    this.formData.clientNonPersonDetails.locale = scope.optlang.code;
                    this.formData.clientNonPersonDetails.dateFormat = scope.df;
                    this.formData.clientNonPersonDetails.incorpValidityTillDate = dateFilter(scope.first.incorpValidityTillDate, scope.df);
                }

                if (!scope.savings.opensavingsproduct) {
                    this.formData.savingsProductId = null;
                }

                if(scope.enableAddress===true)
                {
                    scope.formData.address = [];
                    for(var i=0;i<scope.addressArray.length;i++)
                    {
                        var temp=new Object();
                        if(scope.addressArray[i].addressTypeId)
                        {
                            temp.addressTypeId=scope.addressArray[i].addressTypeId;
                        }
                        if (scope.addressArray[i].street) {
                            temp.street = scope.addressArray[i].street;
                        }
                        if(scope.addressArray[i].addressLine1)
                        {
                            temp.addressLine1=scope.addressArray[i].addressLine1;
                        }
                        if(scope.addressArray[i].addressLine2)
                        {
                            temp.addressLine2=scope.addressArray[i].addressLine2;
                        }
                        if(scope.addressArray[i].addressLine3)
                        {
                            temp.addressLine3=scope.addressArray[i].addressLine3;
                        }
                        if(scope.addressArray[i].townVillage)
                        {
                            temp.townVlage=scope.addressArray[i].townVillage;
                        }
                        if(scope.addressArray[i].city)
                        {
                            temp.city=scope.addressArray[i].city;
                        }
                        if(scope.addressArray[i].countyDistrict)
                        {
                            temp.countyDistrict=scope.addressArray[i].countyDistrict;
                        }
                        if(scope.addressArray[i].countryId)
                        {
                            temp.countryId=scope.addressArray[i].countryId;
                        }
                        if(scope.addressArray[i].stateProvinceId)
                        {
                            temp.stateProvinceId=scope.addressArray[i].stateProvinceId;
                        }
                        if(scope.addressArray[i].postalCode)
                        {
                            temp.postalCode=scope.addressArray[i].postalCode;
                        }
                        if(scope.addressArray[i].latitude)
                        {
                            temp.latitude=scope.addressArray[i].latitude;
                        }
                        if(scope.addressArray[i].longitude)
                        {
                            temp.longitude=scope.addressArray[i].longitude;
                        }
                        if(scope.addressArray[i].isActive)
                        {
                            temp.isActive=scope.addressArray[i].isActive;

                        }
                        scope.formData.address.push(temp);
                    }
                }


                // family array

                for(var i=0;i<scope.familyArray.length;i++)
                {
                    var temp=new Object();
                    if(scope.familyArray[i].relationshipId)
                    {
                        temp.relationshipId=scope.familyArray[i].relationshipId;
                    }
                    if(scope.familyArray[i].firstName)
                    {
                        temp.firstName=scope.familyArray[i].firstName;
                    }
                    if(scope.familyArray[i].middleName)
                    {
                        temp.middleName=scope.familyArray[i].middleName;
                    }
                    if(scope.familyArray[i].lastName)
                    {
                        temp.lastName=scope.familyArray[i].lastName;
                    }
                    if(scope.familyArray[i].qualification)
                    {
                        temp.qualification=scope.familyArray[i].qualification;
                    }
                    if(scope.familyArray[i].mobileNumber)
                    {
                        temp.mobileNumber=scope.familyArray[i].mobileNumber;
                    }
                    if(scope.familyArray[i].age)
                    {
                        temp.age=scope.familyArray[i].age;
                    }
                    if(scope.familyArray[i].isDependent)
                    {
                        temp.isDependent=scope.familyArray[i].isDependent;
                    }
                    if(scope.familyArray[i].genderId)
                    {
                        temp.genderId=scope.familyArray[i].genderId;
                    }
                    if(scope.familyArray[i].professionId)
                    {
                        temp.professionId=scope.familyArray[i].professionId;
                    }
                    if(scope.familyArray[i].maritalStatusId)
                    {
                        temp.maritalStatusId=scope.familyArray[i].maritalStatusId;
                    }
                    if(scope.familyArray[i].dateOfBirth)
                    {

                        temp.dateOfBirth=dateFilter(scope.familyArray[i].dateOfBirth, scope.df);
                    }

                    temp.locale = scope.optlang.code;
                    temp.dateFormat = scope.df;
                    scope.formData.familyMembers.push(temp);
                }

                //



                resourceFactory.clientResource.save(this.formData, function (data) {
                    location.path('/viewclient/' + data.clientId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateClientController', ['$scope', 'ResourceFactory', '$location', '$http', 'dateFilter', 'API_VERSION', 'Upload', '$rootScope', '$routeParams', 'WizardHandler', mifosX.controllers.CreateClientController]).run(function ($log) {
        $log.info("CreateClientController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditClientController: function (scope, routeParams, resourceFactory, location, http, dateFilter, API_VERSION, Upload, $rootScope) {
            scope.offices = [];
            scope.date = {};
            scope.restrictDate = new Date();
            scope.savingproducts = [];
            scope.clientId = routeParams.id;
            scope.showSavingOptions = 'false';
            scope.opensavingsproduct = 'false';
            scope.showNonPersonOptions = false;
            scope.clientPersonId = 1;
            resourceFactory.clientResource.get({clientId: routeParams.id, template:'true', staffInSelectedOfficeOnly:true}, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
                scope.savingproducts = data.savingProductOptions;
                scope.genderOptions = data.genderOptions;
                scope.clienttypeOptions = data.clientTypeOptions;
                scope.clientClassificationOptions = data.clientClassificationOptions;
                scope.clientNonPersonConstitutionOptions = data.clientNonPersonConstitutionOptions;
                scope.clientNonPersonMainBusinessLineOptions = data.clientNonPersonMainBusinessLineOptions;
                scope.clientLegalFormOptions = data.clientLegalFormOptions;
                scope.officeId = data.officeId;
                scope.formData = {
                    firstname: data.firstname,
                    lastname: data.lastname,
                    middlename: data.middlename,
                    active: data.active,
                    accountNo: data.accountNo,
                    staffId: data.staffId,
                    externalId: data.externalId,
                    isStaff:data.isStaff,
                    mobileNo: data.mobileNo,
                    savingsProductId: data.savingsProductId,
                    genderId: data.gender.id,
                    fullname: data.fullname,
                    clientNonPersonDetails : {
                        incorpNumber: data.clientNonPersonDetails.incorpNumber,
                        remarks: data.clientNonPersonDetails.remarks
                    }
                };

                if(data.gender){
                    scope.formData.genderId = data.gender.id;
                }

                if(data.clientType){
                    scope.formData.clientTypeId = data.clientType.id;
                }

                if(data.clientClassification){
                    scope.formData.clientClassificationId = data.clientClassification.id;
                }

                if(data.legalForm){
                    scope.displayPersonOrNonPersonOptions(data.legalForm.id);
                    scope.formData.legalFormId = data.legalForm.id;
                }

                if(data.clientNonPersonDetails.constitution){
                    scope.formData.clientNonPersonDetails.constitutionId = data.clientNonPersonDetails.constitution.id;
                }

                if(data.clientNonPersonDetails.mainBusinessLine){
                    scope.formData.clientNonPersonDetails.mainBusinessLineId = data.clientNonPersonDetails.mainBusinessLine.id;
                }

                if (data.savingsProductId != null) {
                    scope.opensavingsproduct = 'true';
                    scope.showSavingOptions = 'true';
                } else if (data.savingProductOptions.length > 0) {
                    scope.showSavingOptions = 'true';
                }

                if (data.dateOfBirth) {
                    var dobDate = dateFilter(data.dateOfBirth, scope.df);
                    scope.date.dateOfBirth = new Date(dobDate);
                }

                if (data.clientNonPersonDetails.incorpValidityTillDate) {
                    var incorpValidityTillDate = dateFilter(data.clientNonPersonDetails.incorpValidityTillDate, scope.df);
                    scope.date.incorpValidityTillDate = new Date(incorpValidityTillDate);
                }

                var actDate = dateFilter(data.activationDate, scope.df);
                scope.date.activationDate = new Date(actDate);
                if (data.active) {
                    scope.choice = 1;
                    scope.showSavingOptions = 'false';
                    scope.opensavingsproduct = 'false';
                }

                if (data.timeline.submittedOnDate) {
                    var submittedOnDate = dateFilter(data.timeline.submittedOnDate, scope.df);
                    scope.date.submittedOnDate = new Date(submittedOnDate);
                }

            });

            scope.displayPersonOrNonPersonOptions = function (legalFormId) {
                if(legalFormId == scope.clientPersonId || legalFormId == null) {
                    scope.showNonPersonOptions = false;
                }else {
                    scope.showNonPersonOptions = true;
                }
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                if (scope.choice === 1) {
                    if (scope.date.activationDate) {
                        this.formData.activationDate = dateFilter(scope.date.activationDate, scope.df);
                    }
                }
                if(scope.date.dateOfBirth){
                    this.formData.dateOfBirth = dateFilter(scope.date.dateOfBirth,  scope.df);
                }

                if(scope.date.submittedOnDate){
                    this.formData.submittedOnDate = dateFilter(scope.date.submittedOnDate,  scope.df);
                }

                if(scope.date.incorpValidityTillDate){
                    this.formData.clientNonPersonDetails.locale = scope.optlang.code;
                    this.formData.clientNonPersonDetails.dateFormat = scope.df;
                    this.formData.clientNonPersonDetails.incorpValidityTillDate = dateFilter(scope.date.incorpValidityTillDate,  scope.df);
                }

                if(this.formData.legalFormId == scope.clientPersonId || this.formData.legalFormId == null) {
                    delete this.formData.fullname;
                }else {
                    delete this.formData.firstname;
                    delete this.formData.middlename;
                    delete this.formData.lastname;
                }

                resourceFactory.clientResource.update({'clientId': routeParams.id}, this.formData, function (data) {
                    location.path('/viewclient/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditClientController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$http', 'dateFilter', 'API_VERSION', 'Upload', '$rootScope', mifosX.controllers.EditClientController]).run(function ($log) {
        $log.info("EditClientController initialized");
    });
}(mifosX.controllers || {}));
;/**
 * Created by nikpa on 22-06-2017.
 */
(function (module) {
    mifosX.controllers = _.extend(module, {
        EditFamilyMemberController: function (scope, resourceFactory, routeParams,dateFilter, location) {

            scope.formData={};
            scope.date = {};
           clientId=routeParams.clientId;
            familyMemberId=routeParams.familyMemberId;

            resourceFactory.familyMemberTemplate.get({clientId:clientId},function(data)
            {
                scope.relationshipIdOptions=data.relationshipIdOptions;
                scope.genderIdOptions=data.genderIdOptions;
                scope.maritalStatusIdOptions=data.maritalStatusIdOptions;
                scope.professionIdOptions=data.professionIdOptions;

            });


            resourceFactory.familyMember.get({clientId:clientId,clientFamilyMemberId:familyMemberId},function(data)
            {
                    scope.formData=data;

                if (data.dateOfBirth) {
                    var dobDate = dateFilter(data.dateOfBirth, scope.df);
                    scope.date.dateOfBirth = new Date(dobDate);
                }



            });





            scope.routeTo=function()
            {
                location.path('/viewclient/'+clientId);
            }

            scope.updateClientMember=function()
            {
               delete scope.formData.maritalStatus;
               delete scope.formData.gender;
               delete scope.formData.profession;
               delete scope.formData.relationship;

                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;

                if(scope.date.dateOfBirth){
                    this.formData.dateOfBirth = dateFilter(scope.date.dateOfBirth,  scope.df);
                }
                resourceFactory.familyMember.put({clientId:clientId,clientFamilyMemberId:familyMemberId},scope.formData,function(data)
                {

                    location.path('/viewclient/'+clientId);


                })
            }

        }


    });
    mifosX.ng.application.controller('EditFamilyMemberController', ['$scope','ResourceFactory', '$routeParams','dateFilter', '$location', mifosX.controllers.EditFamilyMemberController]).run(function ($log) {
        $log.info("EditFamilyMemberController initialized");
    });

}
(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        PayClientChargeController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.cancelRoute = routeParams.id;
            scope.formData = {};
            scope.paymentDate = new Date();

            resourceFactory.clientChargesResource.get({clientId: routeParams.id, resourceType: routeParams.chargeid}, function (data) {
                scope.formData.amount = data.amountOutstanding;
            });

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                if (scope.paymentDate) {
                    this.formData.transactionDate = dateFilter(scope.paymentDate, scope.df);
                }
                resourceFactory.clientChargesResource.save({clientId: routeParams.id , resourceType: routeParams.chargeid ,command: 'paycharge'}, this.formData, function (data) {
                    location.path('/viewclient/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('PayClientChargeController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.PayClientChargeController]).run(function ($log) {
        $log.info("PayClientChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        SurveyController: function (scope, resourceFactory, location, routeParams, localStorageService, $uibModal) {
            
            scope.clientId = routeParams.clientId;
            scope.formData = {};
            scope.surveyData = {};
            scope.survey = {};

            resourceFactory.surveyResource.getAll({isActive: true}, function (data) {
                scope.surveys = data;
            });

            scope.surveySelected = function (surveyData) {
                if(surveyData) {
                    scope.surveyData = surveyData;

                    function groupBy( array , f )
                    {
                      var groups = {};
                      array.forEach( function( o )
                      {
                        var group = JSON.stringify( f(o) );
                        groups[group] = groups[group] || [];
                        groups[group].push( o );  
                      });
                      return Object.keys(groups).map( function( group )
                      {
                        return groups[group]; 
                      })
                    }
                    
                    var result = groupBy(scope.surveyData.questionDatas, function(item)
                    {
                      return [item.componentKey];
                    });

                    scope.componentGroups = result;
                }
                
            }

            scope.submit = function () {
                this.formData.userId = localStorageService.getFromLocalStorage('userData').userId;
                this.formData.clientId = routeParams.clientId;
                this.formData.surveyId = scope.surveyData.id;
                this.formData.scorecardValues = [];
                this.formData.surveyName = '';
                this.formData.username = '';
                this.formData.id = 0;

                for(i=0; i < scope.surveyData.questionDatas.length; i++){
                    if(scope.surveyData.questionDatas[i].answer) {
                        var tmp = {};
                        tmp.questionId = scope.surveyData.questionDatas[i].id;
                        tmp.responseId = scope.surveyData.questionDatas[i].answer.id
                        tmp.value = scope.surveyData.questionDatas[i].answer.value
                        tmp.createdOn = new Date().getTime();
                        this.formData.scorecardValues.push(tmp);
                    }
                }
                resourceFactory.surveyScorecardResource.post({surveyId: scope.surveyData.id}, this.formData, function (data) {
                    location.path('/clients/survey/' + scope.clientId);
                });
            };
            scope.isAnyResponse = function(){
                for(i=0; i < scope.surveyData.questionDatas.length; i++){
                    if(scope.surveyData.questionDatas[i].answer) {
                        return false;
                    }
                }
                return true;
            };

            scope.cancel = function () {
                if (scope.clientId) {
                    location.path('/clients/survey/' + scope.clientId);
                } else {
                    location.path('/clients');
                }
            }

        }
    });
    mifosX.ng.application.controller('SurveyController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'localStorageService','$uibModal', mifosX.controllers.SurveyController]).run(function ($log) {
        $log.info("SurveyController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        TransactionClientController: function (scope, resourceFactory, routeParams, location, dateFilter) {

            scope.formData = {};
            scope.formData.transferDate = new Date();
            scope.clientId = routeParams.id;
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
                scope.formData.destinationOfficeId = scope.offices[0].id;
            });

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.transferDate = dateFilter(this.formData.transferDate, scope.df);
                resourceFactory.clientResource.save({clientId: routeParams.id, command: 'proposeTransfer'}, this.formData, function (data) {
                    location.path('/viewclient/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('TransactionClientController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.TransactionClientController]).run(function ($log) {
        $log.info("TransactionClientController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        UploadClientIdentifierDocumentController: function (scope, location, routeParams, API_VERSION, Upload, $rootScope) {
            scope.clientId = routeParams.clientId;
            scope.resourceId = routeParams.resourceId;
            scope.uploadPic = function (file) {
                Upload.upload({
                    url:  $rootScope.hostUrl + API_VERSION + '/client_identifiers/' + scope.resourceId + '/documents',
                    data: scope.formData,
                    file: file
                }).then(function (data) {
                        // to fix IE not refreshing the model
                        if (!scope.$$phase) {
                          scope.$apply();
                        }
                        location.path('/viewclient/' + scope.clientId);
                    });
            };
        }
    });
    mifosX.ng.application.controller('UploadClientIdentifierDocumentController', ['$scope', '$location', '$routeParams', 'API_VERSION', 'Upload', '$rootScope', mifosX.controllers.UploadClientIdentifierDocumentController]).run(function ($log) {
        $log.info("UploadClientIdentifierDocumentController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewClientChargeController: function (scope, resourceFactory, location, routeParams, route) {
            scope.clientId = routeParams.clientId;

            resourceFactory.clientChargesResource.get({clientId: routeParams.clientId, resourceType:routeParams.chargeId , associations:'all'}, function (data) {
                scope.charge = data;
            });

            scope.undoTransaction = function(transactionId){
                resourceFactory.clientTransactionResource.undoTransaction({clientId: routeParams.clientId, transactionId:transactionId}, function (data) {
                    route.reload();
                });
            }

            scope.waiveCharge = function(chargeId){
                resourceFactory.clientChargesResource.waive({clientId: routeParams.clientId, resourceType:routeParams.chargeId}, function (data) {
                    route.reload();
                });
            }

            scope.deleteCharge = function(){
                resourceFactory.clientChargesResource.delete({clientId: routeParams.clientId, resourceType:routeParams.chargeId , associations:'all'}, function (data) {
                    location.path('/viewclient/'+ scope.clientId);
                });
            }
        }
    });
    mifosX.ng.application.controller('ViewClientChargeController', ['$scope', 'ResourceFactory', '$location', '$routeParams', '$route', mifosX.controllers.ViewClientChargeController]).run(function ($log) {
        $log.info("ViewClientChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewClientController: function (scope, routeParams, route, location, resourceFactory, http, $uibModal, API_VERSION, $rootScope, Upload) {
            scope.client = [];
            scope.identitydocuments = [];
            scope.buttons = [];
            scope.clientdocuments = [];
            scope.staffData = {};
            scope.formData = {};
            scope.openLoan = true;
            scope.openSaving = true;
            scope.openShares = true ;
            scope.openFixed = true;
            scope.openRecurring = true;
            scope.showFixed = false;
            scope.showRecurring = false;
            scope.updateDefaultSavings = false;
            scope.charges = [];


            // address
            scope.addresses=[];
            scope.view={};
            scope.view.data=[];
           // scope.families=[];
            var entityname="ADDRESS";
            formdata={};


            resourceFactory.clientTemplateResource.get(function(data)
            {
                scope.enableAddress=data.isAddressEnabled;
                if(scope.enableAddress===true)
                {

                    resourceFactory.addressFieldConfiguration.get({entity:entityname},function(data){


                        for(var i=0;i<data.length;i++)
                        {
                            data[i].field='scope.view.'+data[i].field;
                            eval(data[i].field+"="+data[i].isEnabled);

                        }


                    })


                    resourceFactory.clientAddress.get({clientId:routeParams.id},function(data)
                    {

                        scope.addresses=data;


                    })


                }


               /* resourceFactory.getAllFamilyMembers.get({clientId:routeParams.id},function(data)
                {

                    scope.families=data;


                })*/

            });




            scope.routeTo=function()
            {
                location.path('/address/'+ routeParams.id);
            }

            scope.ChangeAddressStatus=function(id,status,addressId)
            {

                formdata.isActive=!status
                formdata.addressId=addressId
                resourceFactory.clientAddress.put({clientId:id},formdata,function(data)
                {
                    route.reload();
                })
            }

            scope.routeToEdit=function(clientId,addressId)
            {
                location.path('/editAddress/'+clientId+'/'+addressId+'/'+ routeParams.id);


            }


            // end of address


            // family members

            scope.families=[];




            resourceFactory.familyMembers.get({clientId:routeParams.id},function(data)
            {

                scope.families=data;


            });

            scope.deleteFamilyMember=function(clientFamilyMemberId)
            {

                resourceFactory.familyMember.delete({clientId:routeParams.id,clientFamilyMemberId:clientFamilyMemberId},function(data)
                {

                    route.reload();
                })

            }

            scope.editFamilyMember=function(clientFamilyMemberId)
            {

                location.path('/editfamilymember/'+routeParams.id+'/'+clientFamilyMemberId);


            }

            scope.routeToaddFamilyMember=function()
            {
                location.path('/addfamilymembers/'+ routeParams.id);
            }


            // end of family members



            scope.routeToLoan = function (id) {
                location.path('/viewloanaccount/' + id);
            };
            scope.routeToChargeOverview = function () {
                location.path(scope.pathToChargeOverview());
            };

            scope.pathToChargeOverview =function (){
                return ('/viewclient/'+ scope.client.id + '/chargeoverview');
            }

            scope.routeToCharge = function (chargeId) {
                location.path('/viewclient/'+ scope.client.id + '/charges/' + chargeId);
            };

            scope.routeToSaving = function (id, depositTypeCode) {
                if (depositTypeCode === "depositAccountType.savingsDeposit") {
                    location.path('/viewsavingaccount/' + id);
                } else if (depositTypeCode === "depositAccountType.fixedDeposit") {
                    location.path('/viewfixeddepositaccount/' + id);
                } else if (depositTypeCode === "depositAccountType.recurringDeposit") {
                    location.path('/viewrecurringdepositaccount/' + id);
                }
            };

            scope.routeToShareAccount = function(id) {
                location.path('/viewshareaccount/'+id)
            } ;

            scope.haveFile = [];
            resourceFactory.clientResource.get({clientId: routeParams.id}, function (data) {
                scope.client = data;
                scope.isClosedClient = scope.client.status.value == 'Closed';
                scope.staffData.staffId = data.staffId;
                if (data.imagePresent) {
                    http({
                        method: 'GET',
                        url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/images?maxHeight=150'
                    }).then(function (imageData) {
                        scope.image = imageData.data;
                    });
                }
                http({
                    method: 'GET',
                    url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/documents'
                }).then(function (docsData) {
                    var docId = -1;
                    for (var i = 0; i < docsData.data.length; ++i) {
                        if (docsData.data[i].name == 'clientSignature') {
                            docId = docsData.data[i].id;
                            scope.signature_url = $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/documents/' + docId + '/attachment?tenantIdentifier=' + $rootScope.tenantIdentifier;
                        }
                    }
                });

                scope.navigateToSavingsOrDepositAccount = function (eventName, accountId, savingProductType) {
                    switch(eventName) {

                        case "deposit":
                            if(savingProductType==100)
                                location.path('/savingaccount/' + accountId + '/deposit');
                            if(savingProductType==300)
                                location.path('/recurringdepositaccount/' + accountId + '/deposit');
                            break;
                        case "withdraw":
                            if(savingProductType==100)
                                location.path('/savingaccount/' + accountId + '/withdrawal');
                            if(savingProductType==300)
                                location.path('/recurringdepositaccount/' + accountId + '/withdrawal');
                            break;
                    }
                }


                var clientStatus = new mifosX.models.ClientStatus();

                if (clientStatus.statusKnown(data.status.value)) {
                    scope.buttons = clientStatus.getStatus(data.status.value);
                    scope.savingsActionbuttons = [
                        {
                            name: "button.deposit",
                            type: "100",
                            icon: "fa fa-arrow-up",
                            taskPermissionName: "DEPOSIT_SAVINGSACCOUNT"
                        },
                        {
                            name: "button.withdraw",
                            type: "100",
                            icon: "fa fa-arrow-down",
                            taskPermissionName: "WITHDRAW_SAVINGSACCOUNT"
                        },
                        {
                            name: "button.deposit",
                            type: "300",
                            icon: "fa fa-arrow-up",
                            taskPermissionName: "DEPOSIT_RECURRINGDEPOSITACCOUNT"
                        },
                        {
                            name: "button.withdraw",
                            type: "300",
                            icon: "fa fa-arrow-down",
                            taskPermissionName: "WITHDRAW_RECURRINGDEPOSITACCOUNT"
                        }
                    ];
                }

                if (data.status.value == "Pending" || data.status.value == "Active") {
                    if (data.staffId) {

                    }
                    else {
                        scope.buttons.push(clientStatus.getStatus("Assign Staff"));
                    }
                }

                scope.buttonsArray = {
                    options: [
                        {
                            name: "button.clientscreenreports"
                        }
                    ]
                };
                scope.buttonsArray.singlebuttons = scope.buttons;
                resourceFactory.runReportsResource.get({reportSource: 'ClientSummary', genericResultSet: 'false', R_clientId: routeParams.id}, function (data) {
                    scope.client.ClientSummary = data[0];
                });
            });
            scope.deleteClient = function () {
                $uibModal.open({
                    templateUrl: 'deleteClient.html',
                    controller: ClientDeleteCtrl
                });
            };
            scope.uploadPic = function () {
                $uibModal.open({
                    templateUrl: 'uploadpic.html',
                    controller: UploadPicCtrl
                });
            };
            var UploadPicCtrl = function ($scope, $uibModalInstance) {
                $scope.upload = function (file) {
                    if (file) {
                        Upload.upload({
                            url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/images',
                            data: {},
                            file: file
                        }).then(function (imageData) {
                            // to fix IE not refreshing the model
                            $timeout(function () {
                                scope.$apply();
                            });
                            $uibModalInstance.close('upload');
                            route.reload();
                        });
                    }
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.capturePic = function () {
                $uibModal.open({
                    templateUrl: 'capturepic.html',
                    controller: CapturePicCtrl,
                    windowClass: 'modalwidth700'
                });
            };
            var CapturePicCtrl = function ($scope, $uibModalInstance) {

                $scope.picture = null;
                $scope.error = null;
                $scope.videoChannel = {
                    video: null,
                    videoWidth: 320,
                    videoHeight: 240
                };
                $scope.stream = null;

                $scope.onVideoSuccess = function () {
                    $scope.error = null;
                };

                $scope.onStream = function(stream) {
                    $scope.stream = stream
                }

                $scope.onVideoError = function (err) {
                    if(typeof err != "undefined")
                        $scope.error = err.message + '(' + err.name + ')';
                };

                $scope.takeScreenshot = function () {
                    if($scope.videoChannel.video) {
                        var picCanvas = document.createElement('canvas');
                        var width = $scope.videoChannel.video.width;
                        var height = $scope.videoChannel.video.height;

                        picCanvas.width = width;
                        picCanvas.height = height;
                        var ctx = picCanvas.getContext("2d");
                        ctx.drawImage($scope.videoChannel.video, 0, 0, width, height);
                        var imageData = ctx.getImageData(0, 0, width, height);
                        document.querySelector('#clientSnapshot').getContext("2d").putImageData(imageData, 0, 0);
                        $scope.picture = picCanvas.toDataURL();
                    }
                };
                $scope.uploadscreenshot = function () {
                    if($scope.picture != null) {
                        http({
                            method: 'POST',
                            url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/images',
                            data: $scope.picture
                        }).then(function (imageData) {
                            if (!scope.$$phase) {
                                scope.$apply();
                            }
                            $scope.stream.getVideoTracks()[0].stop();
                            $uibModalInstance.close('upload');
                            route.reload();
                        });
                    }
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                    $scope.stream.getVideoTracks()[0].stop();
                };
                $scope.reset = function () {
                    $scope.picture = null;
                }
            };
            scope.deletePic = function () {
                $uibModal.open({
                    templateUrl: 'deletePic.html',
                    controller: DeletePicCtrl
                });
            };
            var DeletePicCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    http({
                        method: 'DELETE',
                        url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/images',
                    }).then(function (imageData) {
                        if (!scope.$$phase) {
                            scope.$apply();
                        }
                        $uibModalInstance.close('delete');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.uploadSig = function () {
                $uibModal.open({
                    templateUrl: 'uploadsig.html',
                    controller: UploadSigCtrl
                });
            };
            var UploadSigCtrl = function ($scope, $uibModalInstance) {
                $scope.upload = function (file) {
                    if (file) {
                        Upload.upload({
                            url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/documents',
                            data: {
                                name: 'clientSignature',
                                description: 'client signature'
                            },
                            file: file
                        }).then(function (imageData) {
                            // to fix IE not refreshing the model
                            if (!scope.$$phase) {
                                scope.$apply();
                            }
                            $uibModalInstance.close('upload');
                            route.reload();
                        });
                    }
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            
            scope.deleteSig = function () {
                $uibModal.open({
                    templateUrl: 'deletesig.html',
                    controller: DeleteSigCtrl
                });
            };
            var DeleteSigCtrl = function ($scope, $uibModalInstance) {
                http({
                        method: 'GET',
                        url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/documents'
                    }).then(function (docsData) {
                        $scope.docId = -1;
                        for (var i = 0; i < docsData.data.length; ++i) {
                            if (docsData.data[i].name == 'clientSignature') {
                                $scope.docId = docsData.data[i].id;
                                scope.signature_url = $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/documents/' + docId + '/attachment?tenantIdentifier=' + $rootScope.tenantIdentifier;
                            }
                        }
                    });
                $scope.delete = function (file) {
                    http({
                        method: 'DELETE',
                        url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/documents/' + $scope.docId
                    }).then(function () {
                        if (!scope.$$phase) {
                                scope.$apply();
                            }
                            $uibModalInstance.close('upload');
                            route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.unassignStaffCenter = function () {
                $uibModal.open({
                    templateUrl: 'clientunassignstaff.html',
                    controller: ClientUnassignCtrl
                });
            };
            var ClientDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.clientResource.delete({clientId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/clients');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            var ClientUnassignCtrl = function ($scope, $uibModalInstance) {
                $scope.unassign = function () {
                    resourceFactory.clientResource.save({clientId: routeParams.id, command: 'unassignstaff'}, scope.staffData, function (data) {
                        $uibModalInstance.close('unassign');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            resourceFactory.clientAccountResource.get({clientId: routeParams.id}, function (data) {
                scope.clientAccounts = data;
                if(data.loanAccounts){
                    for(var i in data.loanAccounts){
                        if(data.loanAccounts[i].status.value == "Active" && data.loanAccounts[i].inArrears){
                            scope.clientAccounts.loanAccounts[i].status.value = "Active in Bad Standing"
                        }
                    }
                }
                if (data.savingsAccounts) {
                    for (var i in data.savingsAccounts) {
                        if (data.savingsAccounts[i].status.value == "Active") {
                            scope.updateDefaultSavings = true;
                            break;
                        }
                    }
                    scope.totalAllSavingsAccountsBalanceBasedOnCurrency=[];
                    for (var i in data.savingsAccounts) {
                        if (!scope.isSavingClosed(data.savingsAccounts[i])) {
                            var isNewEntryMap = true;
                            for(var j in scope.totalAllSavingsAccountsBalanceBasedOnCurrency){
                                if(scope.totalAllSavingsAccountsBalanceBasedOnCurrency[j].code === data.savingsAccounts[i].currency.code){
                                    isNewEntryMap = false;
                                    var totalSavings = scope.totalAllSavingsAccountsBalanceBasedOnCurrency[j].totalSavings + data.savingsAccounts[i].accountBalance;
                                    scope.totalAllSavingsAccountsBalanceBasedOnCurrency[j].totalSavings = totalSavings;
                                }
                            }
                            if(isNewEntryMap){
                                var map = {};
                                map.code = data.savingsAccounts[i].currency.code;
                                map.totalSavings = data.savingsAccounts[i].accountBalance;
                                scope.totalAllSavingsAccountsBalanceBasedOnCurrency.push(map);
                            }
                        }
                    }
                }
                for(var i in data.savingsAccounts){
                    if(data.savingsAccounts[i].depositType.value == 'Recurring Deposit'){
                    scope.showRecurring = true;
                    }
                }
                for(var i in data.savingsAccounts){
                    if(data.savingsAccounts[i].depositType.value == 'Fixed Deposit'){
                    scope.showFixed = true;
                    }
                }


            });

            scope.isSavings = function (savingaccount) {
                if(savingaccount.depositType.value == 'Savings'){
                    return true;
                }
                else{
                    return false;
                }
            };
            scope.isFixed = function (savingaccount) {
                if(savingaccount.depositType.value == 'Fixed Deposit'){
                    return true;
                }
                else{
                    return false;
                }
            };
            scope.isRecurring = function(savingaccount) {
                if(savingaccount.depositType.value == 'Recurring Deposit'){
                    return true;
                }
                else{
                    return false;
                }
            };

            resourceFactory.clientChargesResource.getCharges({clientId: routeParams.id, pendingPayment:true}, function (data) {
                scope.charges = data.pageItems;
            });

            scope.isClosed = function (loanaccount) {
                if (loanaccount.status.code === "loanStatusType.closed.written.off" ||
                    loanaccount.status.code === "loanStatusType.closed.obligations.met" ||
                    loanaccount.status.code === "loanStatusType.closed.reschedule.outstanding.amount" ||
                    loanaccount.status.code === "loanStatusType.withdrawn.by.client" ||
                    loanaccount.status.code === "loanStatusType.rejected") {
                    return true;
                } else {
                    return false;
                }
            };
            scope.isSavingClosed = function (savingaccount) {
                if (savingaccount.status.code === "savingsAccountStatusType.withdrawn.by.applicant" ||
                    savingaccount.status.code === "savingsAccountStatusType.closed" ||
                    savingaccount.status.code === "savingsAccountStatusType.pre.mature.closure" ||
                    savingaccount.status.code === "savingsAccountStatusType.rejected") {
                    return true;
                } else {
                    return false;
                }
            };

            scope.isShareClosed = function (shareAccount) {
                if ( shareAccount.status.code === "shareAccountStatusType.closed" ||
                    shareAccount.status.code === "shareAccountStatusType.rejected") {
                    return true;
                } else {
                    return false;
                }
            };
            scope.setLoan = function () {
                if (scope.openLoan) {
                    scope.openLoan = false
                } else {
                    scope.openLoan = true;
                }
            };
            scope.setSaving = function () {
                if (scope.openSaving) {
                    scope.openSaving = false;
                } else {
                    scope.openSaving = true;
                }
            };

            scope.setShares = function () {
                if (scope.openShares) {
                    scope.openShares = false;
                } else {
                    scope.openShares = true;
                }
            };

            scope.setFixed = function () {
                if(scope.openFixed) {
                    scope.openFixed = false;
                } else {
                    scope.openFixed = true;
                }
            };

            scope.setRecurring = function () {
                if(scope.openRecurring) {
                    scope.openRecurring = false;
                }else {
                    scope.openRecurring = true;
                }
            };


            resourceFactory.clientNotesResource.getAllNotes({clientId: routeParams.id}, function (data) {
                scope.clientNotes = data;
            });
            scope.getClientIdentityDocuments = function () {
                resourceFactory.clientResource.getAllClientDocuments({clientId: routeParams.id, anotherresource: 'identifiers'}, function (data) {
                    scope.identitydocuments = data;
                    for (var i = 0; i < scope.identitydocuments.length; i++) {
                        resourceFactory.clientIdentifierResource.get({clientIdentityId: scope.identitydocuments[i].id}, function (data) {
                            for (var j = 0; j < scope.identitydocuments.length; j++) {
                                if (data.length > 0 && scope.identitydocuments[j].id == data[0].parentEntityId) {
                                    for (var l in data) {

                                        var loandocs = {};
                                        loandocs = API_VERSION + '/' + data[l].parentEntityType + '/' + data[l].parentEntityId + '/documents/' + data[l].id + '/attachment?tenantIdentifier=' + $rootScope.tenantIdentifier;
                                        data[l].docUrl = loandocs;
                                    }
                                    scope.identitydocuments[j].documents = data;
                                }
                            }
                        });
                    }
                });
            };

            resourceFactory.DataTablesResource.getAllDataTables({apptable: 'm_client'}, function (data) {
                scope.clientdatatables = data;
            });

            scope.dataTableChange = function (clientdatatable) {
                resourceFactory.DataTablesResource.getTableDetails({datatablename: clientdatatable.registeredTableName,
                    entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                    scope.datatabledetails = data;
                    scope.datatabledetails.isData = data.data.length > 0 ? true : false;
                    scope.datatabledetails.isMultirow = data.columnHeaders[0].columnName == "id" ? true : false;
                    scope.showDataTableAddButton = !scope.datatabledetails.isData || scope.datatabledetails.isMultirow;
                    scope.showDataTableEditButton = scope.datatabledetails.isData && !scope.datatabledetails.isMultirow;
                    scope.singleRow = [];
                    for (var i in data.columnHeaders) {
                        if (scope.datatabledetails.columnHeaders[i].columnCode) {
                            for (var j in scope.datatabledetails.columnHeaders[i].columnValues) {
                                for (var k in data.data) {
                                    if (data.data[k].row[i] == scope.datatabledetails.columnHeaders[i].columnValues[j].id) {
                                        data.data[k].row[i] = scope.datatabledetails.columnHeaders[i].columnValues[j].value;
                                    }
                                }
                            }
                        }
                    }
                    if (scope.datatabledetails.isData) {
                        for (var i in data.columnHeaders) {
                            if (!scope.datatabledetails.isMultirow) {
                                var row = {};
                                row.key = data.columnHeaders[i].columnName;
                                row.value = data.data[0].row[i];
                                scope.singleRow.push(row);
                            }
                        }
                    }
                });
            };

            scope.viewstandinginstruction = function () {
                location.path('/liststandinginstructions/' + scope.client.officeId + '/' + scope.client.id);
            };
            scope.createstandinginstruction = function () {
                location.path('/createstandinginstruction/' + scope.client.officeId + '/' + scope.client.id + '/fromsavings');
            };
            scope.deleteAll = function (apptableName, entityId) {
                resourceFactory.DataTablesResource.delete({datatablename: apptableName, entityId: entityId, genericResultSet: 'true'}, {}, function (data) {
                    route.reload();
                });
            };

            scope.getClientDocuments = function () {
                resourceFactory.clientDocumentsResource.getAllClientDocuments({clientId: routeParams.id}, function (data) {
                    for (var l in data) {

                        var loandocs = {};
                        loandocs = API_VERSION + '/' + data[l].parentEntityType + '/' + data[l].parentEntityId + '/documents/' + data[l].id + '/attachment?tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = loandocs;
                        if (data[l].fileName)
                            if (data[l].fileName.toLowerCase().indexOf('.jpg') != -1 || data[l].fileName.toLowerCase().indexOf('.jpeg') != -1 || data[l].fileName.toLowerCase().indexOf('.png') != -1)
                                data[l].fileIsImage = true;
                        if (data[l].type)
                             if (data[l].type.toLowerCase().indexOf('image') != -1)
                                data[l].fileIsImage = true;
                    }
                    scope.clientdocuments = data;
                });
            };

            scope.deleteDocument = function (documentId, index) {
                resourceFactory.clientDocumentsResource.delete({clientId: routeParams.id, documentId: documentId}, '', function (data) {
                    scope.clientdocuments.splice(index, 1);
                });
            };

            scope.previewDocument = function (url, fileName) {
                scope.preview =  true;
                scope.fileUrl = scope.hostUrl + url;
                if(fileName.toLowerCase().indexOf('.png') != -1)
                    scope.fileType = 'image/png';
                else if(fileName.toLowerCase().indexOf('.jpg') != -1)
                    scope.fileType = 'image/jpg';
                else if(fileName.toLowerCase().indexOf('.jpeg') != -1)
                    scope.fileType = 'image/jpeg';
            };

            scope.viewDataTable = function (registeredTableName, data) {
                if (scope.datatabledetails.isMultirow) {
                    location.path("/viewdatatableentry/" + registeredTableName + "/" + scope.client.id + "/" + data.row[0]);
                } else {
                    location.path("/viewsingledatatableentry/" + registeredTableName + "/" + scope.client.id);
                }
            };

            scope.downloadDocument = function (documentId) {
                resourceFactory.clientDocumentsResource.get({clientId: routeParams.id, documentId: documentId}, '', function (data) {
                    scope.clientdocuments.splice(index, 1);
                });
            };

            scope.isLoanNotClosed = function (loanaccount) {
                if (loanaccount.status.code === "loanStatusType.closed.written.off" ||
                    loanaccount.status.code === "loanStatusType.closed.obligations.met" ||
                    loanaccount.status.code === "loanStatusType.closed.reschedule.outstanding.amount" ||
                    loanaccount.status.code === "loanStatusType.withdrawn.by.client" ||
                    loanaccount.status.code === "loanStatusType.rejected") {
                    return false;
                } else {
                    return true;
                }
            };

            scope.isSavingNotClosed = function (savingaccount) {
                if (savingaccount.status.code === "savingsAccountStatusType.withdrawn.by.applicant" ||
                    savingaccount.status.code === "savingsAccountStatusType.closed" ||
                    savingaccount.status.code === "savingsAccountStatusType.pre.mature.closure" ||
                    savingaccount.status.code === "savingsAccountStatusType.rejected") {
                    return false;
                } else {
                    return true;
                }
            };

            scope.isShareNotClosed = function (shareAccount) {
                if ( shareAccount.status.code === "shareAccountStatusType.closed" ||
                    shareAccount.status.code === "shareAccountStatusType.rejected") {
                    return false;
                } else {
                    return true;
                }
            };
            scope.saveNote = function () {
                resourceFactory.clientResource.save({clientId: routeParams.id, anotherresource: 'notes'}, this.formData, function (data) {
                    var today = new Date();
                    temp = { id: data.resourceId, note: scope.formData.note, createdByUsername: "test", createdOn: today };
                    scope.clientNotes.unshift(temp);
                    scope.formData.note = "";
                    scope.predicate = '-id';
                });
            }

            scope.showEditNote = function(clientId, clientNote, index) {
                $uibModal.open({
                    templateUrl: 'editNote.html',
                    controller: EditNoteCtrl,
                    resolve: {
                        items: function(){
                            return {
                                clientId: clientId,
                                clientNote: clientNote,
                                index: index
                            }
                        }
                    },
                    size: "lg"
                });
            }

            scope.showDeleteNote = function(clientId, clientNote, index) {
                $uibModal.open({
                    templateUrl: 'deleteNote.html',
                    controller: DeleteNoteCtrl,
                    resolve: {
                        items: function(){
                            return {
                                clientId: clientId,
                                clientNote: clientNote,
                                index: index
                            }
                        }
                    },
                    size: "lg"
                });
            }

            var EditNoteCtrl = function ($scope, $uibModalInstance, items) {
                scope.editData = {};
                editData = {};
                $scope.editNote = function (clientId, entityId, index, editData) {
                    resourceFactory.clientNotesResource.put({clientId: items.clientId, noteId: items.clientNote}, {note: this.editData.editNote}, function(data) {
                        scope.clientNotes[items.index].note = $scope.editData.editNote;
                        scope.editData.editNote = "";
                        $uibModalInstance.close();
                    });
                };
                $scope.cancel = function (index) {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            var DeleteNoteCtrl = function ($scope, $uibModalInstance, items) {
                $scope.deleteNote = function (clientId, entityId, index) {
                    resourceFactory.clientNotesResource.delete({clientId: items.clientId, noteId: items.clientNote}, '', function(data) {
                        $uibModalInstance.close();
                        scope.clientNotes.splice(items.index, 1);
                    });
                };
                $scope.cancel = function (index) {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.deleteClientIdentifierDocument = function (clientId, entityId, index) {
                resourceFactory.clientIdenfierResource.delete({clientId: clientId, id: entityId}, '', function (data) {
                    scope.identitydocuments.splice(index, 1);
                });
            };

            scope.downloadClientIdentifierDocument = function (identifierId, documentId) {
                console.log(identifierId, documentId);
            };

            scope.waiveCharge = function(chargeId){
                resourceFactory.clientChargesResource.waive({clientId: routeParams.id, resourceType:chargeId}, function (data) {
                    route.reload();
                });
            }

            scope.showSignature = function()
            {
                $uibModal.open({
                    templateUrl: 'clientSignature.html',
                    controller: ViewLargerClientSignature,
                    size: "lg"
                });
            };

            scope.showWithoutSignature = function()
            {
                $uibModal.open({
                    templateUrl: 'clientWithoutSignature.html',
                    controller: ViewClientWithoutSignature,
                    size: "lg"
                });
            };

            scope.showPicture = function () {
                $uibModal.open({
                    templateUrl: 'photo-dialog.html',
                    controller: ViewLargerPicCtrl,
                    size: "lg"
                });
            };

            var ViewClientWithoutSignature = function($scope,$uibModalInstance){
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                $scope.uploadSig = function () {
                    $uibModalInstance.dismiss('cancel');
                    scope.uploadSig();
                };
            };

            var ViewLargerClientSignature = function($scope,$uibModalInstance){
                var loadSignature = function(){
                    http({
                        method: 'GET',
                        url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/documents'
                    }).then(function (docsData) {
                        $scope.docId = -1;
                        for (var i = 0; i < docsData.data.length; ++i) {
                            if (docsData.data[i].name == 'clientSignature') {
                                $scope.docId = docsData.data[i].id;
                                scope.signature_url = $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/documents/' + $scope.docId + '/attachment?tenantIdentifier=' + $rootScope.tenantIdentifier;
                            }
                        }
                        if (scope.signature_url != null) {
                            http({
                                method: 'GET',
                                url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/documents/' + $scope.docId + '/attachment?tenantIdentifier=' + $rootScope.tenantIdentifier
                            }).then(function (docsData) {
                                $scope.largeImage = scope.signature_url;
                            });
                        }
                    });
                };
                loadSignature();
                $scope.deleteSig = function () {
                    $uibModalInstance.dismiss('cancel');
                    scope.deleteSig();
                };
                $scope.uploadSig = function () {
                    $uibModalInstance.dismiss('cancel');
                    scope.uploadSig();
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            var ViewLargerPicCtrl = function ($scope, $uibModalInstance) {
                var loadImage = function () {
                    if (scope.client.imagePresent) {
                        http({
                            method: 'GET',
                            url: $rootScope.hostUrl + API_VERSION + '/clients/' + routeParams.id + '/images?maxWidth=860'
                        }).then(function (imageData) {
                            $scope.largeImage = imageData.data;
                        });
                    }
                };
                loadImage();
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });

    mifosX.ng.application.controller('ViewClientController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', '$http', '$uibModal', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.ViewClientController]).run(function ($log) {
        $log.info("ViewClientController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewClientSurveyController: function (scope, resourceFactory, location, routeParams) {
            
            scope.clientId = routeParams.clientId;
            scope.surveys = [];
            resourceFactory.clientSurveyScorecardResource.get({clientId: scope.clientId}, function (data) {
                scope.constructSurvey(data);
            });

            scope.constructSurvey = function(data){
            	for(var i in data){
            		for(var j in data[i].scorecardValues){
            			var survey = {'surveyName':data[i].surveyName,'createdby':data[i].username,'date':data[i].scorecardValues[j].createdOn,'score':data[i].scorecardValues[j].value};
            			scope.surveys.push(survey);
            		}
            	}
            };

            scope.routeTo = function(){
            	location.path('/survey/'+scope.clientId);
            };

        }
    });
    mifosX.ng.application.controller('ViewClientSurveyController', ['$scope', 'ResourceFactory', '$location', '$routeParams', mifosX.controllers.ViewClientSurveyController]).run(function ($log) {
        $log.info("ViewClientSurveyController initialized");
    });
}(mifosX.controllers || {}));
;'use strict';
/*global _ */
/*global mifosX */

(function (module) {
    mifosX.controllers = _.extend(module, {
        CollectionSheetController: function (scope, resourceFactory, location, routeParams, dateFilter, localStorageService, route, $timeout) {
            scope.offices = [];
            scope.centers = [];
            scope.groups = [];
            scope.clientsAttendance = [];
            scope.calendarId = '';
            scope.formData = {};
            scope.centerId = '';
            scope.groupId = '';
            scope.date = {};
            scope.newGroupTotal = {};
            scope.savingsGroupsTotal = [];
			scope.date.transactionDate = new Date();
            var centerOrGroupResource = '';
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });

            scope.productiveCollectionSheet = function () {
                if (scope.officeId && scope.loanOfficerId ) {
                    for (var i = 0; i < scope.offices.length; i++) {
                        if (scope.offices[i].id === scope.officeId) {
                            scope.officeName = scope.offices[i].name;
                        }
                    }
                    scope.meetingDate = dateFilter(scope.date.transactionDate, scope.df);
                    location.path('/productivesheet/' + scope.officeId + '/' + scope.officeName + '/' + scope.meetingDate + '/' + scope.loanOfficerId);
                } else {
                    scope.collectionsheetform.office.$valid = true;
                    scope.collectionsheetform.office.$error.req = true;
                    scope.collectionsheetform.loanOfficer.$valid = true;
                    scope.collectionsheetform.loanOfficer.$error.req = true;
                }
            };

            scope.officeSelected = function (officeId) {
                scope.officeId = officeId;
                if (officeId) {
                    resourceFactory.employeeResource.getAllEmployees({officeId: officeId}, function (data) {
                        scope.loanOfficers = data;
                    });

                    resourceFactory.centerResource.getAllCenters({officeId: scope.officeId, orderBy: 'name', sortOrder: 'ASC', limit: -1}, function (data) {
                        scope.centers = data;
                    });

                    resourceFactory.groupResource.getAllGroups({officeId: scope.officeId, orderBy: 'name', sortOrder: 'ASC', limit: -1}, function (data) {
                        scope.groups = data;
                    });
                }
            };

            if (localStorageService.getFromLocalStorage('Success') === 'true') {
                scope.savesuccess = true;
                localStorageService.removeFromLocalStorage('Success');
                scope.val = true;
                $timeout(function () {
                    scope.val = false;
                }, 3000);
            }

            scope.loanOfficerSelected = function (loanOfficerId) {
                if (loanOfficerId) {
                    scope.loanOfficerId = loanOfficerId;
                    resourceFactory.centerResource.getAllCenters({officeId: scope.officeId, staffId: loanOfficerId, orderBy: 'name', sortOrder: 'ASC', limit: -1}, function (data) {
                        scope.centers = data;
                    });

                    resourceFactory.groupResource.getAllGroups({officeId: scope.officeId, staffId: loanOfficerId, orderBy: 'name', sortOrder: 'ASC', limit: -1}, function (data) {
                        scope.groups = data;
                    });
                } else {
                    scope.centers = '';
                    scope.groups = '';
                }
            };

            scope.centerSelected = function (centerId) {
                if (centerId) {
                    scope.collectionsheetdata = "";
                    resourceFactory.centerResource.get({'centerId': centerId, associations: 'groupMembers,collectionMeetingCalendar' }, function (data) {
                        scope.centerdetails = data;
                        if (data.groupMembers.length > 0) {
                            scope.groups = data.groupMembers;
                        }

                        if (data.collectionMeetingCalendar && data.collectionMeetingCalendar.recentEligibleMeetingDate) {
                            if (!scope.date.transactionDate) {
                                scope.date.transactionDate = new Date(dateFilter(data.collectionMeetingCalendar.recentEligibleMeetingDate, scope.df));
                            }
                        }
                        if (data.collectionMeetingCalendar) {
                            scope.calendarId = data.collectionMeetingCalendar.id;
                        }
                        centerOrGroupResource = "centerResource";
                    });
                }
            };

            scope.groupSelected = function (groupId) {
                if (groupId) {
                    scope.collectionsheetdata = "";
                    resourceFactory.groupResource.get({'groupId': groupId, associations: 'collectionMeetingCalendar'}, function (data) {
                        scope.groupdetails = data.pageItems;
                        if (data.collectionMeetingCalendar) {
                            scope.calendarId = data.collectionMeetingCalendar.id;
                        }
                        if (data.collectionMeetingCalendar && data.collectionMeetingCalendar.recentEligibleMeetingDate) {
                            if (!scope.date.transactionDate) {
                                scope.date.transactionDate = new Date(dateFilter(data.collectionMeetingCalendar.recentEligibleMeetingDate, scope.df));

                            }
                        }
                        centerOrGroupResource = "groupResource";
                    });
                } else if (scope.centerId) {
                    centerOrGroupResource = "centerResource";
                }
            };

            scope.showPaymentDetailsFn = function () {
                var paymentDetail = {};
                scope.showPaymentDetails = true;
                paymentDetail.paymentTypeId = "";
                paymentDetail.accountNumber = "";
                paymentDetail.checkNumber = "";
                paymentDetail.routingCode = "";
                paymentDetail.receiptNumber = "";
                paymentDetail.bankNumber = "";
            };

            scope.previewCollectionSheet = function () {
                scope.formData = {};
                scope.formData.dateFormat = scope.df;
                scope.formData.locale = scope.optlang.code;
                scope.formData.calendarId = scope.calendarId;
                scope.showPaymentDetails = false;
                if (scope.date.transactionDate) {
                    scope.formData.transactionDate = dateFilter(scope.date.transactionDate, scope.df);
                }
                if (centerOrGroupResource === "centerResource" && scope.calendarId !== "") {
                    resourceFactory.centerResource.save({'centerId': scope.centerId, command: 'generateCollectionSheet'}, scope.formData, function (data) {
                        if (data.groups.length > 0) {
                            scope.collectionsheetdata = data;
                            scope.clientsAttendanceArray(data.groups);
                            //scope.total(data);
                            scope.savingsgroups = data.groups;
                            scope.sumTotalDueCollection();
                        } else {
                            scope.noData = true;
                            $timeout(function () {
                                scope.noData = false;
                            }, 3000);
                        }

                    });
                } else if (centerOrGroupResource === "groupResource" && scope.calendarId !== "") {
                    resourceFactory.groupResource.save({'groupId': scope.groupId, command: 'generateCollectionSheet'}, scope.formData, function (data) {
                        if (data.groups.length > 0) {
                            scope.collectionsheetdata = data;
                            scope.clientsAttendanceArray(data.groups);
                            //scope.total(data);
                            scope.savingsgroups = data.groups;
                            scope.sumTotalDueCollection();
                        } else {
                            scope.noData = true;
                            $timeout(function () {
                                scope.noData = false;
                            }, 3000);
                        }
                    });
                } else {
                    resourceFactory.groupResource.save({'groupId': 0, command: 'generateCollectionSheet'}, scope.formData, function (data) {
                        scope.collectionsheetdata = data;
                    });
                }
            };

            /**
             * Sum of loans and savings due for collection group by currency
             */
            scope.sumTotalDueCollection = function () {
                scope.totalDueCollection = [];
                scope.sumGroupDueCollection();
                scope.sumSavingsDueCollection();
                scope.sumLoansTotal();
                scope.sumLoansDueByCurrency();
                scope.sumSavingsDueByCurrency();
            };

            scope.sumLoansDueByCurrency = function () {
                _.each(scope.loansTotal, function (loan) {
                    var existing = _.findWhere(scope.totalDueCollection, {currencyCode: loan.currencyCode});
                    var dueAmount = loan.dueAmount;
                    if (isNaN(dueAmount)) {
                        dueAmount = parseInt(0);
                    }
                    if (existing === 'undefined' || !(_.isObject(existing))) {
                        var gp = {
                            currencyCode: loan.currencyCode,
                            currencySymbol: loan.currencySymbol,
                            dueAmount: dueAmount
                        };
                        scope.totalDueCollection.push(gp);
                    } else {
                        existing.dueAmount = Math.ceil((Number(existing.dueAmount) + Number(dueAmount)) * 100) / 100;
                    }
                });
            };

            scope.sumSavingsDueByCurrency = function () {
                _.each(scope.savingsTotal, function (saving) {
                    var existing = _.findWhere(scope.totalDueCollection, {currencyCode: saving.currencyCode});
                    var dueAmount = saving.dueAmount;
                    if (isNaN(dueAmount)) {
                        dueAmount = parseInt(0);
                    }
                    if (existing === 'undefined' || !(_.isObject(existing))) {
                        var gp = {
                            currencyCode: saving.currencyCode,
                            currencySymbol: saving.currencySymbol,
                            dueAmount: dueAmount
                        };
                        scope.totalDueCollection.push(gp);
                    } else {
                        existing.dueAmount = Math.ceil((Number(existing.dueAmount) + Number(dueAmount)) * 100) / 100;
                    }
                });
            };

            /**
             * Sum of loan dues and Savings dues group by group and product
             */
            scope.sumGroupDueCollection = function () {
                scope.savingsGroupsTotal = [];
                scope.loanGroupsTotal = [];
                _.each(scope.savingsgroups, function (group) {
                        _.each(group.clients, function (client) {
                            _.each(client.savings, function (saving) {
                                scope.sumGroupSavingsDueCollection(group, saving);
                            });
                            _.each(client.loans, function (loan) {
                                scope.sumGroupLoansDueCollection(group, loan);
                            });
                        });
                    }
                );
            };

            /**
             * Sum of savings dues group by group id and savings product id
             * @param group
             * @param saving
             */
            scope.sumGroupSavingsDueCollection = function (group, saving) {
                var existing = _.findWhere(scope.savingsGroupsTotal, {groupId: group.groupId, productId: saving.productId});
                var dueAmount = saving.dueAmount;
                if (isNaN(dueAmount)) {
                    dueAmount = parseInt(0);
                }
                if (existing === 'undefined' || !(_.isObject(existing))) {
                    var gp = {
                        groupId: group.groupId,
                        productId: saving.productId,
                        dueAmount: dueAmount,
                        currencyCode: saving.currency.code,
                        currencySymbol: saving.currency.displaySymbol
                    };
                    scope.savingsGroupsTotal.push(gp);
                } else {
                    existing.dueAmount = Math.ceil((Number(existing.dueAmount) + Number(dueAmount)) * 100) / 100;
                }
            };

            /**
             * Sum of loans dues group by group id and loan product id
             * @param group
             * @param loan
             */
            scope.sumGroupLoansDueCollection = function (group, loan) {
                var existing = _.findWhere(scope.loanGroupsTotal, {groupId: group.groupId, productId: loan.productId});
                //alert(_.isObject(existing));
                var totalDue = scope.getLoanTotalDueAmount(loan);
                if (existing === 'undefined' || !(_.isObject(existing))) {
                    var gp = {
                        groupId: group.groupId,
                        productId: loan.productId,
                        dueAmount: totalDue,
                        //chargesDue: loan['chargesDue'],
                        currencyCode: loan.currency.code,
                        currencySymbol: loan.currency.displaySymbol
                    };
                    scope.loanGroupsTotal.push(gp);
                } else {
                    existing.dueAmount = Math.ceil((Number(existing.dueAmount) + Number(totalDue)) * 100) / 100;
                }
            };

            scope.getLoanTotalDueAmount = function(loan){
                var principalInterestDue = loan.totalDue;
                var chargesDue = loan.chargesDue;
                if (isNaN(principalInterestDue)) {
                    principalInterestDue = parseInt(0);
                }
                if (isNaN(chargesDue)) {
                    chargesDue = parseInt(0);
                }
                return Math.ceil((Number(principalInterestDue) + Number(chargesDue)) * 100) / 100;
            };
            /**
             * Sum of savings dues across all groups group by savings product id
             */
            scope.sumSavingsDueCollection = function () {
                scope.savingsTotal = [];
                _.each(scope.savingsGroupsTotal, function (group) {
                    var dueAmount = group.dueAmount;
                    if (isNaN(dueAmount)) {
                        dueAmount = parseInt(0);
                    }

                    var existing = _.findWhere(scope.savingsTotal, {productId: group.productId});
                    if (existing === 'undefined' || !(_.isObject(existing))) {
                        var gp = {
                            productId: group.productId,
                            currencyCode: group.currencyCode,
                            currencySymbol: group.currencySymbol,
                            dueAmount: dueAmount
                        };
                        scope.savingsTotal.push(gp);
                    } else {
                        existing.dueAmount = Math.ceil((Number(existing.dueAmount) + Number(dueAmount)) * 100) / 100;
                    }
                });
            };

            /**
             * Sum of loans dues across all groups group by loan product id
             */
            scope.sumLoansTotal = function () {
                scope.loansTotal = [];
                _.each(scope.loanGroupsTotal, function (group) {
                    var dueAmount = group.dueAmount;
                    if (isNaN(dueAmount)) {
                        dueAmount = parseInt(0);
                    }
                    var existing = _.findWhere(scope.loansTotal, {productId: group.productId});
                    if (existing === 'undefined' || !(_.isObject(existing))) {
                        var gp = {
                            productId: group.productId,
                            currencyCode: group.currencyCode,
                            currencySymbol: group.currencySymbol,
                            dueAmount: dueAmount
                        };
                        scope.loansTotal.push(gp);
                    } else {
                        existing.dueAmount = Math.ceil((Number(existing.dueAmount) + Number(dueAmount)) * 100) / 100;
                    }
                });
            };

            scope.clientsAttendanceArray = function (groups) {
                var gl = groups.length;
                for (var i = 0; i < gl; i++) {
                    scope.clients = groups[i].clients;
                    var cl = scope.clients.length;
                    for (var j = 0; j < cl; j++) {
                        scope.client = scope.clients[j];
                        if (scope.client.attendanceType && scope.client.attendanceType.id === 0) {
                            scope.client.attendanceType.id = 1;
                        }
                    }
                }
            };

            scope.constructBulkLoanAndSavingsRepaymentTransactions = function(){
                scope.bulkRepaymentTransactions = [];
                scope.bulkSavingsDueTransactions = [];
                _.each(scope.savingsgroups, function (group) {
                        _.each(group.clients, function (client) {
                            _.each(client.savings, function (saving) {
                                var dueAmount = saving.dueAmount;
                                if (isNaN(dueAmount)) {
                                    dueAmount = parseInt(0);
                                }
                                var savingsTransaction = {
                                    savingsId:saving.savingsId,
                                    transactionAmount:dueAmount,
                                    depositAccountType: saving.depositAccountType=='Saving Deposit'?100:(saving.depositAccountType=='Recurring Deposit'?300:400)
                                };
                                if(savingsTransaction.transactionAmount>0){
                                    scope.bulkSavingsDueTransactions.push(savingsTransaction);
                                }
                            });

                            _.each(client.loans, function (loan) {
                                var totalDue = scope.getLoanTotalDueAmount(loan);
                                var loanTransaction = {
                                    loanId:loan.loanId,
                                    transactionAmount:totalDue
                                };
                                scope.bulkRepaymentTransactions.push(loanTransaction);
                            });
                        });
                    }
                );
            };

            scope.submit = function () {
                scope.formData.calendarId = scope.calendarId;
                scope.formData.dateFormat = scope.df;
                scope.formData.locale = scope.optlang.code;

                if (scope.date.transactionDate) {
                    scope.formData.transactionDate = dateFilter(scope.date.transactionDate, scope.df);
                }
                scope.formData.actualDisbursementDate = this.formData.transactionDate;

                _.each(scope.savingsgroups, function (group) {
                    _.each(group.clients, function (client) {
                        var clientAttendanceDetails = {
                            clientId: client.clientId,
                            attendanceType: client.attendanceType != undefined?client.attendanceType.id:null
                        };
                        scope.clientsAttendance.push(clientAttendanceDetails);
                    });
                });
                scope.formData.clientsAttendance = scope.clientsAttendance;

                if(scope.showPaymentDetails && scope.paymentDetail.paymentTypeId != ""){
                    scope.formData.paymentTypeId = scope.paymentDetail.paymentTypeId;
                    scope.formData.accountNumber = scope.paymentDetail.accountNumber;
                    scope.formData.checkNumber = scope.paymentDetail.checkNumber;
                    scope.formData.routingCode =scope.paymentDetail.routingCode;
                    scope.formData.receiptNumber = scope.paymentDetail.receiptNumber;
                    scope.formData.bankNumber = scope.paymentDetail.bankNumber;
                }
                scope.formData.bulkDisbursementTransactions = [];
                //construct loan repayment and savings due transactions
                scope.constructBulkLoanAndSavingsRepaymentTransactions();
                scope.formData.bulkRepaymentTransactions = scope.bulkRepaymentTransactions;
                scope.formData.bulkSavingsDueTransactions = scope.bulkSavingsDueTransactions;
                if (centerOrGroupResource === "centerResource") {
                    resourceFactory.centerResource.save({'centerId': scope.centerId, command: 'saveCollectionSheet'}, scope.formData, function (data) {
                        localStorageService.addToLocalStorage('Success', true);
                        route.reload();
                    });
                } else if (centerOrGroupResource === "groupResource") {
                    resourceFactory.groupResource.save({'groupId': scope.groupId, command: 'saveCollectionSheet'}, scope.formData, function (data) {
                        localStorageService.addToLocalStorage('Success', true);
                        route.reload();
                    });
                }
            };

        }
    })
    ;
    mifosX.ng.application.controller('CollectionSheetController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', 'localStorageService',
            '$route', '$timeout', mifosX.controllers.CollectionSheetController]).run(function ($log) {
            $log.info("CollectionSheetController initialized");
        });
}
    (mifosX.controllers || {})
    )
;
;'use strict';
/*global _ */
/*global mifosX */

(function (module) {
    mifosX.controllers = _.extend(module, {
        IndividualCollectionSheetController: function (scope, resourceFactory, location, routeParams, dateFilter, localStorageService, route, $timeout) {
            scope.offices = [];
            scope.centers = [];
            scope.groups = [];
            scope.clientsAttendance = [];
            scope.calendarId = '';
            scope.formData = {};
            scope.centerId = '';
            scope.groupId = '';
            scope.date = {};
            scope.newGroupTotal = {};
            scope.savingsGroupsTotal = [];
            scope.date.transactionDate = new Date();
            var centerOrGroupResource = '';
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });


            scope.officeSelected = function (officeId) {
                scope.officeId = officeId;
                if (officeId) {
                    resourceFactory.employeeResource.getAllEmployees({officeId: officeId}, function (data) {
                        scope.loanOfficers = data;
                    });
                }
            };

            scope.showLoanPaymentDetails = function (parentindex, index) {
                var client = scope.collectionsheetdata.clients[parentindex];
                var loandetail = client.loans[index];
                loandetail.showPaymentDetails = true;
                loandetail.paymentTypeId = "";
                loandetail.accountNumber = "";
                loandetail.checkNumber = "";
                loandetail.routingCode = "";
                loandetail.receiptNumber = "";
                loandetail.bankNumber = "";
            };

            scope.showSavingsPaymentDetails = function (parentindex, index) {
                var client = scope.collectionsheetdata.clients[parentindex];
                var savings = client.savings[index];
                savings.showPaymentDetails = true;
                savings.paymentTypeId = "";
                savings.accountNumber = "";
                savings.checkNumber = "";
                savings.routingCode = "";
                savings.receiptNumber = "";
                savings.bankNumber = "";
            };

            scope.previewCollectionSheet = function () {
                scope.formData = {};
                scope.formData.dateFormat = scope.df;
                scope.formData.locale = scope.optlang.code;
                if (scope.date.transactionDate) {
                    scope.formData.transactionDate = dateFilter(scope.date.transactionDate, scope.df);
                }
                scope.formData.staffId = scope.loanOfficerId;
                scope.formData.officeId = scope.officeId;

                resourceFactory.collectionSheetResource.save({command: 'generateCollectionSheet'}, scope.formData, function (data) {
                    if (data.clients.length > 0) {
                        scope.collectionsheetdata = data;
                        scope.clients = data.clients;
                    } else {
                        scope.noData = true;
                        $timeout(function () {
                            scope.noData = false;
                        }, 3000);
                    }

                });

            };

            if (localStorageService.getFromLocalStorage('Success') === 'true') {
                scope.savesuccess = true;
                localStorageService.removeFromLocalStorage('Success');
                scope.val = true;
                $timeout(function () {
                    scope.val = false;
                }, 3000);
            }

            scope.getLoanTotalDueAmount = function (loan) {
                var principalInterestDue = loan.totalDue;
                var chargesDue = loan.chargesDue;
                if (isNaN(principalInterestDue)) {
                    principalInterestDue = parseInt(0);
                }
                if (isNaN(chargesDue)) {
                    chargesDue = parseInt(0);
                }
                return Math.ceil((Number(principalInterestDue) + Number(chargesDue)) * 100) / 100;
            };

            scope.constructBulkLoanAndSavingsRepaymentTransactions = function () {
                scope.bulkRepaymentTransactions = [];
                scope.bulkSavingsDueTransactions = [];
                _.each(scope.clients, function (client) {
                        _.each(client.savings, function (saving) {
                            var dueAmount = saving.dueAmount;
                            if (isNaN(dueAmount)) {
                                dueAmount = parseInt(0);
                            }
                            var savingsTransaction = {
                                savingsId: saving.savingsId,
                                transactionAmount: dueAmount,
                                depositAccountType: saving.depositAccountType=='Saving Deposit'?100:(saving.depositAccountType=='Recurring Deposit'?300:400)
                            };
                            if(saving.showPaymentDetails && saving.paymentTypeId != ""){
                                savingsTransaction.paymentTypeId = saving.paymentTypeId;
                                savingsTransaction.accountNumber = saving.accountNumber;
                                savingsTransaction.checkNumber = saving.checkNumber;
                                savingsTransaction.routingCode =saving.routingCode;
                                savingsTransaction.receiptNumber = saving.receiptNumber;
                                savingsTransaction.bankNumber = saving.bankNumber;
                            }
                            if(savingsTransaction.transactionAmount>0){
                                scope.bulkSavingsDueTransactions.push(savingsTransaction);
                            }

                        });

                        _.each(client.loans, function (loan) {
                            var totalDue = scope.getLoanTotalDueAmount(loan);
                            var loanTransaction = {
                                loanId: loan.loanId,
                                transactionAmount: totalDue
                            };
                            if(loan.showPaymentDetails && loan.paymentTypeId != ""){
                                loanTransaction.paymentTypeId = loan.paymentTypeId;
                                loanTransaction.accountNumber = loan.accountNumber;
                                loanTransaction.checkNumber = loan.checkNumber;
                                loanTransaction.routingCode =loan.routingCode;
                                loanTransaction.receiptNumber = loan.receiptNumber;
                                loanTransaction.bankNumber = loan.bankNumber;
                            }
                            scope.bulkRepaymentTransactions.push(loanTransaction);
                        });
                    }
                );
            };

            scope.submit = function () {
                var data = {};
                data.dateFormat = scope.df;
                data.locale = scope.optlang.code;

                if (scope.date.transactionDate) {
                    data.transactionDate = dateFilter(scope.date.transactionDate, scope.df);
                }
                data.actualDisbursementDate = this.formData.transactionDate;
                data.bulkDisbursementTransactions = [];
                //construct loan repayment and savings due transactions
                scope.constructBulkLoanAndSavingsRepaymentTransactions();
                data.bulkRepaymentTransactions = scope.bulkRepaymentTransactions;
                data.bulkSavingsDueTransactions = scope.bulkSavingsDueTransactions;
                resourceFactory.collectionSheetResource.save({command: 'saveCollectionSheet'}, data, function (data) {
                    localStorageService.addToLocalStorage('Success', true);
                    route.reload();
                });
            };

        }
    })
    ;
    mifosX.ng.application.controller('IndividualCollectionSheetController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', 'localStorageService',
        '$route', '$timeout', mifosX.controllers.IndividualCollectionSheetController]).run(function ($log) {
        $log.info("IndividualCollectionSheetController initialized");
    });
}
(mifosX.controllers || {})
    )
;
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ProductiveCollectionSheetController: function (scope, routeParams, resourceFactory, dateFilter, location) {
            var params = {};
            params.locale = scope.optlang.code;
            params.dateFormat = scope.df;
            params.meetingDate = routeParams.meetingDate;
            params.officeId = routeParams.officeId;
            params.staffId = routeParams.staffId;
            if (params.staffId === "undefined") {
                params.staffId = null;
            }
            var centerIdArray = [];
            scope.submitNextShow = true;
            scope.submitShow = false;
            scope.completedCenter = false;
            scope.officeName = routeParams.officeName;
            scope.meetingDate = routeParams.meetingDate;
            var submittedStaffId = [];
            scope.details = false;
            scope.noData = true;
            resourceFactory.centerResource.getAllMeetingFallCenters(params, function (data) {
                if (data[0]) {
                    scope.staffCenterData = data[0].meetingFallCenters;
                    for (var i = 0; i < scope.staffCenterData.length; i++) {
                        centerIdArray.push({id: scope.staffCenterData[i].id, calendarId: scope.staffCenterData[i].collectionMeetingCalendar.id});
                    }
                    scope.getAllGroupsByCenter(data[0].meetingFallCenters[0].id, data[0].meetingFallCenters[0].collectionMeetingCalendar.id);
                }
            });

            scope.detailsShow = function() {
                if (scope.details) {
                    scope.details = false;
                } else {
                    scope.details = true;
                }
            }

            scope.getAllGroupsByCenter = function (centerId, calendarId) {
                scope.submitNextShow = true;
                scope.submitShow = false;
                if (centerIdArray.length-1 === submittedStaffId.length || centerIdArray.length === 1) {
                    scope.submitNextShow = false;
                    scope.submitShow = true;
                }
                scope.selectedTab = centerId;
                scope.centerId = centerId;
                scope.calendarId = calendarId;
                scope.formData = {};
                scope.formData.dateFormat = scope.df;
                scope.formData.locale = scope.optlang.code;
                scope.formData.calendarId = scope.calendarId;
                scope.formData.transactionDate = routeParams.meetingDate;
                for (var i = 0; i < submittedStaffId.length; i++) {
                    if (centerId == submittedStaffId[i].id) {
                        scope.submitNextShow = false;
                        scope.submitShow = false;
                        break;
                    }
                }
                resourceFactory.centerResource.save({'centerId': scope.centerId, command: 'generateCollectionSheet'}, scope.formData, function (data) {
                    scope.collectionsheetdata = data;
                    if(data.groups.length > 0){
                      scope.noData = false;
                    }
                    scope.clientsAttendanceArray(data.groups);
                    scope.total(data);
                });
            };

            scope.bulkRepaymentTransactionAmountChange = function () {
                scope.collectionData = scope.collectionsheetdata;
                scope.total(scope.collectionData);
            };

            scope.clientsAttendanceArray = function (groups) {
                var gl = groups.length;
                for (var i = 0; i < gl; i++) {
                    scope.clients = groups[i].clients;
                    var cl = scope.clients.length;
                    for (var j = 0; j < cl; j++) {
                        scope.client = scope.clients[j];
                        if (scope.client.attendanceType.id === 0) {
                            scope.client.attendanceType.id = 1;
                        }
                    }
                }
            };

            function deepCopy(obj) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    var out = [], i = 0, len = obj.length;
                    for (; i < len; i++) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                if (typeof obj === 'object') {
                    var out = {}, i;
                    for (i in obj) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                return obj;
            }

            scope.total = function (data) {
                scope.bulkRepaymentTransactions = [];
                scope.bulkDisbursementTransactions = [];
                scope.groupTotal = [];
                scope.loanProductArray = [];
                scope.loanDueTotalCollections = [];

                for (var i = 0; i < data.loanProducts.length; i++) {
                    loanProductTemp = {
                        productId: data.loanProducts[i].id,
                        transactionAmount: 0,
                        disbursementAmount: 0
                    }
                    scope.loanProductArray.push(loanProductTemp);
                }

                scope.groupArray = scope.collectionsheetdata.groups;
                var gl = scope.groupArray.length;
                for (var i = 0; i < gl; i++) {
                    var loanProductArrayDup = deepCopy(scope.loanProductArray);

                    var temp = {};
                    temp.groupId = scope.groupArray[i].groupId;

                    scope.clientArray = scope.groupArray[i].clients;
                    var cl = scope.clientArray.length;
                    for (var j = 0; j < cl; j++) {
                        scope.loanArray = scope.clientArray[j].loans;
                        var ll = scope.loanArray.length;
                        for (var k = 0; k < ll; k++) {
                            scope.loan = scope.loanArray[k];
                            if (scope.loan.totalDue > 0) {
                                scope.bulkRepaymentTransactions.push({
                                    loanId: scope.loan.loanId,
                                    transactionAmount: scope.loan.totalDue
                                });
                            }

                            for (var l = 0; l < loanProductArrayDup.length; l++) {
                                if (loanProductArrayDup[l].productId == scope.loan.productId) {
                                    if (scope.loan.chargesDue) {
                                        loanProductArrayDup[l].transactionAmount = Number(loanProductArrayDup[l].transactionAmount + Number(scope.loan.totalDue) + Number(scope.loan.chargesDue));
                                        loanProductArrayDup[l].transactionAmount = Math.ceil(loanProductArrayDup[l].transactionAmount * 100) / 100;
                                    } else {
                                        loanProductArrayDup[l].transactionAmount = Number(loanProductArrayDup[l].transactionAmount + Number(scope.loan.totalDue));
                                    }
                                }
                            }
                        }
                    }
                    temp.loanProductArrayDup = loanProductArrayDup;
                    scope.groupTotal.push(temp);
                }

                var loanProductArrayTotal = deepCopy(scope.loanProductArray);
                for (var i = 0; i < scope.groupTotal.length; i++) {
                    var groupProductTotal = scope.groupTotal[i];
                    for (var j = 0; j < groupProductTotal.loanProductArrayDup.length; j++) {
                        var productObjectTotal = groupProductTotal.loanProductArrayDup[j];
                        for (var k = 0; k < loanProductArrayTotal.length; k++) {
                            var productArrayTotal = loanProductArrayTotal[k];
                            if (productObjectTotal.productId == productArrayTotal.productId) {
                                productArrayTotal.transactionAmount = productArrayTotal.transactionAmount + productObjectTotal.transactionAmount;
                                productArrayTotal.disbursementAmount = productArrayTotal.disbursementAmount + productObjectTotal.disbursementAmount;
                            }
                        }
                    }
                }
                scope.grandTotal = loanProductArrayTotal;
            }

            scope.viewFullScreen = function () {
                var element = document.getElementById("productive_sheet");
                if (element.requestFullscreen) {
                    element.requestFullscreen();
                } else if (element.mozRequestFullScreen) {
                    element.mozRequestFullScreen();
                } else if (element.webkitRequestFullscreen) {
                    element.webkitRequestFullscreen();
                } else if (element.msRequestFullscreen) {
                    element.msRequestFullscreen();
                }
            };

            scope.submit = function () {
                scope.formData.calendarId = scope.calendarId;
                scope.formData.dateFormat = scope.df;
                scope.formData.locale = scope.optlang.code;
                scope.formData.transactionDate = dateFilter(routeParams.meetingDate, scope.df);
                scope.formData.clientsAttendance = scope.clientsAttendance;
                scope.formData.bulkDisbursementTransactions = [];
                scope.formData.bulkRepaymentTransactions = scope.bulkRepaymentTransactions;
                resourceFactory.centerResource.save({'centerId': scope.centerId, command: 'saveCollectionSheet'}, scope.formData, function (data) {
                    for (var i = 0; i < centerIdArray.length; i++) {
                        if (scope.centerId === centerIdArray[i].id && centerIdArray.length >= 1) {
                            scope.staffCenterData[i].submitted = true;
                            submittedStaffId.push({id: scope.staffCenterData[i].id});
                        }
                    }

                    if (centerIdArray.length === submittedStaffId.length) {
                        location.path('/entercollectionsheet');
                    }

                    if (centerIdArray.length-1 === submittedStaffId.length) {
                        scope.submitNextShow = false;
                        scope.submitShow = true;
                    }
                    for (var i = 0; i < centerIdArray.length; i++) {
                        if (!scope.staffCenterData[i].submitted) {
                            scope.getAllGroupsByCenter(deepCopy(scope.staffCenterData[i].id), deepCopy(scope.staffCenterData[i].collectionMeetingCalendar.id));
                            break;
                        }
                    }

                });
            };
        }
    });
    mifosX.ng.application.controller('ProductiveCollectionSheetController', ['$scope', '$routeParams', 'ResourceFactory', 'dateFilter', '$location', mifosX.controllers.ProductiveCollectionSheetController]).run(function ($log) {
        $log.info("ProductiveCollectionSheetController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddNewCreditBureauController: function ($scope, http,API_VERSION,$rootScope,resourceFactory,dateFilter, $routeParams, location) {
            $scope.formData = {};
            $scope.creditbureaus=[];

            $scope.cancel={};
            $scope.localcountry={};


            resourceFactory.creditBureauTemplate.get(function (data) {
                $scope.creditbureaus=data;

            });

            $scope.cancel = function () {
                location.path('#/externalservicesCB/CreditBureau');
            };


            $scope.submit = function () {

                resourceFactory.addOrgCreditBureau.save({ocbId: $scope.creditBureauId},$scope.formData,function (data) {

                    location.path('/externalservicesCB/CreditBureau');
                });

            };

        }
    });
    mifosX.ng.application.controller('AddNewCreditBureauController', ['$scope','$http','API_VERSION','$rootScope', 'ResourceFactory', 'dateFilter','$routeParams', '$location', mifosX.controllers.AddNewCreditBureauController]).run(function ($log) {
        $log.info('AddNewCreditBureauController initialized');
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddressFormController: function ($scope, resourceFactory, routeParams, location) {

            $scope.formData={};
            $scope.addressTypes=[];
            $scope.countryOptions=[];
            $scope.stateOptions=[];
            $scope.addressTypeId={};
            entityname="ADDRESS";
            $scope.editable=false;
            clientId=routeParams.id;
            resourceFactory.clientaddressFields.get(function(data){
                $scope.addressTypes=data.addressTypeIdOptions;
                $scope.countryOptions=data.countryIdOptions;
                $scope.stateOptions=data.stateProvinceIdOptions;
            }
            )


            resourceFactory.addressFieldConfiguration.get({entity:entityname},function(data){
          


                   for(var i=0;i<data.length;i++)
                        {
                            data[i].field='$scope.'+data[i].field;
                            if(data[i].is_enabled == undefined) {
                                //For dev.mifos.io or demo.mifos.io
                                eval(data[i].field+"="+data[i].isEnabled);
                            } else {
                                //For fineract server
                                eval(data[i].field+"="+data[i].is_enabled);
                            }
                        }

                    })
            $scope.routeTo=function()
            {
                location.path('/viewclient/'+clientId);
            }

          

            $scope.isEditRequired=function(addType)
            {
                resourceFactory.clientAddress.get({type:addType,clientId:routeParams.id,status:true},function(data)
                {


                    if(data[0])      // index is added just to sense whether it is empty or contains data    
                    {
                        $scope.editable=true;
                    }
                    else
                    {
                        $scope.editable=false;
                    }
                })
            }

            $scope.updateaddress=function()
            {

                $scope.formData.locale="en";
                resourceFactory.clientAddress.put({'clientId': routeParams.id,'type':$scope.addressTypeId},$scope.formData,function (data) {

                    location.path('/viewclient/'+routeParams.id);
                });
            }

            $scope.submit = function () {

                resourceFactory.clientAddress.save({'clientId': routeParams.id,'type':$scope.addressTypeId},$scope.formData,function (data) {

                    location.path('/viewclient/'+clientId);
                });

            };
        }


    });
    mifosX.ng.application.controller('AddressFormController', ['$scope','ResourceFactory', '$routeParams', '$location', mifosX.controllers.AddressFormController]).run(function ($log) {
        $log.info("AddressFormController initialized");
    });

}
(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditAddressController: function ($scope, resourceFactory, routeParams, location) {

            $scope.formData={};
            $scope.addressTypes=[];
            $scope.countryOptions=[];
            $scope.stateOptions=[];
            $scope.addressTypeId={};
            $scope.clients={};
            $scope.addressType={};
            entityname="ADDRESS";
            $scope.addStatus="";
            $scope.editable=false;
            clientId=routeParams.clientId;
            addresstypid=routeParams.addrType;


            isActive={};
            var addressId=routeParams.addrId;

            
            resourceFactory.clientaddressFields.get(function(data){
                    $scope.addressTypes=data.addressTypeIdOptions;
                    $scope.countryOptions=data.countryIdOptions;
                    $scope.stateOptions=data.stateProvinceIdOptions;
                }
            )


            resourceFactory.addressFieldConfiguration.get({entity:entityname},function(data){



                   for(var i=0;i<data.length;i++)
                        {
                            data[i].field='$scope.'+data[i].field;
                            if(data[i].is_enabled == undefined) {
                                //For dev.mifos.io or demo.mifos.io
                                eval(data[i].field+"="+data[i].isEnabled);
                            } else {
                                //For fineract server
                                eval(data[i].field+"="+data[i].is_enabled);
                            }
                        }

                    })

            $scope.routeTo=function()
            {
                location.path('/viewclient/'+clientId);
            }




                resourceFactory.clientAddress.get({type:addresstypid,clientId:clientId},function(data)
                {



                        $scope.editable=true;
                    for(var i=0;i<data.length;i++)
                    {
                        if(data[i].addressId==addressId)
                        {

                            if(data[i].street&&$scope.street)
                            {
                                $scope.formData.street=data[i].street;
                            }
                            if(data[i].addressLine1&&$scope.addressLine1)
                            {
                                $scope.formData.addressLine1=data[i].addressLine1;
                            }
                            if(data[i].addressLine2&&$scope.addressLine2)
                            {
                                $scope.formData.addressLine2=data[i].addressLine2;
                            }
                            if(data[i].addressLine3&&$scope.addressLine3)
                            {
                                $scope.formData.addressLine3=data[i].addressLine3;
                            }
                            if(data[i].townVillage&&$scope.townVillage)
                            {
                                $scope.formData.townVillage=data[i].townVillage;
                            }
                            if(data[i].city&&$scope.city)
                            {
                                $scope.formData.city=data[i].city;
                            }
                            if(data[i].countyDistrict&&$scope.countyDistrict)
                            {
                                $scope.formData.countyDistrict=data[i].countyDistrict;
                            }
                            if(data[i].stateProvinceId&&$scope.stateProvinceId)
                            {
                                $scope.formData.stateProvinceId=data[i].stateProvinceId;
                            }
                            if(data[i].countryId&&$scope.countryId)
                            {
                                $scope.formData.countryId=data[i].countryId;
                            }
                            if(data[i].postalCode&&$scope.postalCode)
                            {
                                $scope.formData.postalCode=data[i].postalCode;
                            }
                            if(data[i].latitude&&$scope.latitue)
                            {
                                $scope.formData.latitude=data[i].latitude;
                            }
                            if(data[i].longitude&&$scope.longitude)
                            {
                                $scope.formData.longitude=data[i].longitude;
                            }
                            if(data[i].isActive&&$scope.isActive)
                            {
                                isActive=data[i].isActive;
                            }
                        }
                    }

                    


                });


            $scope.updateaddress=function()
            {
                
               $scope.formData.locale="en";
                $scope.formData.addressId=addressId;
                resourceFactory.clientAddress.put({'clientId': clientId},$scope.formData,function (data) {

                    location.path('/viewclient/'+clientId);
                });
            }


        }


    });
    mifosX.ng.application.controller('EditAddressController', ['$scope','ResourceFactory', '$routeParams', '$location', mifosX.controllers.EditAddressController]).run(function ($log) {
        $log.info("EditAddressController initialized");
    });

}
(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditConfigurationController: function (scope, resourceFactory, routeParams, location) {

            scope.configId = routeParams.configId;
            resourceFactory.configurationResource.get({id: scope.configId}, function (data) {
                scope.formData = {value: data.value};
            });
            scope.cancel = function () {
                location.path('/global');
            };


            scope.submit = function () {
                resourceFactory.configurationResource.update({resourceType: 'configurations', id: scope.configId}, this.formData, function (data) {
                    location.path('/global');
                });
            };

        }
    });
    mifosX.ng.application.controller('EditConfigurationController', ['$scope', 'ResourceFactory', '$routeParams', '$location', mifosX.controllers.EditConfigurationController]).run(function ($log) {
        $log.info("EditConfigurationController initialized");
    });
}(mifosX.controllers || {}));
;/**
 * Created by 27 on 04-08-2015.
 */
(function (module) {
    mifosX.controllers = _.extend(module, {
        EditExternalServicesConfigurationController: function ($scope, resourceFactory, $routeParams, location) {
            $scope.formData = [];
            $scope.names = [];
            $scope.externalServicesType = $routeParams.externalServicesType;
            //$scope.name = $routeParams.name;
            var nvObject = {};
            resourceFactory.externalServicesResource.get({id: $scope.externalServicesType}, function (data) {
                for (var i in data) {
                    if(data[i] != null && data[i].name != null) {
                        data[i].name.replace(/ /g, '');
                        if (!angular.equals(data[i].name, "")) {
                            nvObject[data[i].name] = data[i].value;
                            $scope.names.push(data[i].name);

                        }
                    }
                }
                $scope.formData = nvObject;


            });

            $scope.cancel = function () {
                location.path('/externalservices/'+ $scope.externalServicesType);
            };

            $scope.submit = function () {

                //scope.formData1 = {  scope.name : scope.formData.value};
                resourceFactory.externalServicesResource.put({id: $scope.externalServicesType}, this.formData, function (data) {
                    location.path('/externalservices' );
                });
            };
        }

    });
    mifosX.ng.application.controller('EditExternalServicesConfigurationController', ['$scope', 'ResourceFactory', '$routeParams', '$location', mifosX.controllers.EditExternalServicesConfigurationController]).run(function ($log) {
        $log.info("EditExternalServicesConfigurationController initialized");
    });

}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditTwoFactorConfigController: function (scope, resourceFactory, $routeParams, location) {
            var configs = [];
            configs['sms'] = ['otp-delivery-sms-enable', 'otp-delivery-sms-provider', 'otp-delivery-sms-text'];
            configs['email'] = ['otp-delivery-email-enable', 'otp-delivery-email-subject', 'otp-delivery-email-body'];
            configs['token'] = ['otp-token-length', 'access-token-live-time-extended', 'otp-token-live-time', 'access-token-live-time'];

            var boolConfigs = ['otp-delivery-sms-enable', 'otp-delivery-email-enable'];
            var multiLineConfigs = ['otp-delivery-sms-text', 'otp-delivery-email-body'];

            scope.configs = [];
            scope.configType = $routeParams.configType;
            scope.disabledTwoFactor = false;

            resourceFactory.twoFactorConfigResource.getAllConfigs(function (data) {
                for (var i in data.toJSON()) {
                    if(configs[scope.configType].indexOf(i) > -1) {
                        scope.configs.push({
                            name: i,
                            value: data[i].toString(),
                            type: getConfigType(i)
                        });
                    }
                }
            }, function () {
                scope.disabledTwoFactor = true;
            });

            scope.cancel = function () {
                location.path('/twofactorconfig');
            };

            scope.submit = function () {
                var formData = {};
                for(var i = 0; i < scope.configs.length; i++) {
                    var config = scope.configs[i];
                    formData[config.name] = config.value;
                }
                resourceFactory.twoFactorConfigResource.put(formData, function (data) {
                    location.path('/twofactorconfig');
                });
            };

            var getConfigType = function (name) {

                if(boolConfigs.indexOf(name) > -1)
                    return 'BOOLEAN';
                if(multiLineConfigs.indexOf(name) > -1) {
                    return 'MULTILINE';
                }
                return 'TEXT';
            };
        }

    });
    mifosX.ng.application.controller('EditTwoFactorConfigController', ['$scope', 'ResourceFactory', '$routeParams', '$location',
        mifosX.controllers.EditTwoFactorConfigController]).run(function ($log) {
        $log.info("EditTwoFactorConfigController initialized");
    });

}(mifosX.controllers || {}));
;/**
 * Created by 27 on 03-08-2015.
 */
(function (module) {
    mifosX.controllers = _.extend(module, {
        ExternalServicesController: function (scope, resourceFactory, location, route) {
            scope.S3Configs = [];
            scope.SMTPConfigs = [];
            scope.notification = [];
            resourceFactory.externalServicesS3Resource.get(function (data) {
                for (var i in data) {
                    if(data[i] != null && data[i].name != null) {
                        data[i].name.replace(/ /g, '');
                        if (!angular.equals(data[i].name, "")) {
                            data[i].showEditvalue = true;
                            scope.S3Configs.push(data[i])
                        }
                    }
                }
            });
            resourceFactory.externalServicesSMTPResource.get(function (data) {
                for (var i in data) {
                    //console.log(data[0]);
                    if(data[i].name != "") {
                        data[i].showEditvalue = true;
                        scope.SMTPConfigs.push(data[i])
                    }
                }
            });
            resourceFactory.externalServicesNotificationResource.get(function (data) {
                for (var i in data) {
                    if(data[i] != null && data[i].name != null) {
                        data[i].name.replace(/ /g, '');
                        if (!angular.equals(data[i].name, "")) {
                            data[i].showEditvalue = true;
                            scope.notification.push(data[i])
                        }
                    }
                }
            });
        }

    });
    mifosX.ng.application.controller('ExternalServicesController', ['$scope', 'ResourceFactory', '$location', '$route',
        mifosX.controllers.ExternalServicesController]).run(function ($log){
        $log.info("ExternalServicesController initialized");
    });


}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        GlobalConfigurationController: function (scope, resourceFactory, location, route) {
            scope.configs = [];
            scope.GlobalsPerPage = 15;
            resourceFactory.configurationResource.get(function (data) {
                for (var i in data.globalConfiguration) {
                    data.globalConfiguration[i].showEditvalue = true;
                    scope.configs.push(data.globalConfiguration[i])
                }
                resourceFactory.cacheResource.get(function (data) {
                    for (var i in data) {
                        if (data[i].cacheType && data[i].cacheType.id == 2) {
                            var cache = {};
                            cache.name = 'Is Cache Enabled';
                            cache.enabled = data[i].enabled;
                            cache.showEditvalue = false;
                            scope.configs.push(cache);
                        }
                    }

                });
            });

            if (!scope.searchCriteria.config) {
                scope.searchCriteria.config = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.config || '';

            scope.onFilter = function () {
                scope.searchCriteria.config = scope.filterText;
                scope.saveSC();
            };

            scope.enable = function (id, name) {
                if (name == 'Is Cache Enabled') {
                    var temp = {};
                    temp.cacheType = 2;
                    resourceFactory.cacheResource.update(temp, function (data) {
                        route.reload();
                    });
                }
                else {
                    var temp = {'enabled': 'true'};
                    resourceFactory.configurationResource.update({'id': id}, temp, function (data) {
                        route.reload();
                    });
                }
            };
            scope.disable = function (id, name) {
                if (name == 'Is Cache Enabled') {
                    var temp = {};
                    temp.cacheType = 1;
                    resourceFactory.cacheResource.update(temp, function (data) {
                        route.reload();
                    });
                }
                else {
                    var temp = {'enabled': 'false'};
                    resourceFactory.configurationResource.update({'id': id}, temp, function (data) {
                        route.reload();
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('GlobalConfigurationController', ['$scope', 'ResourceFactory', '$location', '$route', mifosX.controllers.GlobalConfigurationController]).run(function ($log) {
        $log.info("GlobalConfigurationController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        MapCreditBureauToLpController: function ($scope, resourceFactory, $routeParams, location) {
            $scope.formData = {};
            $scope.cb_id={};
            $scope.lps=[];
            $scope.cbdropdowns=[];
            $scope.creditbureaus=[];




            resourceFactory.lpdropdown.get( function (data) {
                $scope.lps=data;
            });

            resourceFactory.creditBureauTemplate.get(function (data) {
                $scope.creditbureaus=data;
            });

            $scope.submit = function () {

                $scope.formData.locale='en';

                resourceFactory.addCreditBureauLoanProductMapping.save({cb_id: $scope.creditBureauId},this.formData, function (data) {
                    location.path('/externalservicesCB/CreditBureau');
                });

            };


        }

    });
    mifosX.ng.application.controller('MapCreditBureauToLpController', ['$scope', 'ResourceFactory', '$routeParams', '$location', mifosX.controllers.MapCreditBureauToLpController]).run(function ($log) {
        $log.info("MapCreditBureauToLpController initialized");
    });

}
(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewCreditBureauSummaryController: function ($scope, resourceFactory, $routeParams, location,route) {
            $scope.Configs = [];
            $scope.CBConfigs=[];
            $scope.externalServicesType = $routeParams.externalServicesType;


            resourceFactory.creditBureauSummary.get( function (data) {
                for (var i in data) {

                    if(data[i] != null && data[i].organisationCreditBureauId != null) {
                        $scope.Configs.push(data[i]);

                    }
                }
            });

            resourceFactory.creditBureauMapping.get( function (data) {
                for (var i in data) {

                    if(data[i] != null && data[i].creditbureauLoanProductMappingId != null) {
                        $scope.CBConfigs.push(data[i]);

                    }
                }
            });

            $scope.buttonstatus=function(status,id)
            {


                var biD=document.getElementById(id);


                if(status==true)
                {

                    biD.innerHTML="disable";

                }
                else
                {

                    biD.innerHTML="enable";
                }
            }

            $scope.changeCbStatus=function(cb_id,status)
            {

                var formData={};
                formData.creditBureauId=cb_id;
                formData.is_active=!status;

                resourceFactory.creditBureauSummary.put(formData, function (data) {
                    route.reload();

                });
            }

            $scope.changeMappingStatus=function (mappingid,status) {
                var mappingUpdate={};
                mappingUpdate.creditbureauLoanProductMappingId=mappingid;
                mappingUpdate.is_active=!status;
                resourceFactory.creditBureauMapping.put(mappingUpdate,function (data) {

                    route.reload();

                });
            }
        }

    });
    mifosX.ng.application.controller('ViewCreditBureauSummaryController', ['$scope', 'ResourceFactory', '$routeParams', '$location','$route', mifosX.controllers.ViewCreditBureauSummaryController]).run(function ($log) {
        $log.info("ViewCreditBureauSummaryController initialized");
    });

}(mifosX.controllers || {}));;/**
 * Created by 27 on 05-08-2015.
 */
(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewExternalServicesController: function ($scope, resourceFactory, $routeParams, location) {
            $scope.Configs = [];
            $scope.externalServicesType = $routeParams.externalServicesType;
            //$scope.name = $routeParams.name;
            resourceFactory.externalServicesResource.get({id: $scope.externalServicesType}, function (data) {
                for (var i in data) {
                    if(data[i] != null && data[i].name != null) {
                        data[i].name.replace(/ /g, '');
                        if (!angular.equals(data[i].name, "")) {
                            $scope.Configs.push(data[i]);

                        }
                    }
                }
            });

            $scope.cancel = function () {
                location.path('/externalservices');
            };

        }

    });
    mifosX.ng.application.controller('ViewExternalServicesController', ['$scope', 'ResourceFactory', '$routeParams', '$location', mifosX.controllers.ViewExternalServicesController]).run(function ($log) {
        $log.info("ViewExternalServicesController initialized");
    });

}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewTwoFactorConfigController: function (scope, resourceFactory) {
            var smsConfigs = ['otp-delivery-sms-enable', 'otp-delivery-sms-provider', 'otp-delivery-sms-text'];
            var emailConfigs = ['otp-delivery-email-enable', 'otp-delivery-email-subject', 'otp-delivery-email-body'];
            var tokenConfigs = ['otp-token-length', 'access-token-live-time-extended', 'otp-token-live-time', 'access-token-live-time'];
            scope.configurations = [];
            scope.smsConfig = [];
            scope.emailConfig = [];
            scope.tokenConfig = [];
            scope.tabs = {};
            scope.disabledTwoFactor = false;

            resourceFactory.twoFactorConfigResource.getAllConfigs(function (data) {
                for(var i = 0; i < smsConfigs.length; i++) {
                    scope.smsConfig.push({name: smsConfigs[i], value: data[smsConfigs[i]]});
                }
                for(i = 0; i < emailConfigs.length; i++) {
                    scope.emailConfig.push({name: emailConfigs[i], value: data[emailConfigs[i]]});
                }
                for(i = 0; i < tokenConfigs.length; i++) {
                    scope.tokenConfig.push({name: tokenConfigs[i], value: data[tokenConfigs[i]]});
                }

                scope.tabs['sms'] = scope.smsConfig;
                scope.tabs['email'] = scope.emailConfig;
                scope.tabs['token'] = scope.tokenConfig;

                for (var i in data.toJSON()) {
                    scope.configurations.push({name: i, value: data[i]});
                }
            }, function () {
                scope.disabledTwoFactor = true;
            });
        }

    });
    mifosX.ng.application.controller('ViewTwoFactorConfigController', ['$scope', 'ResourceFactory',
        mifosX.controllers.ViewTwoFactorConfigController]).run(function ($log) {
        $log.info("ViewTwoFactorConfigController initialized");
    });

}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddNewFixedDepositChargeController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.offices = [];
            scope.cancelRoute = routeParams.id;
            scope.date = {};

            resourceFactory.savingsChargeResource.get({accountId: routeParams.id, resourceType: 'template'}, function (data) {
                scope.chargeOptions = data.chargeOptions;
            });

            scope.chargeSelected = function (id) {
                resourceFactory.chargeResource.get({chargeId: id, template: 'true'}, function (data) {
                    scope.chargeCalculationType = data.chargeCalculationType.id;
                    scope.chargeTimeType = data.chargeTimeType.id;
                    scope.chargeDetails = data;
                    scope.formData.amount = data.amount;
                    scope.withDrawCharge = data.chargeTimeType.value === "Withdrawal Fee" ? true : false;
                    scope.formData.feeInterval = data.feeInterval;
                    if (data.chargeTimeType.value === "Annual Fee" || data.chargeTimeType.value === "Monthly Fee") {
                        scope.chargeTimeTypeAnnualOrMonth = true;
                    }
                });
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                if (scope.withDrawCharge !== true) {
                    if (scope.chargeTimeTypeAnnualOrMonth === true) {
                        this.formData.monthDayFormat = "dd MMMM";
                        if (scope.date.due) {
                            this.formData.feeOnMonthDay = dateFilter(scope.date.due, 'dd MMMM');
                        } else {
                            this.formData.feeOnMonthDay = "";
                        }
                    } else {
                        this.formData.dateFormat = scope.df;
                        if (scope.date.specificduedate) {
                            this.formData.dueDate = dateFilter(scope.date.specificduedate, scope.df);
                        } else {
                            this.formData.dueDate = "";
                        }
                    }
                }
                resourceFactory.savingsChargeResource.save({accountId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewfixeddepositaccount/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('AddNewFixedDepositChargeController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.AddNewFixedDepositChargeController]).run(function ($log) {
        $log.info("AddNewFixedDepositChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportFixedDepositAccountsController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/fixeddepositaccounts/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams += '&officeId=' + scope.formData.officeId;
                    }else {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }

            };

            scope.changeStaff = function() {
                if(scope.formData.staffId) {
                    if (scope.first.queryParams.indexOf("staffId")==-1) {
                        scope.first.queryParams = scope.first.queryParams + '&staffId=' + scope.formData.staffId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&staffId=\d+/i,"&staffId="+ scope.formData.staffId);
                    }
                } else {
                    if(scope.formData.officeId)
                        scope.first.queryParams = '&' + 'officeId=' + scope.formData.officeId;
                    else
                        scope.first.queryParams = '&';
                }
            };
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "fixeddepositaccounts"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };

            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/fixeddepositaccounts/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportFixedDepositAccountsController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportFixedDepositAccountsController]).run(function ($log) {
        $log.info("BulkImportFixedDepositAccountsController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportFixedDepositTransactionsController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/fixeddepositaccounts/transaction/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices=data;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        scope.first.queryParams += 'officeId=' + scope.formData.officeId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }
            };

            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "fixeddeposittransactions"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };

            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/fixeddepositaccounts/transaction/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportFixedDepositTransactionsController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportFixedDepositTransactionsController]).run(function ($log) {
        $log.info("BulkImportFixedDepositTransactionsController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateFixedDepositAccountController: function (scope, resourceFactory, location, routeParams, dateFilter,$uibModal, WizardHandler) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.transientData ={};
            scope.restrictDate = new Date();
            scope.fixedDetails = {};
            scope.clientId = routeParams.clientId;
            scope.groupId = routeParams.groupId;
            if (routeParams.centerEntity) {
                scope.centerEntity = true;
            }

            scope.date = {};
			scope.date.submittedOnDate = new Date();
            scope.disabled = true;

            //interest rate chart details
            scope.chart = {};
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting

            scope.charges = [];
            scope.inparams = {};
            if (scope.clientId) {
                scope.inparams.clientId = scope.clientId
            }
            ;
            if (scope.groupId) {
                scope.inparams.groupId = scope.groupId
            }
            ;
            if (scope.centerId) {
                scope.inparams.centerId = scope.centerId
            }
            ;

            resourceFactory.fixedDepositAccountTemplateResource.get(scope.inparams, function (data) {
                scope.products = data.productOptions;
                scope.chargeOptions = data.chargeOptions;
                scope.clientName = data.clientName;
                scope.groupName = data.groupName;
                scope.savingsAccounts = data.savingsAccounts;
            });

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
            }

            scope.changeProduct = function () {
                scope.inparams.productId = scope.formData.productId;
                resourceFactory.fixedDepositAccountTemplateResource.get(scope.inparams, function (data) {
                    scope.depositRolloverOptions = data.maturityInstructionOptions;
                    scope.savingsAccounts = data.savingsAccounts;
                    scope.data = data;
                    scope.charges = data.charges;

                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value === "Annual Fee" && scope.charges[i].feeOnMonthDay) {
                            scope.charges[i].feeOnMonthDay.push('2013');
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        }
                    }
                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                    scope.formData.minRequiredOpeningBalance = data.minRequiredOpeningBalance;
                    scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                    scope.formData.withHoldTax = data.withHoldTax;

                    if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                    if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                    if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                    if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                    if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                    if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;
                    if (data.interestFreePeriodApplicable) scope.formData.interestFreePeriodApplicable = data.interestFreePeriodApplicable;
                    if (data.preClosurePenalApplicable) scope.formData.preClosurePenalApplicable = data.preClosurePenalApplicable;

                    scope.disabled = false;
                    scope.fixedDetails = angular.copy(scope.formData);
                    scope.fixedDetails.productName = scope.formValue(scope.products,scope.formData.productId,'id','name');
                    scope.chart = data.accountChart;
                    scope.chartSlabs = scope.chart.chartSlabs;
                    //format chart date values
                    if (scope.chart.fromDate) {
                        var fromDate = dateFilter(scope.chart.fromDate, scope.df);
                        scope.fromDate.date = new Date(fromDate);
                    }
                    if (scope.chart.endDate) {
                        var endDate = dateFilter(scope.chart.endDate, scope.df);
                        scope.endDate.date = new Date(endDate);
                    }



                    var interestFreePeriodFrequencyTypeId = (_.isNull(data.interestFreePeriodFrequencyType) || _.isUndefined(data.interestFreePeriodFrequencyType)) ? '' : data.interestFreePeriodFrequencyType.id;
                    var preClosurePenalInterestOnTypeId = (_.isNull(data.preClosurePenalInterestOnType) || _.isUndefined(data.preClosurePenalInterestOnType)) ? '' : data.preClosurePenalInterestOnType.id;
                    var minDepositTermTypeId = (_.isNull(data.minDepositTermType) || _.isUndefined(data.minDepositTermType)) ? '' : data.minDepositTermType.id;
                    var maxDepositTermTypeId = (_.isNull(data.maxDepositTermType) || _.isUndefined(data.maxDepositTermType)) ? '' : data.maxDepositTermType.id;
                    var inMultiplesOfDepositTermTypeId = (_.isNull(data.inMultiplesOfDepositTermType) || _.isUndefined(data.inMultiplesOfDepositTermType)) ? '' : data.inMultiplesOfDepositTermType.id;

                    scope.formData.interestFreePeriodApplicable = data.interestFreePeriodApplicable;
                    scope.formData.interestFreeFromPeriod = data.interestFreeFromPeriod;
                    scope.formData.interestFreeToPeriod = data.interestFreeToPeriod;
                    scope.formData.interestFreePeriodFrequencyTypeId = interestFreePeriodFrequencyTypeId;
                    scope.formData.preClosurePenalApplicable = data.preClosurePenalApplicable;
                    scope.formData.preClosurePenalInterest = data.preClosurePenalInterest;
                    scope.formData.preClosurePenalInterestOnTypeId = preClosurePenalInterestOnTypeId;
                    scope.formData.minDepositTerm = data.minDepositTerm;
                    scope.formData.maxDepositTerm = data.maxDepositTerm;
                    scope.formData.minDepositTermTypeId = minDepositTermTypeId;
                    scope.formData.maxDepositTermTypeId = maxDepositTermTypeId;
                    scope.formData.inMultiplesOfDepositTerm = data.inMultiplesOfDepositTerm;
                    scope.formData.inMultiplesOfDepositTermTypeId = inMultiplesOfDepositTermTypeId;
                    scope.formData.transferInterestToSavings = 'false';
                });
            };

            scope.$watch('formData',function(newVal){
               scope.fixedDetails = angular.extend(scope.fixedDetails,newVal);
            });

            scope.formValue = function(array,model,findattr,retAttr){
                findattr = findattr ? findattr : 'id';
                retAttr = retAttr ? retAttr : 'value';
                console.log(findattr,retAttr,model);
                return _.find(array, function (obj) {
                    return obj[findattr] === model;
                })[retAttr];
            };

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        if (data.chargeTimeType.value == "Annual Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        } else if (data.chargeTimeType.value == "Monthly Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        }
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.submit = function () {
                if (scope.date) {
                    this.formData.submittedOnDate = dateFilter(scope.date.submittedOnDate, scope.df);
                }
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.monthDayFormat = "dd MMM";
                this.formData.charges = [];

                if (scope.clientId) this.formData.clientId = scope.clientId;
                if (scope.groupId) this.formData.groupId = scope.groupId;
                if (scope.centerId) this.formData.centerId = scope.centerId;

                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {

                        var chargeData = { chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount};
                        if(scope.charges[i].chargeTimeType.value == 'Annual Fee' || scope.charges[i].chargeTimeType.value == 'Monthly Fee'){
                            chargeData.feeOnMonthDay = dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM');
                        }
                        if (scope.charges[i].chargeTimeType.value == 'Specified due date' || scope.charges[i].chargeTimeType.code=='chargeTimeType.weeklyFee') {
                            chargeData.dueDate = dateFilter(scope.charges[i].dueDate, scope.df);
                        }

                        if (scope.charges[i].chargeTimeType.value == 'Monthly Fee' || scope.charges[i].chargeTimeType.code=='chargeTimeType.weeklyFee') {
                            chargeData.feeInterval = scope.charges[i].feeInterval;
                        }
                        this.formData.charges.push(chargeData);
                    }
                }

                this.formData.charts = [];//declare charts array
                this.formData.charts.push(copyChartData(scope.chart));//add chart details
                this.formData = removeEmptyValues(this.formData);

                resourceFactory.fixedDepositAccountResource.save(this.formData, function (data) {
                    location.path('/viewfixeddepositaccount/' + data.savingsId);
                });
            };

            scope.cancel = function () {
                if (scope.clientId) {
                    location.path('/viewclient/' + scope.clientId);
                } else if (scope.centerEntity) {
                    location.path('/viewcenter/' + scope.groupId);
                } else {
                    location.path('/viewgroup/' + scope.groupId);
                }
            }
            scope.changeMaturityInstruction = function(){
                scope.formData.transferToSavingsId =null;
            }

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                        amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom
                };

                scope.chart.chartSlabs.push(chartSlab);
            }


            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var newChartData = {
                    id: scope.chart.id,
                    name: scope.chart.name,
                    description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.chart.isPrimaryGroupingByAmount,
                    //savingsProductId: scope.productId,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs)),
                    isActiveChart: 'true'
                }

                //remove empty values
                _.each(newChartData, function (v, k) {
                    if (!v)
                        delete newChartData[k];
                });

                return newChartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives))
                }
                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }
                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (!v && v != 0)
                        delete newChartSlabData[k];
                });

                return newChartSlabData;
            }

            removeEmptyValues = function (objArray) {
                _.each(objArray, function (v, k) {
                    //alert(k + ':' + v);
                    if (_.isNull(v) || _.isUndefined(v) || v === '') {
                        //alert('remove' + k + ':' + v);
                        delete objArray[k];
                    }

                });

                return objArray;
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }
            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                _.each($scope.chartSlab.incentives, function (incentive) {
                    if(!incentive.attributeValueDesc){
                        incentive.attributeValueDesc = incentive.attributeValue;
                    }
                });
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };

        }
    });
    mifosX.ng.application.controller('CreateFixedDepositAccountController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter','$uibModal', 'WizardHandler', mifosX.controllers.CreateFixedDepositAccountController]).run(function ($log) {
        $log.info("CreateFixedDepositAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditDepositAccountController: function (scope, resourceFactory, location, routeParams, dateFilter,$uibModal) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.accountId = routeParams.id;
            scope.charges = [];
            scope.restrictDate = new Date();
            //interest rate chart details
            scope.chart = {};
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting

            resourceFactory.fixedDepositAccountResource.get({accountId: scope.accountId, template: 'true', associations: 'charges, linkedAccount'}, function (data) {
                scope.data = data;
                scope.charges = data.charges || [];
                if (scope.charges) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == "Monthly Fee") {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            scope.charges[i].dueDate = new Date(dateFilter(scope.charges[i].dueDate, scope.df));
                        }
                    }
                }

                scope.inparams = {};
                if (data.clientId) {
                    scope.formData.clientId = data.clientId;
                    scope.clientName = data.clientName;
                    scope.inparams.clientId = data.clientId
                }
                if (data.groupId) {
                    scope.formData.groupId = data.groupId;
                    scope.groupName = data.groupName;
                    scope.inparams.groupId = data.groupId
                }
                scope.formData.productId = data.depositProductId;
                scope.inparams.productId = scope.formData.productId;
                resourceFactory.fixedDepositAccountTemplateResource.get(scope.inparams, function (data) {
                    scope.depositRolloverOptions = data.maturityInstructionOptions;
                });
                scope.products = data.productOptions;
                scope.savingsAccounts = data.savingsAccounts;
                if (data.linkedAccount) {
                    scope.formData.linkAccountId = data.linkedAccount.id;
                }
                if (data.fieldOfficerId != 0)scope.formData.fieldOfficerId = data.fieldOfficerId;
                if (data.timeline) {
                    var submittedOnDate = dateFilter(data.timeline.submittedOnDate, scope.df);
                    scope.formData.submittedOnDate = new Date(submittedOnDate);
                }
                scope.formData.externalId = data.externalId;
                scope.fieldOfficers = data.fieldOfficerOptions;
                scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                scope.formData.depositAmount = data.depositAmount;
                scope.formData.depositPeriod = data.depositPeriod;
                scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                scope.formData.withHoldTax = data.withHoldTax;
                scope.formData.maturityInstructionId = data.onAccountClosure.id;
                scope.formData.transferToSavingsId = data.transferToSavingsId;
                /* FIX-ME: uncomment annualFeeAmount when datepicker avialable, because it depends on the date field 'annualFeeOnMonthDay'*/
                //scope.formData.annualFeeAmount = data.annualFeeAmount;
                //scope.formData.withdrawalFeeAmount = data.withdrawalFeeAmount;
                //scope.formData.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;

                if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                //if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;

                scope.chart = data.accountChart;
                scope.chartSlabs = scope.chart.chartSlabs;
                //format chart date values
                if (scope.chart.fromDate) {
                    var fromDate = dateFilter(scope.chart.fromDate, scope.df);
                    scope.fromDate.date = new Date(fromDate);
                }
                if (scope.chart.endDate) {
                    var endDate = dateFilter(scope.chart.endDate, scope.df);
                    scope.endDate.date = new Date(endDate);
                }

                var depositPeriodFrequencyId = (_.isNull(data.depositPeriodFrequency) || _.isUndefined(data.depositPeriodFrequency)) ? '' : data.depositPeriodFrequency.id;
                var interestFreePeriodFrequencyTypeId = (_.isNull(data.interestFreePeriodFrequencyType) || _.isUndefined(data.interestFreePeriodFrequencyType)) ? '' : data.interestFreePeriodFrequencyType.id;
                var preClosurePenalInterestOnTypeId = (_.isNull(data.preClosurePenalInterestOnType) || _.isUndefined(data.preClosurePenalInterestOnType)) ? '' : data.preClosurePenalInterestOnType.id;
                var minDepositTermTypeId = (_.isNull(data.minDepositTermType) || _.isUndefined(data.minDepositTermType)) ? '' : data.minDepositTermType.id;
                var maxDepositTermTypeId = (_.isNull(data.maxDepositTermType) || _.isUndefined(data.maxDepositTermType)) ? '' : data.maxDepositTermType.id;
                var inMultiplesOfDepositTermTypeId = (_.isNull(data.inMultiplesOfDepositTermType) || _.isUndefined(data.inMultiplesOfDepositTermType)) ? '' : data.inMultiplesOfDepositTermType.id;

                scope.formData.depositPeriodFrequencyId = depositPeriodFrequencyId;
                scope.formData.interestFreePeriodApplicable = data.interestFreePeriodApplicable;
                scope.formData.interestFreeFromPeriod = data.interestFreeFromPeriod;
                scope.formData.interestFreeToPeriod = data.interestFreeToPeriod;
                scope.formData.interestFreePeriodFrequencyTypeId = interestFreePeriodFrequencyTypeId;
                scope.formData.preClosurePenalApplicable = data.preClosurePenalApplicable;
                scope.formData.preClosurePenalInterest = data.preClosurePenalInterest;
                scope.formData.preClosurePenalInterestOnTypeId = preClosurePenalInterestOnTypeId;
                scope.formData.minDepositTerm = data.minDepositTerm;
                scope.formData.maxDepositTerm = data.maxDepositTerm;
                scope.formData.minDepositTermTypeId = minDepositTermTypeId;
                scope.formData.maxDepositTermTypeId = maxDepositTermTypeId;
                scope.formData.inMultiplesOfDepositTerm = data.inMultiplesOfDepositTerm;
                scope.formData.inMultiplesOfDepositTermTypeId = inMultiplesOfDepositTermTypeId;
                if(data.transferInterestToSavings) {
                    scope.formData.transferInterestToSavings = 'true';
                }else{
                    scope.formData.transferInterestToSavings = 'false';
                }
            });

            scope.changeProduct = function () {
                var inparams = {productId: scope.formData.productId};
                if (scope.formData.clientId) inparams.clientId = scope.formData.clientId;
                if (scope.formData.groupId) inparams.groupId = scope.formData.groupId;
                resourceFactory.savingsTemplateResource.get(inparams, function (data) {

                    scope.data = data;

                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                    scope.formData.depositAmount = data.depositAmount;
                    scope.formData.depositPeriod = data.depositPeriod;
                    scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                    scope.formData.withHoldTax = data.withHoldTax;

                    if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                    if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                    if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                    if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                    if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                    //if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;

                    scope.chart = data.accountChart;
                    //format chart date values
                    if (scope.chart.fromDate) {
                        var fromDate = dateFilter(scope.chart.fromDate, scope.df);
                        scope.fromDate.date = new Date(fromDate);
                    }
                    if (scope.chart.endDate) {
                        var endDate = dateFilter(scope.chart.endDate, scope.df);
                        scope.endDate.date = new Date(endDate);
                    }

                    var depositPeriodFrequencyId = (_.isNull(data.depositPeriodFrequency) || _.isUndefined(data.depositPeriodFrequency)) ? '' : data.depositPeriodFrequency.id;
                    var interestFreePeriodFrequencyTypeId = (_.isNull(data.interestFreePeriodFrequencyType) || _.isUndefined(data.interestFreePeriodFrequencyType)) ? '' : data.interestFreePeriodFrequencyType.id;
                    var preClosurePenalInterestOnTypeId = (_.isNull(data.preClosurePenalInterestOnType) || _.isUndefined(data.preClosurePenalInterestOnType)) ? '' : data.preClosurePenalInterestOnType.id;
                    var minDepositTermTypeId = (_.isNull(data.minDepositTermType) || _.isUndefined(data.minDepositTermType)) ? '' : data.minDepositTermType.id;
                    var maxDepositTermTypeId = (_.isNull(data.maxDepositTermType) || _.isUndefined(data.maxDepositTermType)) ? '' : data.maxDepositTermType.id;
                    var inMultiplesOfDepositTermTypeId = (_.isNull(data.inMultiplesOfDepositTermType) || _.isUndefined(data.inMultiplesOfDepositTermType)) ? '' : data.inMultiplesOfDepositTermType.id;

                    scope.formData.depositPeriodFrequencyId = depositPeriodFrequencyId;
                    scope.formData.interestFreePeriodApplicable = data.interestFreePeriodApplicable;
                    scope.formData.interestFreeFromPeriod = data.interestFreeFromPeriod;
                    scope.formData.interestFreeToPeriod = data.interestFreeToPeriod;
                    scope.formData.interestFreePeriodFrequencyTypeId = interestFreePeriodFrequencyTypeId;
                    scope.formData.preClosurePenalApplicable = data.preClosurePenalApplicable;
                    scope.formData.preClosurePenalInterest = data.preClosurePenalInterest;
                    scope.formData.preClosurePenalInterestOnTypeId = preClosurePenalInterestOnTypeId;
                    scope.formData.minDepositTerm = data.minDepositTerm;
                    scope.formData.maxDepositTerm = data.maxDepositTerm;
                    scope.formData.minDepositTermTypeId = minDepositTermTypeId;
                    scope.formData.maxDepositTermTypeId = maxDepositTermTypeId;
                    scope.formData.inMultiplesOfDepositTerm = data.inMultiplesOfDepositTerm;
                    scope.formData.inMultiplesOfDepositTermTypeId = inMultiplesOfDepositTermTypeId;
                    scope.linkAccountId = data.linkAccountId;
                });
            }

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        if (data.chargeTimeType.value == "Annual Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        } else if (data.chargeTimeType.value == "Monthly Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        }

                        delete data.id;
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/viewsavingaccount/' + scope.accountId);
            }

            scope.changeMaturityInstruction = function(){
                scope.formData.transferToSavingsId =null;
            }
            
            scope.submit = function () {
                if (this.formData.submittedOnDate)  this.formData.submittedOnDate = dateFilter(this.formData.submittedOnDate, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.monthDayFormat = "dd MMM";
                scope.formData.charges = [];
                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM')});
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                dueDate: dateFilter(scope.charges[i].dueDate, scope.df)});
                        } else if (scope.charges[i].chargeTimeType.value == 'Monthly Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM'), feeInterval: scope.charges[i].feeInterval});
                        } else {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount});
                        }
                    }
                }

                this.formData.charts = [];//declare charts array
                this.formData.charts.push(copyChartData(scope.chart));//add chart details
                this.formData = removeEmptyValues(this.formData);

                resourceFactory.fixedDepositAccountResource.update({'accountId': scope.accountId}, this.formData, function (data) {
                    location.path('/viewfixeddepositaccount/' + data.savingsId);
                });
            };

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                        amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom
                };

                scope.chart.chartSlabs.push(chartSlab);
            }


            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var newChartData = {
                    id: scope.chart.id,
                    name: scope.chart.name,
                    description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.chart.isPrimaryGroupingByAmount,
                    //savingsProductId: scope.productId,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs)),
                    isActiveChart: 'true'
                }

                //remove empty values
                _.each(newChartData, function (v, k) {
                    if (!v)
                        delete newChartData[k];
                });

                return newChartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives))
                }

                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }

                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (!v && v != 0)
                        delete newChartSlabData[k];
                });

                return newChartSlabData;
            }

            removeEmptyValues = function (objArray) {
                _.each(objArray, function (v, k) {
                    //alert(k + ':' + v);
                    if ((_.isNull(v) || _.isUndefined(v) || v === '') && (k != 'linkAccountId')) {
                        //alert('remove' + k + ':' + v);
                        delete objArray[k];
                    }

                });

                return objArray;
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }

            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                _.each($scope.chartSlab.incentives, function (incentive) {
                    if(!incentive.attributeValueDesc){
                        incentive.attributeValueDesc = incentive.attributeValue;
                    }
                });
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };

        }
    });
    mifosX.ng.application.controller('EditDepositAccountController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter','$uibModal', mifosX.controllers.EditDepositAccountController]).run(function ($log) {
        $log.info("EditDepositAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        FixedDepositAccountActionsController: function (scope, resourceFactory, location, routeParams, dateFilter) {

            scope.action = routeParams.action || "";
            scope.accountId = routeParams.id;
            scope.savingAccountId = routeParams.id;
            scope.formData = {};
            scope.restrictDate = new Date();
            // Transaction UI Related
            scope.isAccountClose = false;
            scope.showPaymentDetails = false;
            scope.paymentTypes = [];
            scope.activationChargeAmount = 0;
            scope.totalAmountIncludingActivationCharge = 0;
            scope.depositAmount = 0;
            if(scope.action=='activate'){
                resourceFactory.fixedDepositAccountResource.get({accountId: scope.savingAccountId, associations:'charges'}, function (data) {
                        scope.totalAmountIncludingActivationCharge = data.depositAmount+parseFloat(data.activationCharge);
                        scope.depositAmount = data.depositAmount;
                        scope.activationChargeAmount = data.activationCharge;
                 });
            }

            switch (scope.action) {
                case "approve":
                    scope.title = 'label.heading.approvefixeddepositaccount';
                    scope.labelName = 'label.input.savingaccountapprovedOnDate';
                    scope.modelName = 'approvedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.actionName = 'Approve application';
                    break;
                case "reject":
                    scope.title = 'label.heading.rejectfixeddepositaccount';
                    scope.labelName = 'label.input.rejectedon';
                    scope.modelName = 'rejectedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.actionName = 'Reject application';
                    break;
                case "withdrawnByApplicant":
                    scope.title = 'label.heading.withdrawnfixeddepositaccount';
                    scope.labelName = 'label.input.withdrawnon';
                    scope.modelName = 'withdrawnOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.actionName = 'Withdrawn by applicant';
                    break;
                case "undoapproval":
                    scope.title = 'label.heading.undoapprovefixeddepositaccount';
                    scope.showDateField = false;
                    scope.showNoteField = true;
                    scope.actionName = 'Undo Approve application';
                    break;
                case "activate":
                    scope.title = 'label.heading.activatefixeddepositaccount';
                    scope.labelName = 'label.input.activatedon';
                    scope.modelName = 'activatedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.actionName = 'Approve application';
                    break;
                /*case "deposit":
                 resourceFactory.savingsTrxnsTemplateResource.get({savingsId:scope.accountId, command:'deposit'}, function (data) {
                 scope.paymentTypes=data.paymentTypeOptions;
                 });
                 scope.title = 'label.heading.depositmoneytosavingaccount';
                 scope.labelName = 'label.input.transactiondate';
                 scope.modelName = 'transactionDate';
                 scope.showDateField = true;
                 scope.showNoteField = false;
                 scope.isTransaction = true;
                 scope.showPaymentDetails = false;
                 break;
                 case "withdrawal":
                 resourceFactory.savingsTrxnsTemplateResource.get({savingsId:scope.accountId, command:'withdrawal'}, function (data) {
                 scope.paymentTypes=data.paymentTypeOptions;
                 });
                 scope.title = 'label.heading.withdrawmoneyfromsavingaccount';
                 scope.labelName = 'label.input.transactiondate';
                 scope.modelName = 'transactionDate';
                 scope.showDateField = true;
                 scope.showNoteField = false;
                 scope.isTransaction = true;
                 scope.showPaymentDetails = false;
                 break;
                 case "applyAnnualFees":
                 resourceFactory.savingsResource.get({accountId : routeParams.id, resourceType : 'charges', chargeId : routeParams.chargeId},
                 function (data) {
                 scope.formData.amount = data.amount;
                 if (data.dueDate) {
                 var dueDate = dateFilter(data.dueDate, scope.df);
                 scope.formData.dueDate = new Date(dueDate);
                 }
                 });
                 scope.title = 'label.heading.savingaccountapplyannualFee';
                 scope.labelName = 'label.input.annualfeetransactiondate';
                 scope.modelName = 'dueDate';
                 scope.showDateField = true;
                 scope.showAnnualAmountField = true;
                 scope.showAmountField = false;
                 scope.showNoteField = false;
                 break;*/
                case "close":
                    resourceFactory.fixedDepositAccountResource.get({accountId: routeParams.id, resourceType: 'template', command: 'close'},
                        function (data) {
                            scope.maturityAmount = data.maturityAmount;
                            scope.onAccountClosureOptions = data.onAccountClosureOptions;
                            scope.savingsAccounts = data.savingsAccounts;
                            scope.paymentTypes = data.paymentTypeOptions;
                            scope.currency = data.currency;
                        });
                    scope.title = 'label.heading.closefixeddepositaccount';
                    scope.labelName = 'label.input.closedon';
                    scope.modelName = 'closedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.isAccountClose = true;
                    break;
                case "prematureClose":
                    scope.title = 'label.heading.prematureclosefixeddepositaccount';
                    scope.labelName = 'label.input.preMatureCloseOnDate';
                    scope.modelName = 'closedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.retrievePreMatureAmount = true;
                    break;
                case "modifytransaction":
                    resourceFactory.fixedDepositTrxnsResource.get({savingsId: scope.accountId, transactionId: routeParams.transactionId, template: 'true'},
                        function (data) {
                            scope.title = 'label.heading.editfixeddepositaccounttransaction';
                            scope.labelName = 'label.input.transactiondate';
                            scope.modelName = 'transactionDate';
                            scope.formData[scope.modelName] = new Date(data.date) || new Date();
                            scope.paymentTypes = data.paymentTypeOptions;
                            scope.formData.transactionAmount = data.amount;
                            if (data.paymentDetailData) {
                                if (data.paymentDetailData.paymentType) {
                                    scope.formData.paymentTypeId = data.paymentDetailData.paymentType.id;
                                }
                                scope.formData.accountNumber = data.paymentDetailData.accountNumber;
                                scope.formData.checkNumber = data.paymentDetailData.checkNumber;
                                scope.formData.routingCode = data.paymentDetailData.routingCode;
                                scope.formData.receiptNumber = data.paymentDetailData.receiptNumber;
                                scope.formData.bankNumber = data.paymentDetailData.bankNumber;
                            }
                        });
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.isTransaction = true;
                    scope.showPaymentDetails = false;
                    scope.showPaymentType = true;
                    scope.showAmount = true;
                    break;
                case "editsavingcharge":
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId},
                        function (data) {
                            scope.formData.amount = data.amount;
                            if (data.feeOnMonthDay) {
                                scope.dateArray = [];
                                scope.dateArray.push(2013)
                                for (var i in data.feeOnMonthDay) {
                                    scope.dateArray.push(data.feeOnMonthDay[i]);
                                }
                                var feeOnMonthDay = dateFilter(scope.dateArray, scope.df);
                                scope.formData.feeOnMonthDayFullDate = new Date(feeOnMonthDay);
                                scope.labelName = 'label.heading.savingaccounttransactionDate';
                                scope.modelName = 'feeOnMonthDayFullDate';
                                scope.showDateField = true;
                                scope.showAnnualAmountField = true;
                                scope.showAmountField = false;
                            } else {
                                scope.labelName = 'label.amount';
                                scope.modelName = 'amount';
                                scope.showDateField = false;
                                scope.showAnnualAmountField = false;
                                scope.showAmountField = true;
                            }
                        });
                    break;
                case "deletesavingcharge":
                    scope.showDelete = true;
                    break;
                case "paycharge":
                    scope.formData.dueDate = new Date();
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId,
                        command: 'paycharge'}, function (data) {
                        scope.formData.amount = data.amountOutstanding;
                    });
                    scope.labelName = 'label.amount';
                    scope.showAmountField = true;
                    scope.paymentDatefield = true;
                    scope.modelName = 'dueDate';
                    break;
                case "waive":
                    scope.waiveCharge = true;
                    break;
            }

            scope.cancel = function () {
                location.path('/viewfixeddepositaccount/' + routeParams.id);
            };

            scope.submit = function () {
                var params = {command: scope.action};
                if (scope.action != "undoapproval") {
                    this.formData.locale = scope.optlang.code;
                    this.formData.dateFormat = scope.df;
                }
                if (scope.action == "deposit" || scope.action == "withdrawal" || scope.action == "modifytransaction") {
                    if (scope.action == "withdrawal") {
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                    } else if (scope.action == "deposit") {
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                    }
                    if (scope.action == "modifytransaction") {
                        params.command = 'modify';
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                        params.transactionId = routeParams.transactionId;
                    }
                    params.savingsId = scope.accountId;
                    resourceFactory.fixedDepositTrxnsResource.save(params, this.formData, function (data) {
                        location.path('/viewfixeddepositaccount/' + data.savingsId);
                    });
                } else if (scope.action == "editsavingcharge") {
                    if (this.formData.feeOnMonthDayFullDate) {
                        this.formData.feeOnMonthDay = dateFilter(this.formData.feeOnMonthDayFullDate, scope.df);
                        this.formData.monthDayFormat = "dd MMM";
                        this.formData.feeOnMonthDay = this.formData.feeOnMonthDay.substring(0, this.formData.feeOnMonthDay.length - 5);
                        delete this.formData.feeOnMonthDayFullDate;
                    }
                    resourceFactory.savingsResource.update({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewfixeddepositaccount/' + data.savingsId);
                        });
                } else if (scope.action == "deletesavingcharge") {
                    resourceFactory.savingsResource.delete({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewfixeddepositaccount/' + data.savingsId);
                        });
                } else if (scope.action == "paycharge" || scope.action == "waive") {
                    params = {accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, command: scope.action};
                    if (this.formData.dueDate) {
                        this.formData.dueDate = dateFilter(this.formData.dueDate, scope.df);
                    }
                    resourceFactory.savingsResource.save(params, this.formData, function (data) {
                        location.path('/viewfixeddepositaccount/' + data.savingsId);
                    });
                } else {
                    params.accountId = scope.accountId;
                    if (scope.action == "approve") {
                        if (this.formData.approvedOnDate) {
                            this.formData.approvedOnDate = dateFilter(this.formData.approvedOnDate, scope.df);
                        }
                    } else if (scope.action == "withdrawnByApplicant") {
                        if (this.formData.withdrawnOnDate) {
                            this.formData.withdrawnOnDate = dateFilter(this.formData.withdrawnOnDate, scope.df);
                        }
                    } else if (scope.action == "reject") {
                        if (this.formData.rejectedOnDate) {
                            this.formData.rejectedOnDate = dateFilter(this.formData.rejectedOnDate, scope.df);
                        }
                    } else if (scope.action == "activate") {
                        if (this.formData.activatedOnDate) {
                            this.formData.activatedOnDate = dateFilter(this.formData.activatedOnDate, scope.df);
                        }
                        /*} else if (scope.action == "applyAnnualFees" || scope.action == "paycharge" || scope.action == "waivecharge") {
                         params = {accountId : routeParams.id, resourceType : 'charges', chargeId : routeParams.chargeId, command : 'paycharge'};
                         if (this.formData.dueDate) {
                         this.formData.dueDate = dateFilter(this.formData.dueDate,scope.df);
                         }*/
                    } else if (scope.action === "close") {
                        if (this.formData.closedOnDate) {
                            this.formData.closedOnDate = dateFilter(this.formData.closedOnDate, scope.df);
                        }
                    } else if (scope.action === "prematureClose") {

                        if (this.formData.closedOnDate) {
                            this.formData.closedOnDate = dateFilter(this.formData.closedOnDate, scope.df);
                        }
                        if (scope.retrievePreMatureAmount) {
                            params = {accountId: routeParams.id, command: 'calculatePrematureAmount'};
                            resourceFactory.fixedDepositAccountResource.save(params, this.formData, function (data) {
                                scope.maturityAmount = data.maturityAmount;
                                scope.onAccountClosureOptions = data.onAccountClosureOptions;
                                scope.savingsAccounts = data.savingsAccounts;
                                scope.paymentTypes = data.paymentTypeOptions;
                                scope.currency = data.currency;
                            });
                            scope.isAccountClose = true;
                            scope.showNoteField = true;
                            scope.retrievePreMatureAmount = false;
                            return;
                        }
                    }

                    resourceFactory.fixedDepositAccountResource.save(params, this.formData, function (data) {
                        location.path('/viewfixeddepositaccount/' + data.savingsId);
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('FixedDepositAccountActionsController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.FixedDepositAccountActionsController]).run(function ($log) {
        $log.info("FixedDepositAccountActionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewFixedDepositAccountDetailsController: function (scope, routeParams, resourceFactory, paginatorService, location, route, dateFilter,$uibModal) {
            scope.isDebit = function (savingsTransactionType) {
                return savingsTransactionType.withdrawal == true || savingsTransactionType.feeDeduction == true || savingsTransactionType.withholdTax == true;
            };

            /***
             * we are using orderBy(https://docs.angularjs.org/api/ng/filter/orderBy) filter to sort fields in ui
             * api returns dates in array format[yyyy, mm, dd], converting the array of dates to date object
             * @param dateFieldName
             */
            scope.convertDateArrayToObject = function(dateFieldName){
                for(var i in scope.savingaccountdetails.transactions){
                    scope.savingaccountdetails.transactions[i][dateFieldName] = new Date(scope.savingaccountdetails.transactions[i].date);
                }
            };

            scope.clickEvent = function (eventName, accountId) {
                eventName = eventName || "";
                switch (eventName) {
                    case "modifyapplication":
                        location.path('/editfixeddepositaccount/' + accountId);
                        break;
                    case "approve":
                        location.path('/fixeddepositaccount/' + accountId + '/approve');
                        break;
                    case "reject":
                        location.path('/fixeddepositaccount/' + accountId + '/reject');
                        break;
                    case "withdrawnbyclient":
                        location.path('/fixeddepositaccount/' + accountId + '/withdrawnByApplicant');
                        break;
                    case "delete":
                        resourceFactory.fixedDepositAccountResource.delete({accountId: accountId}, {}, function (data) {
                            var destination = '/viewgroup/' + data.groupId;
                            if (data.clientId) destination = '/viewclient/' + data.clientId;
                            location.path(destination);
                        });
                        break;
                    case "undoapproval":
                        location.path('/fixeddepositaccount/' + accountId + '/undoapproval');
                        break;
                    case "activate":
                        location.path('/fixeddepositaccount/' + accountId + '/activate');
                        break;
                    case "addcharge":
                        location.path('/fixeddepositaccount/' + accountId + '/charges');
                        break;
                    case "calculateInterest":
                        resourceFactory.fixedDepositAccountResource.save({accountId: accountId, command: 'calculateInterest'}, {}, function (data) {
                            route.reload();
                        });
                        break;
                    case "postInterest":
                        resourceFactory.fixedDepositAccountResource.save({accountId: accountId, command: 'postInterest'}, {}, function (data) {
                            route.reload();
                        });
                        break;
                    /*          case "applyAnnualFees":
                     location.path('/savingaccountcharge/' + accountId + '/applyAnnualFees/' + scope.annualChargeId);
                     break;
                     case "transferFunds":
                     if (scope.savingaccountdetails.clientId) {
                     location.path('/accounttransfers/fromsavings/'+accountId);
                     }
                     break;*/
                    case "close":
                        location.path('/fixeddepositaccount/' + accountId + '/close');
                        break;
                    case "prematureClose":
                        location.path('/fixeddepositaccount/' + accountId + '/prematureClose');
                        break;
                    case "enableWithHoldTax":
                        var changes = {
                            withHoldTax:true
                        };
                        resourceFactory.savingsResource.update({accountId: accountId, command: 'updateWithHoldTax'}, changes, function (data) {
                            route.reload();
                        });
                        break;
                    case "disableWithHoldTax":
                        var changes = {
                            withHoldTax:false
                        };
                        resourceFactory.savingsResource.update({accountId: accountId, command: 'updateWithHoldTax'}, changes, function (data) {
                            route.reload();
                        });
                        break;
                }
            };

            scope.routeTo = function (accountId, transactionId, accountTransfer, transferId) {
                if (accountTransfer) {
                    location.path('/viewaccounttransfers/' + transferId);
                } else {
                    location.path('/viewfixeddepositaccounttrxn/' + accountId + '/' + transactionId);
                }
            };

            resourceFactory.fixedDepositAccountResource.get({accountId: routeParams.id, associations: 'all'}, function (data) {
                scope.savingaccountdetails = data;
                scope.savingaccountdetails.availableBalance = scope.savingaccountdetails.enforceMinRequiredBalance?(scope.savingaccountdetails.summary.accountBalance - scope.savingaccountdetails.minRequiredOpeningBalance):scope.savingaccountdetails.summary.accountBalance;
                scope.convertDateArrayToObject('date');
                scope.chartSlabs = scope.savingaccountdetails.accountChart.chartSlabs;
                scope.status = data.status.value;
                scope.heading = (!scope.savingaccountdetails.status.rejected && !scope.savingaccountdetails.status.submittedAndPendingApproval)?'label.heading.interestchart':'label.heading.summary';
                if (scope.status == "Submitted and pending approval" || scope.status == "Active" || scope.status == "Approved") {
                    scope.choice = true;
                }
                scope.chargeAction = data.status.value == "Submitted and pending approval" ? true : false;
                if (scope.savingaccountdetails.charges) {
                    scope.charges = scope.savingaccountdetails.charges;
                    scope.chargeTableShow = true;
                } else {
                    scope.chargeTableShow = false;
                }
                if (data.status.value == "Submitted and pending approval") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.modifyapplication",
                            icon: "fa fa-pencil "
                        },
                        {
                            name: "button.approve",
                            icon: "fa fa-check"
                        }
                    ],
                        options: [
                            {
                                name: "button.reject"
                            },
                            {
                                name: "button.withdrawnbyclient"
                            },
                            {
                                name: "button.addcharge"
                            },
                            {
                                name: "button.delete"
                            }
                        ]
                    };
                }

                if (data.status.value == "Approved") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.undoapproval",
                            icon: "fa fa-undo"
                        },
                        {
                            name: "button.activate",
                            icon: "fa fa-ok-sign"
                        }
                    ]
                    };
                }

                if (data.status.value == "Active") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.prematureClose",
                            icon: "fa fa-arrow-left"
                        },
                        {
                            name: "button.calculateInterest",
                            icon: "fa fa-table"
                        }
                    ],
                        options: [
                            {
                                name: "button.postInterest"
                            },
                            {
                                name: "button.addcharge"
                            }
                        ]

                    };
                    if(data.taxGroup){
                        if(data.withHoldTax){
                            scope.buttons.options.push({
                                name: "button.disableWithHoldTax",
                                taskPermissionName:"UPDATEWITHHOLDTAX_SAVINGSACCOUNT"
                            });
                        }else{
                            scope.buttons.options.push({
                                name: "button.enableWithHoldTax",
                                taskPermissionName:"UPDATEWITHHOLDTAX_SAVINGSACCOUNT"
                            });
                        }
                    }
                    /*if (data.clientId) {
                     scope.buttons.options.push({
                     name:"button.transferFunds"
                     });
                     }*/

                }else if (data.status.value == "Matured") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.close",
                            icon: "fa fa-arrow-right"
                        },
                        {
                            name: "button.calculateInterest",
                            icon: "fa fa-table"
                        }
                    ],
                        options: [
                            {
                                name: "button.postInterest"
                            },
                            {
                                name: "button.addcharge"
                            }
                        ]

                    };
                    /*if (data.clientId) {
                     scope.buttons.options.push({
                     name:"button.transferFunds"
                     });
                     }*/

                }

                resourceFactory.standingInstructionTemplateResource.get({fromClientId: scope.savingaccountdetails.clientId,fromAccountType: 2,fromAccountId: routeParams.id},function (response) {
                    scope.standinginstruction = response;
                    scope.searchTransaction();
                });
            });

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.fromAccountId = routeParams.id;
                params.fromAccountType = 2;
                params.clientId = scope.savingaccountdetails.clientId;
                params.clientName = scope.savingaccountdetails.clientName;
                params.dateFormat = scope.df;

                resourceFactory.standingInstructionResource.search(params, callback);
            };

            scope.searchTransaction = function () {
                scope.displayResults = true;
                scope.instructions = paginatorService.paginate(fetchFunction, 14);
                scope.isCollapsed = false;
            };

            scope.deletestandinginstruction = function (id) {
                $uibModal.open({
                    templateUrl: 'delInstruction.html',
                    controller: DelInstructionCtrl,
                    resolve: {
                        ids: function () {
                            return id;
                        }
                    }
                });
            };

            var DelInstructionCtrl = function ($scope, $uibModalInstance, ids) {
                $scope.delete = function () {
                    resourceFactory.standingInstructionResource.cancel({standingInstructionId: ids}, function (data) {
                        scope.searchTransaction();
                        $uibModalInstance.close('delete');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            resourceFactory.DataTablesResource.getAllDataTables({apptable: 'm_savings_account'}, function (data) {
                scope.savingdatatables = data;
            });

            scope.dataTableChange = function (datatable) {
                resourceFactory.DataTablesResource.getTableDetails({datatablename: datatable.registeredTableName,
                    entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                    scope.datatabledetails = data;
                    scope.datatabledetails.isData = data.data.length > 0 ? true : false;
                    scope.datatabledetails.isMultirow = data.columnHeaders[0].columnName == "id" ? true : false;
                    scope.singleRow = [];
                    for (var i in data.columnHeaders) {
                        if (scope.datatabledetails.columnHeaders[i].columnCode) {
                            for (var j in scope.datatabledetails.columnHeaders[i].columnValues) {
                                for (var k in data.data) {
                                    if (data.data[k].row[i] == scope.datatabledetails.columnHeaders[i].columnValues[j].id) {
                                        data.data[k].row[i] = scope.datatabledetails.columnHeaders[i].columnValues[j].value;
                                    }
                                }
                            }
                        }
                    }
                    if (scope.datatabledetails.isData) {
                        for (var i in data.columnHeaders) {
                            if (!scope.datatabledetails.isMultirow) {
                                var row = {};
                                row.key = data.columnHeaders[i].columnName;
                                row.value = data.data[0].row[i];
                                scope.singleRow.push(row);
                            }
                        }
                    }
                });
            };

            scope.deleteAll = function (apptableName, entityId) {
                resourceFactory.DataTablesResource.delete({datatablename: apptableName, entityId: entityId, genericResultSet: 'true'}, {}, function (data) {
                    route.reload();
                });
            };

            scope.modifyTransaction = function (accountId, transactionId) {
                location.path('/fixeddepositaccount/' + accountId + '/modifytransaction?transactionId=' + transactionId);
            };

            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        chartSlab: function () {
                            return scope.savingaccountdetails.accountChart.chartSlabs[index];
                        }
                    }
                });
            };

            var IncentiveCtrl = function ($scope, $uibModalInstance, chartSlab) {
                $scope.chartSlab = chartSlab;
                _.each($scope.chartSlab.incentives, function (incentive) {
                    if(!incentive.attributeValueDesc){
                        incentive.attributeValueDesc = incentive.attributeValue;
                    }
                });
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewFixedDepositAccountDetailsController', ['$scope', '$routeParams', 'ResourceFactory', 'PaginatorService', '$location', '$route', 'dateFilter','$uibModal', mifosX.controllers.ViewFixedDepositAccountDetailsController]).run(function ($log) {
        $log.info("ViewFixedDepositAccountDetailsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewFixedDepositTransactionController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.flag = false;
            resourceFactory.fixedDepositTrxnsResource.get({savingsId: routeParams.accountId, transactionId: routeParams.transactionId}, function (data) {
                scope.transaction = data;
                if (scope.transaction.transactionType.value == 'Transfer' || scope.transaction.reversed == 'true') {
                    scope.flag = true;
                }
            });

            scope.undoTransaction = function (accountId, transactionId) {
                var params = {savingsId: accountId, transactionId: transactionId, command: 'undo'};
                var formData = {dateFormat: scope.df, locale: scope.optlang.code, transactionAmount: 0};
                formData.transactionDate = dateFilter(new Date(), scope.df);
                resourceFactory.fixedDepositTrxnsResource.save(params, formData, function (data) {
                    location.path('/viewfixeddepositaccount/' + data.savingsId);
                });
            };
        }
    });
    mifosX.ng.application.controller('ViewFixedDepositTransactionController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.ViewFixedDepositTransactionController]).run(function ($log) {
        $log.info("ViewFixedDepositTransactionController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddNewRecurringDepositChargeController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.offices = [];
            scope.cancelRoute = routeParams.id;
            scope.date = {};

            resourceFactory.savingsChargeResource.get({accountId: routeParams.id, resourceType: 'template'}, function (data) {
                scope.chargeOptions = data.chargeOptions;
            });

            scope.chargeSelected = function (id) {
                resourceFactory.chargeResource.get({chargeId: id, template: 'true'}, function (data) {
                    scope.chargeCalculationType = data.chargeCalculationType.id;
                    scope.chargeTimeType = data.chargeTimeType.id;
                    scope.chargeDetails = data;
                    scope.formData.amount = data.amount;
                    scope.withDrawCharge = data.chargeTimeType.value === "Withdrawal Fee" ? true : false;
                    scope.formData.feeInterval = data.feeInterval;
                    if (data.chargeTimeType.value === "Annual Fee" || data.chargeTimeType.value === "Monthly Fee") {
                        scope.chargeTimeTypeAnnualOrMonth = true;
                    }
                });
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                if (scope.withDrawCharge !== true) {
                    if (scope.chargeTimeTypeAnnualOrMonth === true) {
                        this.formData.monthDayFormat = "dd MMMM";
                        if (scope.date.due) {
                            this.formData.feeOnMonthDay = dateFilter(scope.date.due, 'dd MMMM');
                        } else {
                            this.formData.feeOnMonthDay = "";
                        }
                    } else {
                        this.formData.dateFormat = scope.df;
                        if (scope.date.specificduedate) {
                            this.formData.dueDate = dateFilter(scope.date.specificduedate, scope.df);
                        } else {
                            this.formData.dueDate = "";
                        }
                    }
                }
                resourceFactory.savingsChargeResource.save({accountId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewrecurringdepositaccount/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('AddNewRecurringDepositChargeController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.AddNewRecurringDepositChargeController]).run(function ($log) {
        $log.info("AddNewRecurringDepositChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportRecurringDepositController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/recurringdepositaccounts/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams += '&officeId=' + scope.formData.officeId;
                    }else {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }

            };

            scope.changeStaff = function() {
                if(scope.formData.staffId) {
                    if (scope.first.queryParams.indexOf("staffId")==-1) {
                        scope.first.queryParams = scope.first.queryParams + '&staffId=' + scope.formData.staffId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&staffId=\d+/i,"&staffId="+ scope.formData.staffId);
                    }
                } else {
                    if(scope.formData.officeId)
                        scope.first.queryParams = '&' + 'officeId=' + scope.formData.officeId;
                    else
                        scope.first.queryParams = '&';
                }
            };
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "recurringdeposits"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };
            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/recurringdepositaccounts/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportRecurringDepositController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportRecurringDepositController]).run(function ($log) {
        $log.info("BulkImportRecurringDepositController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportRecurringDepositTransactionsController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/recurringdepositaccounts/transactions/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        scope.first.queryParams += 'officeId=' + scope.formData.officeId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "recurringdepositstransactions"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };

            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };
            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/recurringdepositaccounts/transactions/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportRecurringDepositTransactionsController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportRecurringDepositTransactionsController]).run(function ($log) {
        $log.info("BulkImportRecurringDepositTransactionsController initialized");
    });
}(mifosX.controllers || {}));;    (function (module) {
    mifosX.controllers = _.extend(module, {
        CreateRecurringDepositAccountController: function (scope, resourceFactory, location, routeParams, WizardHandler, dateFilter, uiConfigService, $uibModal) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.restrictDate = new Date();
            scope.recurringDetails = {};
            scope.clientId = routeParams.clientId;
            scope.groupId = routeParams.groupId;
            if (routeParams.centerEntity) {
                scope.centerEntity = true;
            }
            scope.date = {};
			scope.date.submittedOnDate = new Date();
            scope.disabled = true;

            //interest rate chart details
            scope.chart = {};
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting
            //scope.formData.expectedFirstDepositOnDate = {};

            scope.charges = [];
            scope.inparams = {};
            if (scope.clientId) {
                scope.inparams.clientId = scope.clientId
            }
            ;
            if (scope.groupId) {
                scope.inparams.groupId = scope.groupId
            }
            ;
            if (scope.centerId) {
                scope.inparams.centerId = scope.centerId
            }
            ;

            resourceFactory.recurringDepositAccountTemplateResource.get(scope.inparams, function (data) {
                scope.products = data.productOptions;
                scope.chargeOptions = data.chargeOptions;
                scope.clientName = data.clientName;
                scope.groupName = data.groupName;
            });

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
            }

            scope.changeProduct = function () {
                scope.inparams.productId = scope.formData.productId;
                resourceFactory.recurringDepositAccountTemplateResource.get(scope.inparams, function (data) {

                    scope.data = data;
                    scope.charges = data.charges;

                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value === "Annual Fee" && scope.charges[i].feeOnMonthDay) {
                            scope.charges[i].feeOnMonthDay.push('2013');
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        }
                    }
                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                    scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                    scope.formData.withHoldTax = data.withHoldTax;

                    if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                    if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                    if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                    if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                    if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                    if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;
                    if (data.interestFreePeriodApplicable) scope.formData.interestFreePeriodApplicable = data.interestFreePeriodApplicable;
                    if (data.preClosurePenalApplicable) scope.formData.preClosurePenalApplicable = data.preClosurePenalApplicable;

                    scope.disabled = false;
                    scope.recurringDetails = angular.copy(scope.formData);
                    scope.recurringDetails.productName = scope.formValue(scope.products,scope.formData.productId,'id','name');
                    scope.chart = data.accountChart;
                    scope.chartSlabs = scope.chart.chartSlabs;
                    //format chart date values
                    if (scope.chart.fromDate) {
                        var fromDate = dateFilter(scope.chart.fromDate, scope.df);
                        scope.fromDate.date = new Date(fromDate);
                    }
                    if (scope.chart.endDate) {
                        var endDate = dateFilter(scope.chart.endDate, scope.df);
                        scope.endDate.date = new Date(endDate);
                    }

                    var preClosurePenalInterestOnTypeId = (_.isNull(data.preClosurePenalInterestOnType) || _.isUndefined(data.preClosurePenalInterestOnType)) ? '' : data.preClosurePenalInterestOnType.id;
                    var minDepositTermTypeId = (_.isNull(data.minDepositTermType) || _.isUndefined(data.minDepositTermType)) ? '' : data.minDepositTermType.id;
                    var maxDepositTermTypeId = (_.isNull(data.maxDepositTermType) || _.isUndefined(data.maxDepositTermType)) ? '' : data.maxDepositTermType.id;
                    var inMultiplesOfDepositTermTypeId = (_.isNull(data.inMultiplesOfDepositTermType) || _.isUndefined(data.inMultiplesOfDepositTermType)) ? '' : data.inMultiplesOfDepositTermType.id;

                    scope.formData.preClosurePenalApplicable = data.preClosurePenalApplicable;
                    scope.formData.preClosurePenalInterest = data.preClosurePenalInterest;
                    scope.formData.preClosurePenalInterestOnTypeId = preClosurePenalInterestOnTypeId;
                    scope.formData.minDepositTerm = data.minDepositTerm;
                    scope.formData.maxDepositTerm = data.maxDepositTerm;
                    scope.formData.minDepositTermTypeId = minDepositTermTypeId;
                    scope.formData.maxDepositTermTypeId = maxDepositTermTypeId;
                    scope.formData.inMultiplesOfDepositTerm = data.inMultiplesOfDepositTerm;
                    scope.formData.inMultiplesOfDepositTermTypeId = inMultiplesOfDepositTermTypeId;
                    scope.formData.isMandatoryDeposit = data.isMandatoryDeposit;
                    scope.formData.allowWithdrawal = data.allowWithdrawal;
                    //alert(data.allowWithdrawal + '='+ data.isMandatoryDeposit + '='+data.adjustAdvanceTowardsFuturePayments);
                    scope.formData.adjustAdvanceTowardsFuturePayments = data.adjustAdvanceTowardsFuturePayments;
                });
            };

            scope.$watch('formData',function(newVal){
               scope.recurringDetails = angular.extend(scope.recurringDetails,newVal);
            });

            scope.formValue = function(array,model,findattr,retAttr){
                findattr = findattr ? findattr : 'id';
                retAttr = retAttr ? retAttr : 'value';
                console.log(findattr,retAttr,model);
                return _.find(array, function (obj) {
                    return obj[findattr] === model;
                })[retAttr];
            };
            
            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        if (data.chargeTimeType.value == "Annual Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        } else if (data.chargeTimeType.value == "Monthly Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        }
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.submit = function () {
                if (scope.date) {
                    this.formData.submittedOnDate = dateFilter(scope.date.submittedOnDate, scope.df);
                }
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.monthDayFormat = "dd MMM";
                this.formData.charges = [];

                if (scope.clientId) this.formData.clientId = scope.clientId;
                if (scope.groupId) this.formData.groupId = scope.groupId;
                if (scope.centerId) this.formData.centerId = scope.centerId;

                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM')});
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                dueDate: dateFilter(scope.charges[i].dueDate, scope.df)});
                        } else if (scope.charges[i].chargeTimeType.value == 'Monthly Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM'), feeInterval: scope.charges[i].feeInterval});
                        } else {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount});
                        }
                    }
                }

                this.formData.charts = [];//declare charts array
                this.formData.charts.push(copyChartData(scope.chart));//add chart details
                this.formData = removeEmptyValues(this.formData);
                this.formData.isCalendarInherited = (_.isNull(this.formData.isCalendarInherited) || _.isUndefined(this.formData.isCalendarInherited)) ? false : this.formData.isCalendarInherited;

                if (scope.formData.expectedFirstDepositOnDate) {
                    this.formData.expectedFirstDepositOnDate = dateFilter(scope.formData.expectedFirstDepositOnDate, scope.df);
                }


                resourceFactory.recurringDepositAccountResource.save(this.formData, function (data) {
                    location.path('/viewrecurringdepositaccount/' + data.savingsId);
                });
            };

            scope.cancel = function () {
                if (scope.clientId) {
                    location.path('/viewclient/' + scope.clientId);
                } else if (scope.centerEntity) {
                    location.path('/viewcenter/' + scope.groupId);
                } else {
                    location.path('/viewgroup/' + scope.groupId);
                }
            }

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                        amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom,
                    "incentives":[]
                };

                scope.chart.chartSlabs.push(chartSlab);
            }


            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var newChartData = {
                    id: scope.chart.id,
                    name: scope.chart.name,
                    description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.chart.isPrimaryGroupingByAmount,
                    //savingsProductId: scope.productId,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs)),
                    isActiveChart: 'true'
                }

                //remove empty values
                _.each(newChartData, function (v, k) {
                    if (!v)
                        delete newChartData[k];
                });

                return newChartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives))
                }

                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }

                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (!v && v != 0)
                        delete newChartSlabData[k];
                });

                return newChartSlabData;
            }

            removeEmptyValues = function (objArray) {
                _.each(objArray, function (v, k) {
                    //alert(k + ':' + v);
                    if (_.isNull(v) || _.isUndefined(v) || v === '') {
                        //alert('remove' + k + ':' + v);
                        delete objArray[k];
                    }

                });

                return objArray;
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }

            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                _.each($scope.chartSlab.incentives, function (incentive) {
                    if(!incentive.attributeValueDesc){
                        incentive.attributeValueDesc = incentive.attributeValue;
                    }
                });
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };

        }
    });
    mifosX.ng.application.controller('CreateRecurringDepositAccountController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'WizardHandler', 'dateFilter','$uibModal', mifosX.controllers.CreateRecurringDepositAccountController]).run(function ($log) {
        $log.info("CreateRecurringDepositAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditRecurringDepositAccountController: function (scope, resourceFactory, location, routeParams, dateFilter,$uibModal) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.accountId = routeParams.id;
            scope.charges = [];
            scope.restrictDate = new Date();
            scope.formData.expectedFirstDepositOnDate = {};
            //interest rate chart details
            scope.chart = {};
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting

            resourceFactory.recurringDepositAccountResource.get({accountId: scope.accountId, template: 'true', associations: 'charges'}, function (data) {
                scope.data = data;
                scope.charges = data.charges || [];
                if (scope.charges) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == "Monthly Fee") {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            scope.charges[i].dueDate = new Date(dateFilter(scope.charges[i].dueDate, scope.df));
                        }
                    }
                }

                if (data.clientId) {
                    scope.formData.clientId = data.clientId;
                    scope.clientName = data.clientName;
                }
                if (data.groupId) {
                    scope.formData.groupId = data.groupId;
                    scope.groupName = data.groupName;
                }
                scope.formData.productId = data.depositProductId;
                scope.products = data.productOptions;
                if (data.fieldOfficerId != 0)scope.formData.fieldOfficerId = data.fieldOfficerId;
                if (data.timeline) {
                    var submittedOnDate = dateFilter(data.timeline.submittedOnDate, scope.df);
                    scope.formData.submittedOnDate = new Date(submittedOnDate);
                }
                scope.fieldOfficers = data.fieldOfficerOptions;
                scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                scope.formData.mandatoryRecommendedDepositAmount = data.mandatoryRecommendedDepositAmount;
                scope.formData.depositPeriod = data.depositPeriod;
                scope.formData.recurringDepositFrequency = data.recurringDepositFrequency;
                scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                var depositPeriodFrequencyId = (_.isNull(data.depositPeriodFrequency) || _.isUndefined(data.depositPeriodFrequency)) ? '' : data.depositPeriodFrequency.id;
                if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;

                scope.chart = data.accountChart;
                scope.chartSlabs = scope.chart.chartSlabs;
                //format chart date values
                if (scope.chart.fromDate) {
                    var fromDate = dateFilter(scope.chart.fromDate, scope.df);
                    scope.fromDate.date = new Date(fromDate);
                }
                if (scope.chart.endDate) {
                    var endDate = dateFilter(scope.chart.endDate, scope.df);
                    scope.endDate.date = new Date(endDate);
                }

                if (data.expectedFirstDepositOnDate) {
                    var expectedFirstDepositOnDate = dateFilter(data.expectedFirstDepositOnDate, scope.df);
                    scope.formData.expectedFirstDepositOnDate = new Date(expectedFirstDepositOnDate);
                }

                var depositPeriodFrequencyId = (_.isNull(data.depositPeriodFrequency) || _.isUndefined(data.depositPeriodFrequency)) ? '' : data.depositPeriodFrequency.id;
                var preClosurePenalInterestOnTypeId = (_.isNull(data.preClosurePenalInterestOnType) || _.isUndefined(data.preClosurePenalInterestOnType)) ? '' : data.preClosurePenalInterestOnType.id;
                var minDepositTermTypeId = (_.isNull(data.minDepositTermType) || _.isUndefined(data.minDepositTermType)) ? '' : data.minDepositTermType.id;
                var maxDepositTermTypeId = (_.isNull(data.maxDepositTermType) || _.isUndefined(data.maxDepositTermType)) ? '' : data.maxDepositTermType.id;
                var inMultiplesOfDepositTermTypeId = (_.isNull(data.inMultiplesOfDepositTermType) || _.isUndefined(data.inMultiplesOfDepositTermType)) ? '' : data.inMultiplesOfDepositTermType.id;

                scope.formData.depositPeriodFrequencyId = depositPeriodFrequencyId;
                scope.formData.preClosurePenalApplicable = data.preClosurePenalApplicable;
                scope.formData.preClosurePenalInterest = data.preClosurePenalInterest;
                scope.formData.preClosurePenalInterestOnTypeId = preClosurePenalInterestOnTypeId;
                scope.formData.minDepositTerm = data.minDepositTerm;
                scope.formData.maxDepositTerm = data.maxDepositTerm;
                scope.formData.minDepositTermTypeId = minDepositTermTypeId;
                scope.formData.maxDepositTermTypeId = maxDepositTermTypeId;
                scope.formData.inMultiplesOfDepositTerm = data.inMultiplesOfDepositTerm;
                scope.formData.inMultiplesOfDepositTermTypeId = inMultiplesOfDepositTermTypeId;
                scope.formData.isMandatoryDeposit = data.isMandatoryDeposit;
                scope.formData.allowWithdrawal = data.allowWithdrawal;
                scope.formData.adjustAdvanceTowardsFuturePayments = data.adjustAdvanceTowardsFuturePayments;
                scope.formData.isCalendarInherited = data.isCalendarInherited;
                scope.formData.recurringFrequency = data.recurringFrequency;
                scope.formData.recurringFrequencyType = data.recurringFrequencyType.id;
                scope.formData.withHoldTax = data.withHoldTax;
            });

            scope.changeProduct = function () {
                var inparams = {productId: scope.formData.productId};
                if (scope.formData.clientId) inparams.clientId = scope.formData.clientId;
                if (scope.formData.groupId) inparams.groupId = scope.formData.groupId;
                resourceFactory.recurringDepositAccountTemplateResource.get(inparams, function (data) {

                    scope.data = data;

                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                    scope.formData.mandatoryRecommendedDepositAmount = data.mandatoryRecommendedDepositAmount;
                    scope.formData.depositPeriod = data.depositPeriod;
                    scope.formData.recurringDepositFrequency = data.recurringDepositFrequency;
                    scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                    scope.formData.withHoldTax = data.withHoldTax;
                    /* FIX-ME: uncomment annualFeeAmount when datepicker avialable, because it depends on the date field 'annualFeeOnMonthDay'*/
                    //scope.formData.annualFeeAmount = data.annualFeeAmount;
                    //scope.formData.withdrawalFeeAmount = data.withdrawalFeeAmount;
                    //scope.formData.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;

                    if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                    if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                    if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                    if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                    if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                    //if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;

                    scope.chart = data.accountChart;
                    //format chart date values
                    if (scope.chart.fromDate) {
                        var fromDate = dateFilter(scope.chart.fromDate, scope.df);
                        scope.fromDate.date = new Date(fromDate);
                    }
                    if (scope.chart.endDate) {
                        var endDate = dateFilter(scope.chart.endDate, scope.df);
                        scope.endDate.date = new Date(endDate);
                    }

                    var depositPeriodFrequencyId = (_.isNull(data.depositPeriodFrequency) || _.isUndefined(data.depositPeriodFrequency)) ? '' : data.depositPeriodFrequency.id;
                    var preClosurePenalInterestOnTypeId = (_.isNull(data.preClosurePenalInterestOnType) || _.isUndefined(data.preClosurePenalInterestOnType)) ? '' : data.preClosurePenalInterestOnType.id;
                    var minDepositTermTypeId = (_.isNull(data.minDepositTermType) || _.isUndefined(data.minDepositTermType)) ? '' : data.minDepositTermType.id;
                    var maxDepositTermTypeId = (_.isNull(data.maxDepositTermType) || _.isUndefined(data.maxDepositTermType)) ? '' : data.maxDepositTermType.id;
                    var inMultiplesOfDepositTermTypeId = (_.isNull(data.inMultiplesOfDepositTermType) || _.isUndefined(data.inMultiplesOfDepositTermType)) ? '' : data.inMultiplesOfDepositTermType.id;

                    scope.formData.depositPeriodFrequencyId = depositPeriodFrequencyId;
                    scope.formData.interestFreePeriodApplicable = data.interestFreePeriodApplicable;
                    scope.formData.interestFreeFromPeriod = data.interestFreeFromPeriod;
                    scope.formData.interestFreeToPeriod = data.interestFreeToPeriod;
                    scope.formData.interestFreePeriodFrequencyTypeId = interestFreePeriodFrequencyTypeId;
                    scope.formData.preClosurePenalApplicable = data.preClosurePenalApplicable;
                    scope.formData.preClosurePenalInterest = data.preClosurePenalInterest;
                    scope.formData.preClosurePenalInterestOnTypeId = preClosurePenalInterestOnTypeId;
                    scope.formData.minDepositTerm = data.minDepositTerm;
                    scope.formData.maxDepositTerm = data.maxDepositTerm;
                    scope.formData.minDepositTermTypeId = minDepositTermTypeId;
                    scope.formData.maxDepositTermTypeId = maxDepositTermTypeId;
                    scope.formData.inMultiplesOfDepositTerm = data.inMultiplesOfDepositTerm;
                    scope.formData.inMultiplesOfDepositTermTypeId = inMultiplesOfDepositTermTypeId;
                    scope.formData.isMandatoryDeposit = data.isMandatoryDeposit;
                    scope.formData.allowWithdrawal = data.allowWithdrawal;
                    scope.formData.adjustAdvanceTowardsFuturePayments = data.adjustAdvanceTowardsFuturePayments;
                    scope.formData.isCalendarInherited = data.isCalendarInherited;
                });
            }

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        if (data.chargeTimeType.value == "Annual Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        } else if (data.chargeTimeType.value == "Monthly Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        }

                        delete data.id;
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/viewsavingaccount/' + scope.accountId);
            }

            scope.submit = function () {
                if (this.formData.submittedOnDate)  this.formData.submittedOnDate = dateFilter(this.formData.submittedOnDate, scope.df);
                if (this.formData.expectedFirstDepositOnDate)  this.formData.expectedFirstDepositOnDate = dateFilter(this.formData.expectedFirstDepositOnDate, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.monthDayFormat = "dd MMM";
                scope.formData.charges = [];
                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM')});
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                dueDate: dateFilter(scope.charges[i].dueDate, scope.df)});
                        } else if (scope.charges[i].chargeTimeType.value == 'Monthly Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM'), feeInterval: scope.charges[i].feeInterval});
                        } else {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount});
                        }
                    }
                }

                this.formData.charts = [];//declare charts array
                this.formData.charts.push(copyChartData(scope.chart));//add chart details
                this.formData = removeEmptyValues(this.formData);

                resourceFactory.recurringDepositAccountResource.update({'accountId': scope.accountId}, this.formData, function (data) {
                    location.path('/viewrecurringdepositaccount/' + data.savingsId);
                });
            };

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                        amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom
                };

                scope.chart.chartSlabs.push(chartSlab);
            }


            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var newChartData = {
                    id: scope.chart.id,
                    name: scope.chart.name,
                    description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.chart.isPrimaryGroupingByAmount,
                    //savingsProductId: scope.productId,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs)),
                    isActiveChart: 'true'
                }

                //remove empty values
                _.each(newChartData, function (v, k) {
                    if (!v)
                        delete newChartData[k];
                });

                return newChartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives))
                }

                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }

                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (!v && v != 0)
                        delete newChartSlabData[k];
                });

                return newChartSlabData;
            }

            removeEmptyValues = function (objArray) {
                _.each(objArray, function (v, k) {
                    //alert(k + ':' + v);
                    if (_.isNull(v) || _.isUndefined(v) || v === '') {
                        //alert('remove' + k + ':' + v);
                        delete objArray[k];
                    }

                });

                return objArray;
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }

            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                _.each($scope.chartSlab.incentives, function (incentive) {
                    if(!incentive.attributeValueDesc){
                        incentive.attributeValueDesc = incentive.attributeValue;
                    }
                });
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };

        }
    });
    mifosX.ng.application.controller('EditRecurringDepositAccountController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter','$uibModal', mifosX.controllers.EditRecurringDepositAccountController]).run(function ($log) {
        $log.info("EditRecurringDepositAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        RecurringDepositAccountActionsController: function (scope, resourceFactory, location, routeParams, dateFilter) {

            scope.action = routeParams.action || "";
            scope.accountId = routeParams.id;
            scope.savingAccountId = routeParams.id;
            scope.formData = {};
            scope.restrictDate = new Date();
            // Transaction UI Related
            scope.isAccountClose = false;
            scope.showPaymentDetails = false;
            scope.paymentTypes = [];

            switch (scope.action) {
                case "approve":
                    scope.title = 'label.heading.approverecurringdepositaccount';
                    scope.labelName = 'label.input.savingaccountapprovedOnDate';
                    scope.modelName = 'approvedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.actionName = 'Approve application';
                    break;
                case "reject":
                    scope.title = 'label.heading.rejectrecurringdepositaccount';
                    scope.labelName = 'label.input.rejectedon';
                    scope.modelName = 'rejectedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.actionName = 'Reject application';
                    break;
                case "withdrawnByApplicant":
                    scope.title = 'label.heading.withdrawnrecurringdepositaccount';
                    scope.labelName = 'label.input.withdrawnon';
                    scope.modelName = 'withdrawnOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.actionName = 'Withdrawn by applicant';
                    break;
                case "undoapproval":
                    scope.title = 'label.heading.undoapproverecurringdepositaccount';
                    scope.showDateField = false;
                    scope.showNoteField = true;
                    scope.actionName = 'Undo Approve application';
                    break;
                case "activate":
                    scope.title = 'label.heading.activaterecurringdepositaccount';
                    scope.labelName = 'label.input.activatedon';
                    scope.modelName = 'activatedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.actionName = 'Approve application';
                    break;
                case "deposit":
                    resourceFactory.recurringDepositTrxnsTemplateResource.get({savingsId: scope.accountId, command: 'deposit'}, function (data) {
                        scope.amount = data.amount;
                        scope.formData.transactionAmount = data.amount;
                        if(data.outstandingChargeAmount && data.outstandingChargeAmount > 0){
                            scope.outstandingChargeAmount = data.outstandingChargeAmount;
                            scope.formData.transactionAmount = scope.formData.transactionAmount + scope.outstandingChargeAmount;
                        }
                        scope.paymentTypes = data.paymentTypeOptions;
                        scope.formData.transactionDate=new Date(dateFilter(data.date, scope.df));
                    });
                    scope.title = 'label.heading.depositmoneytorecurringaccount';
                    scope.labelName = 'label.input.transactiondate';
                    scope.modelName = 'transactionDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.isTransaction = true;
                    scope.showPaymentDetails = false;
                    scope.showPaymentType=true;
                    scope.showAmount=true;
                    break;
                case "withdrawal":
                    resourceFactory.recurringDepositTrxnsTemplateResource.get({savingsId: scope.accountId, command: 'withdrawal'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        scope.formData.transactionAmount = data.amount;
                        scope.formData.transactionDate=new Date(dateFilter(data.date, scope.df));
                    });
                    scope.title = 'label.heading.withdrawmoneyfromsavingaccount';
                    scope.labelName = 'label.input.transactiondate';
                    scope.modelName = 'transactionDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.isTransaction = true;
                    scope.showPaymentDetails = false;
                    scope.showPaymentType=true;
                    scope.showAmount=true;
                    break;
                case "applyAnnualFees":
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId},
                        function (data) {
                            scope.formData.amount = data.amount;
                            if (data.dueDate) {
                                var dueDate = dateFilter(data.dueDate, scope.df);
                                scope.formData.dueDate = new Date(dueDate);
                            }
                        });
                    scope.title = 'label.heading.savingaccountapplyannualFee';
                    scope.labelName = 'label.input.annualfeetransactiondate';
                    scope.modelName = 'dueDate';
                    scope.showDateField = true;
                    scope.showAnnualAmountField = true;
                    scope.showAmountField = false;
                    scope.showNoteField = false;
                    break;
                case "close":
                    resourceFactory.recurringDepositAccountResource.get({accountId: routeParams.id, resourceType: 'template', command: 'close'},
                        function (data) {
                            scope.maturityAmount = data.maturityAmount;
                            scope.onAccountClosureOptions = data.onAccountClosureOptions;
                            scope.savingsAccounts = data.savingsAccounts;
                            scope.paymentTypes = data.paymentTypeOptions;
                            scope.currency = data.currency;
                            if(data.maturityAmount){
                                scope.title = 'label.heading.closerecurringdepositaccount';
                            } else{
                                scope.title = 'label.heading.closeopenrecurringdepositaccount';
                            }
                        });

                    scope.labelName = 'label.input.closedon';
                    scope.modelName = 'closedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.isAccountClose = true;
                    scope.showPaymentType=true;
                    break;
                case "prematureClose":
                    scope.title = 'label.heading.prematurecloserecurringdepositaccount';
                    scope.labelName = 'label.input.closedon';
                    scope.modelName = 'closedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.retrievePreMatureAmount = true;
                    scope.showPaymentType=false;
                    break;
                case "modifytransaction":
                    resourceFactory.recurringDepositTrxnsResource.get({savingsId: scope.accountId, transactionId: routeParams.transactionId, template: 'true'},
                        function (data) {
                            scope.title = 'label.heading.editrecurringdepositaccounttransaction';
                            scope.labelName = 'label.input.transactiondate';
                            scope.modelName = 'transactionDate';
                            scope.formData[scope.modelName] = new Date(data.date) || new Date();
                            scope.paymentTypes = data.paymentTypeOptions;
                            scope.formData.transactionAmount = data.amount;
                            if (data.paymentDetailData) {
                                if (data.paymentDetailData.paymentType) {
                                    scope.formData.paymentTypeId = data.paymentDetailData.paymentType.id;
                                }
                                scope.formData.accountNumber = data.paymentDetailData.accountNumber;
                                scope.formData.checkNumber = data.paymentDetailData.checkNumber;
                                scope.formData.routingCode = data.paymentDetailData.routingCode;
                                scope.formData.receiptNumber = data.paymentDetailData.receiptNumber;
                                scope.formData.bankNumber = data.paymentDetailData.bankNumber;
                            }
                        });
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.isTransaction = true;
                    scope.showPaymentDetails = false;
                    scope.showPaymentType=true;
                    scope.showAmount=true;
                    break;
                case "editsavingcharge":
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId},
                        function (data) {
                            scope.formData.amount = data.amount;
                            if (data.feeOnMonthDay) {
                                scope.dateArray = [];
                                scope.dateArray.push(2013)
                                for (var i in data.feeOnMonthDay) {
                                    scope.dateArray.push(data.feeOnMonthDay[i]);
                                }
                                var feeOnMonthDay = dateFilter(scope.dateArray, scope.df);
                                scope.formData.feeOnMonthDayFullDate = new Date(feeOnMonthDay);
                                scope.labelName = 'label.heading.savingaccounttransactionDate';
                                scope.modelName = 'feeOnMonthDayFullDate';
                                scope.showDateField = true;
                                scope.showAnnualAmountField = true;
                                scope.showAmountField = false;
                            } else {
                                scope.labelName = 'label.amount';
                                scope.modelName = 'amount';
                                scope.showDateField = false;
                                scope.showAnnualAmountField = false;
                                scope.showAmountField = true;
                            }
                        });
                    break;
                case "deletesavingcharge":
                    scope.showDelete = true;
                    break;
                case "paycharge":
                    scope.formData.dueDate = new Date();
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId,
                        command: 'paycharge'}, function (data) {
                        scope.formData.amount = data.amountOutstanding;
                    });
                    scope.labelName = 'label.amount';
                    scope.showAmountField = true;
                    scope.paymentDatefield = true;
                    scope.modelName = 'dueDate';
                    break;
                case "waive":
                    scope.waiveCharge = true;
                    break;
            }

            scope.cancel = function () {
                location.path('/viewrecurringdepositaccount/' + routeParams.id);
            };

            scope.submit = function () {
                var params = {command: scope.action};
                if (scope.action != "undoapproval") {
                    this.formData.locale = scope.optlang.code;
                    this.formData.dateFormat = scope.df;
                }
                if (scope.action == "deposit" || scope.action == "modifytransaction" || scope.action == "withdrawal") {
                    if (scope.action == "deposit") {
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                        params.command = 'deposit';
                    } else  if (scope.action == "withdrawal") {
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                        params.command = 'withdrawal';
                    }
                    if (scope.action == "modifytransaction") {
                        params.command = 'modify';
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                        params.transactionId = routeParams.transactionId;
                    }
                    params.savingsId = scope.accountId;
                    resourceFactory.recurringDepositTrxnsResource.save(params, this.formData, function (data) {
                        location.path('/viewrecurringdepositaccount/' + data.savingsId);
                    });
                } else if (scope.action == "editsavingcharge") {
                    if (this.formData.feeOnMonthDayFullDate) {
                        this.formData.feeOnMonthDay = dateFilter(this.formData.feeOnMonthDayFullDate, scope.df);
                        this.formData.monthDayFormat = "dd MMM";
                        this.formData.feeOnMonthDay = this.formData.feeOnMonthDay.substring(0, this.formData.feeOnMonthDay.length - 5);
                        delete this.formData.feeOnMonthDayFullDate;
                    }
                    resourceFactory.savingsResource.update({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewrecurringdepositaccount/' + data.savingsId);
                        });
                } else if (scope.action == "deletesavingcharge") {
                    resourceFactory.savingsResource.delete({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewrecurringdepositaccount/' + data.savingsId);
                        });
                } else if (scope.action == "paycharge" || scope.action == "waive") {
                    params = {accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, command: scope.action};
                    if (this.formData.dueDate) {
                        this.formData.dueDate = dateFilter(this.formData.dueDate, scope.df);
                    }
                    resourceFactory.savingsResource.save(params, this.formData, function (data) {
                        location.path('/viewrecurringdepositaccount/' + data.savingsId);
                    });
                } else {
                    params.accountId = scope.accountId;
                    if (scope.action == "approve") {
                        if (this.formData.approvedOnDate) {
                            this.formData.approvedOnDate = dateFilter(this.formData.approvedOnDate, scope.df);
                        }
                    } else if (scope.action == "withdrawnByApplicant") {
                        if (this.formData.withdrawnOnDate) {
                            this.formData.withdrawnOnDate = dateFilter(this.formData.withdrawnOnDate, scope.df);
                        }
                    } else if (scope.action == "reject") {
                        if (this.formData.rejectedOnDate) {
                            this.formData.rejectedOnDate = dateFilter(this.formData.rejectedOnDate, scope.df);
                        }
                    } else if (scope.action == "activate") {
                        if (this.formData.activatedOnDate) {
                            this.formData.activatedOnDate = dateFilter(this.formData.activatedOnDate, scope.df);
                        }
                        /*} else if (scope.action == "applyAnnualFees" || scope.action == "paycharge" || scope.action == "waivecharge") {
                         params = {accountId : routeParams.id, resourceType : 'charges', chargeId : routeParams.chargeId, command : 'paycharge'};
                         if (this.formData.dueDate) {
                         this.formData.dueDate = dateFilter(this.formData.dueDate,scope.df);
                         }*/
                    } else if (scope.action === "close") {
                        if (this.formData.closedOnDate) {
                            this.formData.closedOnDate = dateFilter(this.formData.closedOnDate, scope.df);
                        }
                    } else if (scope.action === "prematureClose") {
                        if (this.formData.closedOnDate) {
                            this.formData.closedOnDate = dateFilter(this.formData.closedOnDate, scope.df);
                        }
                        if (scope.retrievePreMatureAmount) {
                            params = {accountId: routeParams.id, command: 'calculatePrematureAmount'};
                            resourceFactory.recurringDepositAccountResource.save(params, this.formData, function (data) {
                                scope.maturityAmount = data.maturityAmount;
                                scope.onAccountClosureOptions = data.onAccountClosureOptions;
                                scope.savingsAccounts = data.savingsAccounts;
                                scope.paymentTypes = data.paymentTypeOptions;
                                scope.currency = data.currency;
                            });
                            scope.isAccountClose = true;
                            scope.showNoteField = true;
                            scope.retrievePreMatureAmount = false;
                            scope.showPaymentType=true;
                            return;
                        }
                    }

                    resourceFactory.recurringDepositAccountResource.save(params, this.formData, function (data) {
                        location.path('/viewrecurringdepositaccount/' + data.savingsId);
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('RecurringDepositAccountActionsController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.RecurringDepositAccountActionsController]).run(function ($log) {
        $log.info("RecurringDepositAccountActionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewRecurringDepositAccountDetailsController: function (scope, routeParams, resourceFactory, paginatorService, location, route, dateFilter,$uibModal) {
            scope.isDebit = function (savingsTransactionType) {
                return savingsTransactionType.withdrawal == true || savingsTransactionType.feeDeduction == true || savingsTransactionType.withholdTax == true;
            };

            /***
             * we are using orderBy(https://docs.angularjs.org/api/ng/filter/orderBy) filter to sort fields in ui
             * api returns dates in array format[yyyy, mm, dd], converting the array of dates to date object
             * @param dateFieldName
             */
            scope.convertDateArrayToObject = function(dateFieldName){
                for(var i in scope.savingaccountdetails.transactions){
                    scope.savingaccountdetails.transactions[i][dateFieldName] = new Date(scope.savingaccountdetails.transactions[i].date);
                }
            };
            scope.clickEvent = function (eventName, accountId) {
                eventName = eventName || "";
                switch (eventName) {
                    case "modifyapplication":
                        location.path('/editrecurringdepositaccount/' + accountId);
                        break;
                    case "approve":
                        location.path('/recurringdepositaccount/' + accountId + '/approve');
                        break;
                    case "reject":
                        location.path('/recurringdepositaccount/' + accountId + '/reject');
                        break;
                    case "withdrawnbyclient":
                        location.path('/recurringdepositaccount/' + accountId + '/withdrawnByApplicant');
                        break;
                    case "delete":
                        resourceFactory.recurringDepositAccountResource.delete({accountId: accountId}, {}, function (data) {
                            var destination = '/viewgroup/' + data.groupId;
                            if (data.clientId) destination = '/viewclient/' + data.clientId;
                            location.path(destination);
                        });
                        break;
                    case "undoapproval":
                        location.path('/recurringdepositaccount/' + accountId + '/undoapproval');
                        break;
                    case "activate":
                        location.path('/recurringdepositaccount/' + accountId + '/activate');
                        break;
                    case "deposit":
                        location.path('/recurringdepositaccount/' + accountId + '/deposit');
                        break;
                    case "withdraw":
                        location.path('/recurringdepositaccount/' + accountId + '/withdrawal');
                        break;
                    case "addcharge":
                        location.path('/recurringdepositaccount/' + accountId + '/charges');
                        break;
                    case "calculateInterest":
                        resourceFactory.recurringDepositAccountResource.save({accountId: accountId, command: 'calculateInterest'}, {}, function (data) {
                            route.reload();
                        });
                        break;
                    case "postInterest":
                        resourceFactory.recurringDepositAccountResource.save({accountId: accountId, command: 'postInterest'}, {}, function (data) {
                            route.reload();
                        });
                        break;
                    /*case "applyAnnualFees":
                        location.path('/savingaccountcharge/' + accountId + '/applyAnnualFees/' + scope.annualChargeId);
                        break;
                    case "transferFunds":
                        if (scope.savingaccountdetails.clientId) {
                            location.path('/accounttransfers/fromsavings/' + accountId);
                        }
                        break;*/
                    case "close":
                        location.path('/recurringdepositaccount/' + accountId + '/close');
                        break;
                    case "prematureClose":
                        location.path('/recurringdepositaccount/' + accountId + '/prematureClose');
                        break;
                    case "enableWithHoldTax":
                        var changes = {
                            withHoldTax:true
                        };
                        resourceFactory.savingsResource.update({accountId: accountId, command: 'updateWithHoldTax'}, changes, function (data) {
                            route.reload();
                        });
                        break;
                    case "disableWithHoldTax":
                        var changes = {
                            withHoldTax:false
                        };
                        resourceFactory.savingsResource.update({accountId: accountId, command: 'updateWithHoldTax'}, changes, function (data) {
                            route.reload();
                        });
                        break;
                }
            };

            resourceFactory.recurringDepositAccountResource.get({accountId: routeParams.id, associations: 'all'}, function (data) {
                scope.savingaccountdetails = data;
                scope.savingaccountdetails.availableBalance = scope.savingaccountdetails.enforceMinRequiredBalance?(scope.savingaccountdetails.summary.accountBalance - scope.savingaccountdetails.minRequiredOpeningBalance):scope.savingaccountdetails.summary.accountBalance;
                scope.convertDateArrayToObject('date');
                scope.chartSlabs = scope.savingaccountdetails.accountChart.chartSlabs;
                scope.isprematureAllowed = data.maturityDate != null;
                scope.status = data.status.value;
                scope.heading = (!scope.savingaccountdetails.status.rejected && !scope.savingaccountdetails.status.submittedAndPendingApproval)?'label.heading.interestchart':'label.heading.summary';
                if (scope.status == "Submitted and pending approval" || scope.status == "Active" || scope.status == "Approved") {
                    scope.choice = true;
                }
                scope.chargeAction = data.status.value == "Submitted and pending approval" ? true : false;
                if (scope.savingaccountdetails.charges) {
                    scope.charges = scope.savingaccountdetails.charges;
                    scope.chargeTableShow = true;
                } else {
                    scope.chargeTableShow = false;
                }
                if (data.status.value == "Submitted and pending approval") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.modifyapplication",
                            icon: "fa fa-pencil "
                        },
                        {
                            name: "button.approve",
                            icon: "fa fa-check"
                        }
                    ],
                        options: [
                            {
                                name: "button.reject"
                            },
                            {
                                name: "button.withdrawnbyclient"
                            },
                            {
                                name: "button.addcharge"
                            },
                            {
                                name: "button.delete"
                            }
                        ]
                    };
                }

                if (data.status.value == "Approved") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.undoapproval",
                            icon: "fa fa-undo"
                        },
                        {
                            name: "button.activate",
                            icon: "fa fa-check"
                        }
                    ]
                    };
                }

                if (data.status.value == "Active") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.deposit",
                            icon: "fa fa-arrow-right"
                        },
                        {
                            name: "button.prematureClose",
                            icon: "fa fa-arrow-left"
                        },
                        {
                            name: "button.calculateInterest",
                            icon: "fa fa-table"
                        }
                    ],
                        options: [
                            {
                                name: "button.postInterest"
                            },
                            {
                                name: "button.addcharge"
                            }
                        ]

                    };

                    if (data.allowWithdrawal == true) {
                        scope.buttons.options.push({
                            name: "button.withdraw"
                        });
                    }
                    if (data.charges) {
                        for (var i in scope.charges) {
                            if (scope.charges[i].name == "Annual fee - INR") {
                                scope.buttons.options.push({
                                    name: "button.applyAnnualFees"
                                });
                                scope.annualChargeId = scope.charges[i].id;
                            }
                        }
                    }

                    if(!scope.isprematureAllowed){
                        scope.buttons.singlebuttons[1] = {
                            name: "button.close",
                            icon: "fa fa-arrow-right"
                        };
                    }

                    if(data.taxGroup){
                        if(data.withHoldTax){
                            scope.buttons.options.push({
                                name: "button.disableWithHoldTax",
                                taskPermissionName:"UPDATEWITHHOLDTAX_SAVINGSACCOUNT"
                            });
                        }else{
                            scope.buttons.options.push({
                                name: "button.enableWithHoldTax",
                                taskPermissionName:"UPDATEWITHHOLDTAX_SAVINGSACCOUNT"
                            });
                        }
                    }

                }

                if (data.status.value == "Matured") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.close",
                            icon: "fa fa-arrow-right"
                        },
                        {
                            name: "button.calculateInterest",
                            icon: "fa fa-table"
                        },
                        {
                            name: "button.postInterest",
                            icon: "fa fa-table"
                        }
                    ],
                        options: [
                            {
                                name: "button.addcharge"
                            }
                        ]

                    };
                    if (data.clientId) {
                        scope.buttons.options.push({
                            name: "button.transferFunds"
                        });
                    }
                    if (data.charges) {
                        for (var i in scope.charges) {
                            if (scope.charges[i].name == "Annual fee - INR") {
                                scope.buttons.options.push({
                                    name: "button.applyAnnualFees"
                                });
                                scope.annualChargeId = scope.charges[i].id;
                            }
                        }
                    }
                }


                /*var annualdueDate = [];
                 annualdueDate = data.annualFee.feeOnMonthDay;
                 annualdueDate.push(2013);
                 scope.annualdueDate = new Date(annualdueDate);*/
                resourceFactory.standingInstructionTemplateResource.get({fromClientId: scope.savingaccountdetails.clientId,fromAccountType: 2,fromAccountId: routeParams.id},function (response) {
                    scope.standinginstruction = response;
                    scope.searchTransaction();
                });
            });

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.fromAccountId = routeParams.id;
                params.fromAccountType = 2;
                params.clientId = scope.savingaccountdetails.clientId;
                params.clientName = scope.savingaccountdetails.clientName;
                params.dateFormat = scope.df;

                resourceFactory.standingInstructionResource.search(params, callback);
            };

            scope.searchTransaction = function () {
                scope.displayResults = true;
                scope.instructions = paginatorService.paginate(fetchFunction, 14);
                scope.isCollapsed = false;
            };

            scope.deletestandinginstruction = function (id) {
                $uibModal.open({
                    templateUrl: 'delInstruction.html',
                    controller: DelInstructionCtrl,
                    resolve: {
                        ids: function () {
                            return id;
                        }
                    }
                });
            };

            var DelInstructionCtrl = function ($scope, $uibModalInstance, ids) {
                $scope.delete = function () {
                    resourceFactory.standingInstructionResource.cancel({standingInstructionId: ids}, function (data) {
                        scope.searchTransaction();
                        $uibModalInstance.close('delete');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            resourceFactory.DataTablesResource.getAllDataTables({apptable: 'm_savings_account'}, function (data) {
                scope.savingdatatables = data;
            });

            scope.routeTo = function (accountId, transactionId, accountTransfer, transferId) {
                if (accountTransfer) {
                    location.path('/viewaccounttransfers/' + transferId);
                } else {
                    location.path('/viewrecurringdepositaccounttrxn/' + accountId + '/' + transactionId);
                }
            };

            scope.dataTableChange = function (datatable) {
                resourceFactory.DataTablesResource.getTableDetails({datatablename: datatable.registeredTableName,
                    entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                    scope.datatabledetails = data;
                    scope.datatabledetails.isData = data.data.length > 0 ? true : false;
                    scope.datatabledetails.isMultirow = data.columnHeaders[0].columnName == "id" ? true : false;
                    scope.singleRow = [];
                    for (var i in data.columnHeaders) {
                        if (scope.datatabledetails.columnHeaders[i].columnCode) {
                            for (var j in scope.datatabledetails.columnHeaders[i].columnValues) {
                                for (var k in data.data) {
                                    if (data.data[k].row[i] == scope.datatabledetails.columnHeaders[i].columnValues[j].id) {
                                        data.data[k].row[i] = scope.datatabledetails.columnHeaders[i].columnValues[j].value;
                                    }
                                }
                            }
                        }
                    }
                    if (scope.datatabledetails.isData) {
                        for (var i in data.columnHeaders) {
                            if (!scope.datatabledetails.isMultirow) {
                                var row = {};
                                row.key = data.columnHeaders[i].columnName;
                                row.value = data.data[0].row[i];
                                scope.singleRow.push(row);
                            }
                        }
                    }
                });
            };

            scope.deleteAll = function (apptableName, entityId) {
                resourceFactory.DataTablesResource.delete({datatablename: apptableName, entityId: entityId, genericResultSet: 'true'}, {}, function (data) {
                    route.reload();
                });
            };

            scope.modifyTransaction = function (accountId, transactionId) {
                location.path('/recurringdepositaccount/' + accountId + '/modifytransaction?transactionId=' + transactionId);
            };

            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        chartSlab: function () {
                            return scope.savingaccountdetails.accountChart.chartSlabs[index];
                        }
                    }
                });
            };

            var IncentiveCtrl = function ($scope, $uibModalInstance, chartSlab) {
                $scope.chartSlab = chartSlab;
                _.each($scope.chartSlab.incentives, function (incentive) {
                    if(!incentive.attributeValueDesc){
                        incentive.attributeValueDesc = incentive.attributeValue;
                    }
                });
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.transactionSort = {
                column: 'date',
                descending: true
            };
            scope.changeTransactionSort = function(column) {
                var sort = scope.transactionSort;
                if (sort.column == column) {
                    sort.descending = !sort.descending;
                } else {
                    sort.column = column;
                    sort.descending = true;
                }
            };

        }
    });
    mifosX.ng.application.controller('ViewRecurringDepositAccountDetailsController', ['$scope', '$routeParams', 'ResourceFactory', 'PaginatorService', '$location', '$route', 'dateFilter','$uibModal', mifosX.controllers.ViewRecurringDepositAccountDetailsController]).run(function ($log) {
        $log.info("ViewRecurringDepositAccountDetailsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewRecurringDepositTransactionController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.flag = false;
            resourceFactory.recurringDepositTrxnsResource.get({savingsId: routeParams.accountId, transactionId: routeParams.transactionId}, function (data) {
                scope.transaction = data;
                if (scope.transaction.transactionType.value == 'Transfer' || scope.transaction.reversed == 'true') {
                    scope.flag = true;
                }
            });

            scope.undoTransaction = function (accountId, transactionId) {
                var params = {savingsId: accountId, transactionId: transactionId, command: 'undo'};
                var formData = {dateFormat: scope.df, locale: scope.optlang.code, transactionAmount: 0};
                formData.transactionDate = dateFilter(new Date(), scope.df);
                resourceFactory.recurringDepositTrxnsResource.save(params, formData, function (data) {
                    location.path('/viewrecurringdepositaccount/' + data.savingsId);
                });
            };
        }
    });
    mifosX.ng.application.controller('ViewRecurringDepositTransactionController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.ViewRecurringDepositTransactionController]).run(function ($log) {
        $log.info("ViewRecurringDepositTransactionController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddRoleController: function (scope, routeParams, location, resourceFactory) {
            scope.formData = {};
            resourceFactory.groupResource.get({groupId: routeParams.id, associations: 'all', template: 'true'}, function (data) {
                scope.group = data;
                scope.clients = data.clientMembers;
                scope.roles = data.availableRoles;
                scope.formData.clientId = data.clientMembers[0].id;
                scope.formData.role = data.availableRoles[0].id;
            });

            scope.addrole = function () {
                resourceFactory.groupResource.save({groupId: routeParams.id, command: 'assignRole'}, this.formData, function (data) {
                    location.path('/viewgroup/' + data.groupId);
                });
            };

        }
    });
    mifosX.ng.application.controller('AddRoleController', ['$scope', '$routeParams', '$location', 'ResourceFactory', mifosX.controllers.AddRoleController]).run(function ($log) {
        $log.info("AddRoleController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        AssignStaffController: function (scope, resourceFactory, location, routeParams) {
            scope.group = [];
            scope.staff = [];
            scope.formData = {};
            resourceFactory.assignStaffResource.get({groupOrCenter: routeParams.entityType, groupOrCenterId: routeParams.id, template: 'true',staffInSelectedOfficeOnly:true}, function (data) {
                scope.group = data;
                scope.staffs = data.staffOptions;
                scope.formData.staffId = data.staffOptions[0].id;
            });
            scope.assignStaff = function () {

                if (routeParams.entityType == "groups") {
                    scope.r = "viewgroup/";
                }
                else if (routeParams.entityType == "centers") {
                    scope.r = "viewcenter/";
                }
                resourceFactory.assignStaffResource.save({groupOrCenterId: routeParams.id, command: 'assignStaff'}, this.formData, function (data) {
                    location.path(scope.r + data.groupId);
                });
            };
        }
    });
    mifosX.ng.application.controller('AssignStaffController', ['$scope', 'ResourceFactory', '$location', '$routeParams', mifosX.controllers.AssignStaffController]).run(function ($log) {
        $log.info("AssignStaffController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AttachMeetingController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            resourceFactory.attachMeetingResource.get({groupOrCenter: routeParams.entityType, groupOrCenterId: routeParams.id,
                templateSource: 'template'}, function (data) {
                scope.entityType = routeParams.entityType;
                scope.groupOrCenterId = routeParams.id;
                scope.groupCenterData = data;
                scope.restrictDate = new Date();
                scope.first = {};
                scope.periodValue = "day(s)";
                scope.repeatsOptions = [
                    {id: 1, value: "daily"},
                    {id: 2, value: "weekly"},
                    {id: 3, value: "monthly"},
                    {id: 4, value: "yearly"}
                ];
                scope.repeatsEveryOptions = ["1", "2", "3"];
                //to display default in select boxes
                scope.formData = {
                    repeating: 'true',
                    frequency: scope.repeatsOptions[0].id,
                    interval: '1'
                }
            });

            scope.selectedPeriod = function (period) {
                if (period == 1) {
                    scope.repeatsEveryOptions = ["1", "2", "3"];
                    scope.periodValue = "day(s)"
                }
                if (period == 2) {
                    scope.repeatsEveryOptions = ["1", "2", "3","4","5"];
                    scope.formData.repeatsOnDay = '1';
                    scope.periodValue = "week(s)";
                    scope.repeatsOnOptions = [
                        {name: "MON", value: "1"},
                        {name: "TUE", value: "2"},
                        {name: "WED", value: "3"},
                        {name: "THU", value: "4"},
                        {name: "FRI", value: "5"},
                        {name: "SAT", value: "6"},
                        {name: "SUN", value: "7"}
                    ]
                }
                if (period == 3) {
                    scope.periodValue = "month(s)";
                    scope.repeatsEveryOptions = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"];
                }
                if (period == 4) {
                    scope.periodValue = "year(s)";
                    scope.repeatsEveryOptions = ["1", "2", "3"];
                }
            }

            scope.submit = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.startDate = reqDate;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.typeId = "1";
                if (routeParams.entityType == "groups") {
                    this.formData.title = "groups_" + routeParams.id + "_CollectionMeeting";
                    scope.r = "viewgroup/";
                }
                else if (routeParams.entityType == "centers") {
                    this.formData.title = "centers_" + routeParams.id + "_CollectionMeeting";
                    scope.r = "viewcenter/";
                }

                resourceFactory.attachMeetingResource.save({groupOrCenter: routeParams.entityType, groupOrCenterId: routeParams.id}, this.formData, function (data) {
                    location.path(scope.r + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('AttachMeetingController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.AttachMeetingController]).run(function ($log) {
        $log.info("AttachMeetingController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportGroupController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/groups/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams += '&officeId=' + scope.formData.officeId;
                    }else {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }

            };

            scope.changeStaff = function() {
                if(scope.formData.staffId) {
                    if (scope.first.queryParams.indexOf("staffId")==-1) {
                        scope.first.queryParams = scope.first.queryParams + '&staffId=' + scope.formData.staffId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&staffId=\d+/i,"&staffId="+ scope.formData.staffId);
                    }
                } else {
                    if(scope.formData.officeId)
                        scope.first.queryParams = '&' + 'officeId=' + scope.formData.officeId;
                    else
                        scope.first.queryParams = '&';
                }
            };
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "groups"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };
            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/groups/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportGroupController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportGroupController]).run(function ($log) {
        $log.info("BulkImportGroupController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CloseGroupController: function (scope, routeParams, route, location, resourceFactory, dateFilter) {
            scope.group = [];
            scope.template = [];
            scope.first = {};
            scope.first.date = new Date();
            scope.restrictDate = new Date();
            scope.formData = {};
            resourceFactory.groupResource.get({groupId: routeParams.id, associations: 'all'}, function (data) {
                scope.group = data;
            });
            resourceFactory.groupTemplateResource.get({command: 'close'}, function (data) {
                scope.template = data;
                if(data.closureReasons[0]) {
                    scope.formData.closureReasonId = data.closureReasons[0].id;
                }
            });

            scope.closeGroup = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.closureDate = reqDate;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                resourceFactory.groupResource.save({groupId: routeParams.id, command: 'close'}, this.formData, function (data) {
                    location.path('/viewgroup/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CloseGroupController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', 'dateFilter', mifosX.controllers.CloseGroupController]).run(function ($log) {
        $log.info("CloseGroupController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateGroupController: function ($q, scope, resourceFactory, location, dateFilter, routeParams, WizardHandler) {
            scope.offices = [];
            scope.staffs = [];
            scope.data = {};
            scope.choice = 0;
            scope.first = {};
            scope.first.submitondate = new Date();
            scope.first.date = new Date();
            scope.restrictDate = new Date();
            scope.addedClients = [];
            scope.available = [];
            scope.added = [];
            scope.formData = {};
            scope.formDat = {};
            scope.formData.clientMembers = [];
            scope.forceOffice = null;
            scope.datatables = [];
            scope.noOfTabs = 1;
            scope.step = '-';
            scope.formData.datatables = [];
            scope.formDat.datatables = [];
            scope.tf = "HH:mm";
            scope.clientData = {};

            var requestParams = {orderBy: 'name', sortOrder: 'ASC', staffInSelectedOfficeOnly: true};
            if (routeParams.centerId) {
                requestParams.centerId = routeParams.centerId;
            }
            resourceFactory.groupTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;

                scope.datatables = data.datatables;
                if (!_.isUndefined(scope.datatables) && scope.datatables.length > 0) {
                    scope.noOfTabs = scope.datatables.length + 1;
                    angular.forEach(scope.datatables, function (datatable, index) {
                        scope.updateColumnHeaders(datatable.columnHeaderData);
                        angular.forEach(datatable.columnHeaderData, function (colHeader, i) {
                            if (_.isEmpty(scope.formDat.datatables[index])) {
                                scope.formDat.datatables[index] = {data: {}};
                            }

                            if (_.isEmpty(scope.formData.datatables[index])) {
                                scope.formData.datatables[index] = {
                                    registeredTableName: datatable.registeredTableName,
                                    data: {locale: scope.optlang.code}
                                };
                            }

                            if (datatable.columnHeaderData[i].columnDisplayType == 'DATETIME') {
                                scope.formDat.datatables[index].data[datatable.columnHeaderData[i].columnName] = {};
                            }
                        });
                    });
                }

                if(routeParams.officeId) {
                    scope.formData.officeId = routeParams.officeId;
                    for(var i in data.officeOptions) {
                        if(data.officeOptions[i].id == routeParams.officeId) {
                            scope.forceOffice = data.officeOptions[i];
                            break;
                        }
                    }
                }
                if(routeParams.groupId) {
                    if(typeof data.staffId !== "undefined") {
                        scope.formData.staffId = data.staffId;
                    }
                }

            });

            scope.updateColumnHeaders = function(columnHeaderData) {
                var colName = columnHeaderData[0].columnName;
                if (colName == 'id') {
                    columnHeaderData.splice(0, 1);
                }

                colName = columnHeaderData[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    columnHeaderData.splice(0, 1);
                }
            };

            
            scope.clientOptions = function(value){
                var deferred = $q.defer();
                resourceFactory.clientResource.getAllClientsWithoutLimit({displayName: value, orderBy : 'displayName', officeId : scope.formData.officeId,
                sortOrder : 'ASC', orphansOnly : true}, function (data) {
                    deferred.resolve(data.pageItems);
                });
                return deferred.promise;
            };
            
            scope.viewClient = function (item) {
                scope.client = item;
            };

            scope.add = function () {
            	if(scope.clientData.available != ""){
            		var temp = {};
                    temp.id = scope.clientData.available.id;
                    temp.displayName = scope.clientData.available.displayName;
                	scope.addedClients.push(temp);
            	}
            };
            scope.sub = function (id) {
            	for (var i = 0; i < scope.addedClients.length; i++) {
                    if (scope.addedClients[i].id == id) {
                        scope.addedClients.splice(i, 1);
                        break;
                    }
                }
            };
            scope.changeOffice = function (officeId) {
                scope.addedClients = [];
                scope.clientData.available = [];
                resourceFactory.groupTemplateResource.get({staffInSelectedOfficeOnly: false, officeId: officeId,staffInSelectedOfficeOnly:true
                }, function (data) {
                    scope.staffs = data.staffOptions;
                });
            };
            scope.setChoice = function () {
                if (this.formData.active) {
                    scope.choice = 1;
                }
                else if (!this.formData.active) {
                    scope.choice = 0;
                }
            };

            if(routeParams.centerId) {
            	scope.cancel = '#/viewcenter/' + routeParams.centerId
            	scope.centerid = routeParams.centerId;
        	}else {
        		scope.cancel = "#/groups"
        	}

            //return input type
            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.submit = function () {
                // if (WizardHandler.wizard().getCurrentStep() != scope.noOfTabs) {
                //     WizardHandler.wizard().next();
                //     return;
                // }
                for (var i in scope.addedClients) {
                    scope.formData.clientMembers[i] = scope.addedClients[i].id;
                }
                if (this.formData.active) {
                    this.formData.activationDate = dateFilter(scope.first.date, scope.df);
                }
                if (routeParams.centerId) {
                    this.formData.centerId = routeParams.centerId;
                }
                if (routeParams.officeId) {
                    this.formData.officeId = routeParams.officeId;
                }
                if (scope.first.submitondate) {
                    this.formData.submittedOnDate = dateFilter(scope.first.submitondate, scope.df);
                }
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.active = this.formData.active || false;
                if (!_.isUndefined(scope.datatables) && scope.datatables.length > 0) {
                    angular.forEach(scope.datatables, function (datatable, index) {
                        scope.columnHeaders = datatable.columnHeaderData;
                        angular.forEach(scope.columnHeaders, function (colHeader, i) {
                            scope.dateFormat = scope.df + " " + scope.tf
                            if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName])) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName],
                                        scope.dateFormat);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            } else if (scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date) && !_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time)) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date, scope.df)
                                        + " " + dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time, scope.tf);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            }
                        });
                    });
                } else {
                    delete scope.formData.datatables;
                }
                resourceFactory.groupResource.save(this.formData, function (data) {
                    location.path('/viewgroup/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateGroupController', ['$q', '$scope', 'ResourceFactory', '$location', 'dateFilter', '$routeParams', 'WizardHandler', mifosX.controllers.CreateGroupController]).run(function ($log) {
        $log.info("CreateGroupController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditGroupController: function (scope, resourceFactory, location, routeParams, dateFilter, WizardHandler) {
            scope.first = {};
            scope.managecode = routeParams.managecode;
            scope.restrictDate = new Date();
            scope.entityformData = {};
            scope.entityformData.datatables={};
            scope.submittedDatatables = [];
            var submitStatus = [];

            scope.RequestEntities = function(entity,status){
                resourceFactory.entityDatatableChecksResource.getAll({limit:-1},function (response) {
                    scope.entityDatatableChecks = _.filter(response.pageItems , function(datatable){
                        var AllTables = (datatable.entity == entity && datatable.status.value == status);
                        return AllTables;
                    });
                    scope.entityDatatableChecks = _.pluck(scope.entityDatatableChecks,'datatableName');
                    scope.datatables = [];
                    var k=0;
                    _.each(scope.entityDatatableChecks,function(entitytable) {
                        resourceFactory.DataTablesResource.getTableDetails({datatablename:entitytable,entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                            data.registeredTableName = entitytable;
                            var colName = data.columnHeaders[0].columnName;
                            if (colName == 'id') {
                                data.columnHeaders.splice(0, 1);
                            }

                            colName = data.columnHeaders[0].columnName;
                            if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                                data.columnHeaders.splice(0, 1);
                                scope.isCenter = (colName == 'center_id') ? true : false;
                            }

                            data.noData = (data.data.length == 0);
                            if(data.noData){
                                scope.datatables.push(data);
                                scope.entityformData.datatables[k] = {data:{}};
                                submitStatus[k] = "save";
                                _.each(data.columnHeaders,function(Header){
                                    scope.entityformData.datatables[k].data[Header.columnName] = "";
                                });
                                k++;
                                scope.isEntityDatatables = true;
                            }
                        });
                    });

                });
            };

            function asyncLoop(iterations, func, callback) {
                var index = 0;
                var done = false;
                var loop = {
                    next: function() {
                        if (done) {
                            return;
                        }

                        if (index < iterations) {
                            index++;
                            func(loop);

                        } else {
                            done = true;
                            callback();
                        }
                    },

                    iteration: function() {
                        return index - 1;
                    },

                    break: function() {
                        done = true;
                    }
                };
                loop.next();
                return loop;
            }

            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.RequestEntities('m_group','ACTIVATE');

            resourceFactory.groupResource.get({groupId: routeParams.id, associations: 'clientMembers', template: 'true',staffInSelectedOfficeOnly:true}, function (data) {
                scope.editGroup = data;
                scope.formData = {
                    name: data.name,
                    externalId: data.externalId,
                    staffId: data.staffId
                };
                if (data.activationDate) {
                    var actDate = dateFilter(data.activationDate, scope.df);
                    scope.first.date = new Date(actDate);
                }

            });

            resourceFactory.groupResource.get({groupId: routeParams.id}, function (data) {
                if (data.timeline.submittedOnDate) {
                    scope.mindate = new Date(data.timeline.submittedOnDate);
                    scope.first.submitondate = new Date(dateFilter(data.timeline.submittedOnDate, scope.df));
                }
            });

            scope.updateGroup = function () {
                this.formData.submittedOnDate = dateFilter(scope.first.submitondate, scope.df);
                this.formData.activationDate = dateFilter(scope.first.date, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                resourceFactory.groupResource.update({groupId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewgroup/' + routeParams.id);
                });
            };

            scope.submitDatatable = function(){
                if(scope.datatables) {
                    asyncLoop(Object.keys(scope.entityformData.datatables).length,function(loop){
                        var cnt = loop.iteration();
                        var formData = scope.entityformData.datatables[cnt];
                        formData.registeredTableName = scope.datatables[cnt].registeredTableName;

                        var params = {
                            datatablename: formData.registeredTableName,
                            entityId: routeParams.id,
                            genericResultSet: 'true'
                        };

                        angular.extend(formData.data,{dateFormat: scope.df, locale: scope.optlang.code});

                        _.each(formData.data, function (columnHeader) {
                            if (columnHeader.dateType) {
                                columnHeader = dateFilter(columnHeader.dateType.date, params.dateFormat);
                            }
                            else if (columnHeader.dateTimeType) {
                                columnHeader = dateFilter(columnHeader.columnName.date, scope.df) + " " + dateFilter(columnHeader.columnName.time, scope.tf);
                            }
                        });

                        var action = submitStatus[cnt];
                        resourceFactory.DataTablesResource[action](params, formData.data, function (data) {

                            submitStatus[cnt] = "update";
                            scope.submittedDatatables.push(scope.datatables[cnt].registeredTableName);
                            loop.next();

                        },function(){
                            rootScope.errorDetails[0].push({datatable:scope.datatables[cnt].registeredTableName});
                            loop.break();
                        });

                    },function(){
                        scope.activate();
                    });
                }
                else{
                    scope.activate();
                }
            };

            scope.activate = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                var newActivation = new Object();
                newActivation.activationDate = reqDate;
                newActivation.locale = scope.optlang.code;
                newActivation.dateFormat = scope.df;
                resourceFactory.groupResource.save({groupId: routeParams.id, command: 'activate'}, newActivation, function (data) {
                    location.path('/viewgroup/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditGroupController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter','WizardHandler', mifosX.controllers.EditGroupController]).run(function ($log) {
        $log.info("EditGroupController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditMeetingBasedOnMeetingDatesController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.formData = {};
            scope.formData.presentMeetingDate = {};
            scope.formData.newMeetingDate = {};

            resourceFactory.attachMeetingResource.get({groupOrCenter: routeParams.entityType, groupOrCenterId: routeParams.groupOrCenterId,
                templateSource: routeParams.calendarId, template: 'true'}, function (data) {
                scope.entityType = routeParams.entityType;
                scope.groupOrCenterId = routeParams.groupOrCenterId;
                scope.calendarData = data;
                scope.restrictDate = new Date();
                scope.formData = {};
                scope.presentmeetingdates = [];

                for(var i in data.nextTenRecurringDates){
                    scope.presentmeetingdates.push(dateFilter(new Date(data.nextTenRecurringDates[i]), scope.df));
                }
            });

            scope.submit = function () {

                this.formData.reschedulebasedOnMeetingDates = true;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;

                this.formData.presentMeetingDate = dateFilter(this.formData.presentMeetingDate, scope.df);
                this.formData.newMeetingDate = dateFilter(this.formData.newMeetingDate, scope.df);


                resourceFactory.attachMeetingResource.update({groupOrCenter: routeParams.entityType,
                    groupOrCenterId: routeParams.groupOrCenterId, templateSource: routeParams.calendarId}, this.formData, function (data) {
                    var destURI = "";
                    if (routeParams.entityType == "groups") {
                        destURI = "viewgroup/" + routeParams.groupOrCenterId;
                    }
                    else if (routeParams.entityType == "centers") {
                        destURI = "viewcenter/" + routeParams.groupOrCenterId;
                    }
                    location.path(destURI);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditMeetingBasedOnMeetingDatesController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.EditMeetingBasedOnMeetingDatesController]).run(function ($log) {
        $log.info("EditMeetingBasedOnMeetingDatesController initialized");
    });
}(mifosX.controllers || {}));


;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditMeetingController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.formData = {};
            resourceFactory.attachMeetingResource.get({groupOrCenter: routeParams.entityType, groupOrCenterId: routeParams.groupOrCenterId,
                templateSource: routeParams.calendarId, template: 'true'}, function (data) {
                scope.entityType = routeParams.entityType;
                scope.calendarId = routeParams.calendarId;
                scope.groupOrCenterId = routeParams.groupOrCenterId;
                scope.calendarData = data;
                scope.restrictDate = new Date();
                scope.first = {date: new Date(data.startDate)};
                scope.repeatsOptions = [
                    {id: 1, value: "daily"},
                    {id: 2, value: "weekly"},
                    {id: 3, value: "monthly"},
                    {id: 4, value: "yearly"}
                ];
                scope.repeatsEveryOptions = [1, 2, 3];
                scope.selectedPeriod(scope.calendarData.frequency.id);
                //to display default in select boxes
                scope.formData = {
                    repeating: scope.calendarData.repeating,
                    frequency: scope.calendarData.frequency.id,
                    interval: Math.abs(scope.calendarData.interval)
                }
                for(var i in scope.repeatsEveryOptions){
                    if (scope.formData.interval == scope.repeatsEveryOptions[i]){
                        scope.formData.interval = scope.repeatsEveryOptions[i];
                    }
                }
                //update interval option
                for (var i in scope.repeatsEveryOptions) {
                    if (scope.repeatsEveryOptions[i] == scope.calendarData.interval) {
                        scope.formData.interval = scope.repeatsEveryOptions[i];
                    }
                }
                //update radio button option
                if (scope.formData.frequency == 2) {
                    scope.formData.repeatsOnDay = scope.calendarData.repeatsOnDay.id;
                }
            });

            scope.selectedPeriod = function (period) {
                if (period == 1) {
                    scope.repeatsEveryOptions = ["1", "2", "3"];
                    scope.periodValue = "day(s)"
                }
                if (period == 2) {
                    scope.repeatsEveryOptions = ["1", "2", "3","4","5"];
                    scope.formData.repeatsOnDay = '1';
                    scope.periodValue = "week(s)";
                    scope.repeatsOnOptions = [
                        {name: "MON", value: "1"},
                        {name: "TUE", value: "2"},
                        {name: "WED", value: "3"},
                        {name: "THU", value: "4"},
                        {name: "FRI", value: "5"},
                        {name: "SAT", value: "6"},
                        {name: "SUN", value: "7"}
                    ]
                }
                if (period == 3) {
                    scope.periodValue = "month(s)";
                    scope.repeatsEveryOptions = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"];
                }
                if (period == 4) {
                    scope.periodValue = "year(s)";
                    scope.repeatsEveryOptions = ["1", "2", "3"];
                }
            }

            scope.submit = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.startDate = reqDate;
                this.formData.title = scope.calendarData.title;
                this.formData.locale = scope.optlang.code;
                this.formData.repeating = true;
                this.formData.dateFormat = scope.df;
                this.formData.typeId = "1";
                if (this.formData.interval < 0) {
                    scope.formData.interval = Math.abs(this.formData.interval);
                }
                resourceFactory.attachMeetingResource.update({groupOrCenter: routeParams.entityType,
                    groupOrCenterId: routeParams.groupOrCenterId, templateSource: routeParams.calendarId}, this.formData, function (data) {
                    var destURI = "";
                    if (routeParams.entityType == "groups") {
                        destURI = "viewgroup/" + routeParams.groupOrCenterId;
                    }
                    else if (routeParams.entityType == "centers") {
                        destURI = "viewcenter/" + routeParams.groupOrCenterId;
                    }
                    location.path(destURI);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditMeetingController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.EditMeetingController]).run(function ($log) {
        $log.info("EditMeetingController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        GroupAttendanceController: function (scope, resourceFactory, routeParams, location, dateFilter) {
            scope.group = [];
            scope.first = {};
            scope.first.date = new Date();
            scope.formData = {};
            scope.clientId = routeParams.clientId;
            scope.groupId = routeParams.groupId;

            resourceFactory.groupResource.get({groupId: routeParams.groupId, associations: 'all'}, function (data) {
                scope.group = data;
                scope.meeting = data.collectionMeetingCalendar;
                scope.groupName = scope.group.name;

            });

            resourceFactory.groupMeetingResource.getMeetingInfo({groupId: routeParams.groupId, templateSource: 'template', calenderId: routeParams.calendarId}, function (data) {
                scope.clients = data.clients;
                scope.attendanceOptions = data.attendanceTypeOptions;
                /*the following code help to display default attendance type is 'present'*/
                for (var i = 0; i < scope.clients.length; i++) {
                    scope.clients[i].attendanceType = data.attendanceTypeOptions[0].id;
                }
            });

            scope.attendanceUpdate = function (id) {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.clientsAttendance = [];
                for (var i = 0; i < scope.clients.length; i++) {
                    this.formData.clientsAttendance[i] = {clientId: scope.clients[i].id, attendanceType: scope.clients[i].attendanceType};
                }
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.calendarId = id;
                this.formData.meetingDate = reqDate;
                resourceFactory.groupMeetingResource.save({groupId: routeParams.groupId, calenderId: routeParams.calendarId}, this.formData, function (data) {
                    location.path('/viewgroup/' + routeParams.groupId);
                });
            };
        }
    });
    mifosX.ng.application.controller('GroupAttendanceController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.GroupAttendanceController]).run(function ($log) {
        $log.info("GroupAttendanceController initialized");
    });
}(mifosX.controllers || {}));


;(function (module) {
    mifosX.controllers = _.extend(module, {
        GroupController: function (scope, resourceFactory, location) {
            scope.groups = [];
            scope.actualGroups = [];
            scope.searchText = "";
            scope.searchResults = [];
            scope.showClosed = false;
            scope.routeTo = function (id) {
                location.path('/viewgroup/' + id);
            };

            if (!scope.searchCriteria.groups) {
                scope.searchCriteria.groups = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.groups || '';

            scope.onFilter = function () {
                scope.searchCriteria.groups = scope.filterText;
                scope.saveSC();
            };

            scope.groupsPerPage = 15;
            scope.getResultsPage = function (pageNumber) {
                if(scope.searchText){
                    var startPosition = (pageNumber - 1) * scope.groupsPerPage;
                    scope.groups = scope.actualGroups.slice(startPosition, startPosition + scope.groupsPerPage);
                    return;
                }
                var items = resourceFactory.groupResource.get({
                    offset: ((pageNumber - 1) * scope.groupsPerPage),
                    limit: scope.groupsPerPage,
                    paged: 'true',
                    orderBy: 'name',
                    sortOrder: 'ASC'
                }, function (data) {
                    scope.groups = data.pageItems;
                });
            }

            scope.initPage = function () {
                var items = resourceFactory.groupResource.get({
                    offset: 0,
                    limit: scope.groupsPerPage,
                    paged: 'true',
                    orderBy: 'name',
                    sortOrder: 'ASC'
                }, function (data) {
                    scope.totalGroups = data.totalFilteredRecords;
                    scope.groups = data.pageItems;
                });
            }

            scope.initPage();

            scope.search = function () {
                scope.actualGroups = [];
                scope.searchResults = [];
                scope.filterText = "";
                var searchString = scope.searchText;
                searchString = searchString.replace(/(^"|"$)/g, '');
                var exactMatch=false;
                var n = searchString.localeCompare(scope.searchText);
                if(n!=0)
                {
                    exactMatch=true;
                }
                if(!scope.searchText){
                    scope.initPage();
                } else {
                    resourceFactory.globalSearch.search({query: searchString, resource: "groups",exactMatch: exactMatch}, function (data) {
                        var arrayLength = data.length;
                        for (var i = 0; i < arrayLength; i++) {
                            var result = data[i];
                            var group = {};
                            group.status = {};
                            group.subStatus = {};
                            if(result.entityType  == 'GROUP') {
                                group.name = result.entityName;
                                group.id = result.entityId;
                                group.accountNo = result.entityAccountNo;
                                group.officeName = result.parentName;
                                group.status.value = result.entityStatus.value;
                                group.status.code = result.entityStatus.code;
                                group.externalId = result.entityExternalId;
                                scope.actualGroups.push(group);
                            }
                        }
                        var numberOfGroups = scope.actualGroups.length;
                        scope.totalGroups = numberOfGroups;
                        scope.groups = scope.actualGroups.slice(0, scope.groupsPerPage);
                    });
                }
            }

        }
    });
    mifosX.ng.application.controller('GroupController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.GroupController]).run(function ($log) {
        $log.info("GroupController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        MemberManageController: function ($q, scope, routeParams, route, location, resourceFactory, $uibModal) {
            scope.group = [];
            scope.indexOfClientToBeDeleted = "";
            scope.allMembers = [];

            scope.viewClient = function (item) {
                scope.client = item;
            };

            scope.clientOptions = function(value){
                var deferred = $q.defer();
                resourceFactory.clientResource.getAllClientsWithoutLimit({displayName: value, orderBy : 'displayName', officeId : scope.group.officeId,
                sortOrder : 'ASC', orphansOnly : true}, function (data) {
                    deferred.resolve(data.pageItems);
                });
                return deferred.promise;
            };

            resourceFactory.groupResource.get({groupId: routeParams.id, associations: 'clientMembers', template: 'true'}, function (data) {
                scope.group = data;
                if(data.clientMembers) {
                    scope.allMembers = data.clientMembers;
                }
            });
            
            scope.add = function () {
            	if(scope.available != ""){
	                scope.associate = {};
	            	scope.associate.clientMembers = [];
	                scope.associate.clientMembers[0] = scope.available.id;
	                resourceFactory.groupResource.save({groupId: routeParams.id, command: 'associateClients'}, scope.associate, function (data) {
                        var temp = {};
                        temp.id = scope.available.id;
                        temp.displayName = scope.available.displayName;
                        scope.allMembers.push(temp);
                        scope.available = "";
	                });
            	}
            };

            scope.remove = function (index,id) {
                scope.indexOfClientToBeDeleted = index;
                $uibModal.open({
                    templateUrl: 'delete.html',
                    controller: MemberDeleteCtrl
                });
            	scope.disassociate = {};
            	scope.disassociate.clientMembers = [];
            	scope.disassociate.clientMembers.push(id);
            };
            
            var MemberDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                	resourceFactory.groupResource.save({groupId: routeParams.id, command: 'disassociateClients'}, scope.disassociate, function (data) {
                        scope.allMembers.splice(scope.indexOfClientToBeDeleted, 1);
                        $uibModalInstance.close('activate');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('MemberManageController', ['$q','$scope', '$routeParams', '$route', '$location', 'ResourceFactory', '$uibModal', mifosX.controllers.MemberManageController]).run(function ($log) {
        $log.info("MemberManageController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        TransferClientsController: function ($q, scope, routeParams, route, location, resourceFactory) {
            scope.group = [];
            scope.tempData = [];
            scope.selectedClients = [];
            scope.selectedMembers = [];
            scope.formData = {};
            scope.destinationGroup = "";
            scope.groupId = routeParams.id;

            resourceFactory.groupResource.get({groupId: routeParams.id, associations: 'clientMembers'}, function (data) {
                scope.data = data;
                scope.allMembers = data.clientMembers;
            });

            scope.groups = function(value){
                var deferred = $q.defer();
                resourceFactory.groupResource.getAllGroups({name : value, orderBy : 'name', officeId : scope.data.officeId,
                    sortOrder : 'ASC'}, function(data){
                    scope.group = _.reject(data, function (group) {
                        return group.id == routeParams.id;
                    });
                    deferred.resolve(scope.group);
                });
                return deferred.promise;
            };

            scope.addClient = function () {
                for (var i in this.availableClients) {
                    for (var j in scope.allMembers) {
                        if (scope.allMembers[j].id == this.availableClients) {
                            var temp = {};
                            temp.id = this.allMembers[j].id;
                            temp.displayName = this.allMembers[j].displayName;
                            temp.accountNo = this.allMembers[j].accountNo;
                            scope.selectedMembers.push(temp);
                            scope.allMembers.splice(j, 1);
                        }
                    }
                }
            };
            scope.removeClient = function () {
                for (var i in this.selectedClients) {
                    for (var j in scope.selectedMembers) {
                        if (scope.selectedMembers[j].id == this.selectedClients) {
                            var temp = {};
                            temp.id = this.selectedMembers[j].id;
                            temp.displayName = this.selectedMembers[j].displayName;
                            temp.accountNo = this.selectedMembers[j].accountNo;
                            scope.allMembers.push(temp);
                            scope.selectedMembers.splice(j, 1);
                        }
                    }
                }
            };
            
            scope.viewgroup = function (group) {
                resourceFactory.groupResource.get({groupId: group.id}, function (data) {
                    scope.groupdata = data;
                });
                scope.view = 1;
            };
            scope.transfer = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.clients = [];
                this.formData.destinationGroupId = scope.destinationGroup.id;
                var temp = new Object();
                for (var i = 0; i < scope.selectedMembers.length; i++) {
                    temp = {id: this.selectedMembers[i].id};
                    this.formData.clients.push(temp);
                }
                this.formData.inheritDestinationGroupLoanOfficer = this.formData.inheritDestinationGroupLoanOfficer || false;
                resourceFactory.groupResource.save({groupId: routeParams.id, command: 'transferClients'}, this.formData, function (data) {
                    location.path('/viewgroup/' + data.resourceId);
                });
            };

            scope.displayNameAndId = function (member){
                 return ( member.accountNo + " " + member.displayName );
            };


        }
    });
    mifosX.ng.application.controller('TransferClientsController', ['$q', '$scope', '$routeParams', '$route', '$location', 'ResourceFactory',
        mifosX.controllers.TransferClientsController]).run(function ($log) {
        $log.info("TransferClientsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewGroupController: function (scope, routeParams, route, location, resourceFactory, dateFilter, $uibModal) {
            scope.group = [];
            scope.template = [];
            scope.groupGLIMAccounts=[];
            scope.groupGSIMAccounts=[];
            scope.groupId=routeParams.id;
            scope.formData = {};
            scope.choice = 0;
            scope.staffData = {};
            scope.openLoan = true;
            scope.openSaving = true;
            scope.editMeeting = false;
            scope.isGroupMembersAvailable = false;
            scope.routeToLoan = function (id) {
                location.path('/viewloanaccount/' + id);
            };
            scope.routeToSaving = function (id) {
                location.path('/viewsavingaccount/' + id);
            };
            scope.routeToGLIMLoan = function (glimAccountNumber, glimId) {
                location.path('/viewglimaccount/' +scope.groupId +'/'+glimAccountNumber +'/'+glimId);
            };

            scope.routeToGSIMAccount = function (gsimAccountNumber) {
                location.path('/viewgsimaccount/' + scope.groupId+'/'+gsimAccountNumber);
            };
            scope.routeToMem = function (id) {
                location.path('/viewclient/' + id);
            };
            resourceFactory.groupResource.get({groupId: routeParams.id, associations: 'all'}, function (data) {
                scope.group = data;
                if(scope.group.clientMembers){
                    scope.isGroupMembersAvailable = (scope.group.clientMembers.length>0);
                }
                scope.isClosedGroup = scope.group.status.value == 'Closed';
                scope.staffData.staffId = data.staffId;
                if(data.collectionMeetingCalendar) {
                    scope.entityId = data.id;
                    scope.entityType = data.collectionMeetingCalendar.entityType.value;

                    if(scope.entityType == "GROUPS" && data.hierarchy == "."+ data.id + "." ){
                        scope.editMeeting = true;
                    }
                }

            });
            resourceFactory.runReportsResource.get({reportSource: 'GroupSummaryCounts', genericResultSet: 'false', R_groupId: routeParams.id}, function (data) {
                scope.summary = data[0];
            });
            resourceFactory.groupAccountResource.get({groupId: routeParams.id}, function (data) {
                scope.groupAccounts = data;
            });
            resourceFactory.groupNotesResource.getAllNotes({groupId: routeParams.id}, function (data) {
                scope.groupNotes = data;
            });
            resourceFactory.groupGLIMAccountResource.get({groupId: routeParams.id}, function (data) {
                scope.groupGLIMAccounts = data;
            });

            resourceFactory.groupGSIMAccountResource.get({groupId: routeParams.id}, function (data) {
                scope.groupGSIMAccounts = data;
            });
            scope.delrole = function (id) {
                resourceFactory.groupResource.save({groupId: routeParams.id, command: 'unassignRole', roleId: id}, {}, function (data) {
                    resourceFactory.groupResource.get({groupId: routeParams.id}, function (data) {
                        route.reload();
                    });
                });
            };
            scope.deleteGroup = function () {
                $uibModal.open({
                    templateUrl: 'deletegroup.html',
                    controller: GroupDeleteCtrl
                });
            };
            scope.unassignStaffGroup = function () {
                $uibModal.open({
                    templateUrl: 'groupunassignstaff.html',
                    controller: GroupUnassignCtrl
                });
            };
            var GroupUnassignCtrl = function ($scope, $uibModalInstance) {
                $scope.unassign = function () {
                    resourceFactory.groupResource.save({groupId: routeParams.id, command: 'unassignstaff'}, scope.staffData, function (data) {
                        $uibModalInstance.close('unassign');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            var GroupDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.groupResource.delete({groupId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/groups');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.cancel = function (id) {
                resourceFactory.groupResource.get({groupId: id}, function (data) {
                    route.reload();
                });
            };
            scope.viewDataTable = function (registeredTableName,data){
                if (scope.datatabledetails.isMultirow) {
                    location.path("/viewdatatableentry/"+registeredTableName+"/"+scope.group.id+"/"+data.row[0]);
                }else{
                    location.path("/viewsingledatatableentry/"+registeredTableName+"/"+scope.group.id);
                }
            };
            scope.saveNote = function () {
                resourceFactory.groupResource.save({groupId: routeParams.id, anotherresource: 'notes'}, this.formData, function (data) {
                    var today = new Date();
                    temp = { id: data.resourceId, note: scope.formData.note, createdByUsername: "test", createdOn: today };
                    scope.groupNotes.push(temp);
                    scope.formData.note = "";
                    scope.predicate = '-id';
                });
            };
            scope.isLoanClosed = function (loanaccount) {
                if (loanaccount.status.code === "loanStatusType.closed.written.off" ||
                    loanaccount.status.code === "loanStatusType.closed.obligations.met" ||
                    loanaccount.status.code === "loanStatusType.closed.reschedule.outstanding.amount" ||
                    loanaccount.status.code === "loanStatusType.withdrawn.by.client" ||
                    loanaccount.status.code === "loanStatusType.rejected") {
                    return true;
                } else {
                    return false;
                }
            };
            scope.setLoan = function () {
                if (scope.openLoan) {
                    scope.openLoan = false
                } else {
                    scope.openLoan = true;
                }
            };
            scope.setSaving = function () {
                if (scope.openSaving) {
                    scope.openSaving = false;
                } else {
                    scope.openSaving = true;
                }
            };
            scope.isSavingClosed = function (savingaccount) {
                if (savingaccount.status.code === "savingsAccountStatusType.withdrawn.by.applicant" ||
                    savingaccount.status.code === "savingsAccountStatusType.closed" ||
                    savingaccount.status.code === "savingsAccountStatusType.rejected") {
                    return true;
                } else {
                    return false;
                }
            };
            scope.isLoanNotClosed = function (loanaccount) {
                if (loanaccount.status.code === "loanStatusType.closed.written.off" ||
                    loanaccount.status.code === "loanStatusType.closed.obligations.met" ||
                    loanaccount.status.code === "loanStatusType.closed.reschedule.outstanding.amount" ||
                    loanaccount.status.code === "loanStatusType.withdrawn.by.client" ||
                    loanaccount.status.code === "loanStatusType.rejected") {
                    return false;
                } else {
                    return true;
                }
            };

            scope.isSavingNotClosed = function (savingaccount) {
                if (savingaccount.status.code === "savingsAccountStatusType.withdrawn.by.applicant" ||
                    savingaccount.status.code === "savingsAccountStatusType.closed" ||
                    savingaccount.status.code === "savingsAccountStatusType.rejected") {
                    return false;
                } else {
                    return true;
                }
            };

            scope.isActiveMember = function (status) {
                if (status == 'clientStatusType.active') {
                    return true;
                } else {
                    return false;
                }
            };

            resourceFactory.DataTablesResource.getAllDataTables({apptable: 'm_group'}, function (data) {
                scope.groupdatatables = data;
            });

            scope.dataTableChange = function (datatable) {
                resourceFactory.DataTablesResource.getTableDetails({datatablename: datatable.registeredTableName, entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                    scope.datatabledetails = data;
                    scope.datatabledetails.isData = data.data.length > 0 ? true : false;
                    scope.datatabledetails.isMultirow = data.columnHeaders[0].columnName == "id" ? true : false;
                    scope.showDataTableAddButton = !scope.datatabledetails.isData || scope.datatabledetails.isMultirow;
                    scope.showDataTableEditButton = scope.datatabledetails.isData && !scope.datatabledetails.isMultirow;
                    scope.singleRow = [];
                    for (var i in data.columnHeaders) {
                        if (scope.datatabledetails.columnHeaders[i].columnCode) {
                            for (var j in scope.datatabledetails.columnHeaders[i].columnValues) {
                                for (var k in data.data) {
                                    if (data.data[k].row[i] == scope.datatabledetails.columnHeaders[i].columnValues[j].id) {
                                        data.data[k].row[i] = scope.datatabledetails.columnHeaders[i].columnValues[j].value;
                                    }
                                }
                            }
                        }
                    }
                    if (scope.datatabledetails.isData) {
                        for (var i in data.columnHeaders) {
                            if (!scope.datatabledetails.isMultirow) {
                                var row = {};
                                row.key = data.columnHeaders[i].columnName;
                                row.value = data.data[0].row[i];
                                scope.singleRow.push(row);
                            }
                        }
                    }
                });
            };

            scope.deleteAll = function (apptableName, entityId) {
                resourceFactory.DataTablesResource.delete({datatablename: apptableName, entityId: entityId, genericResultSet: 'true'}, {}, function (data) {
                    route.reload();
                });
            };

        }
    });
    mifosX.ng.application.controller('ViewGroupController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', 'dateFilter', '$uibModal', mifosX.controllers.ViewGroupController]).run(function ($log) {
        $log.info("ViewGroupController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddLoanChargeController: function (scope, resourceFactory, routeParams, location, dateFilter) {

            scope.charges = [];
            scope.formData = {};
            scope.isCollapsed = true;
            scope.loanId = routeParams.id;
            scope.first = {};
            scope.first.date = new Date();
            resourceFactory.loanChargeTemplateResource.get({loanId: scope.loanId}, function (data) {
                scope.charges = data.chargeOptions;
            });

            scope.selectCharge = function(chargeId){
                for(var i in scope.charges){
                    if(scope.charges[i].id == chargeId){
                        scope.isCollapsed = false;
                        scope.chargeData = scope.charges[i];
                        scope.formData.amount = scope.charges[i].amount;
                    }
                }
            };

            scope.cancel = function () {
                location.path('/viewloanaccount/' + scope.loanId);
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                if(scope.chargeData.chargeTimeType.id==2){
                    this.formData.dueDate = dateFilter(this.first.date, scope.df);
                }
                resourceFactory.loanResource.save({resourceType: 'charges', loanId: scope.loanId}, this.formData, function (data) {
                    location.path('/viewloanaccount/' + data.loanId);
                });
            };

        }
    });
    mifosX.ng.application.controller('AddLoanChargeController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.AddLoanChargeController]).run(function ($log) {
        $log.info("AddLoanChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddLoanCollateralController: function (scope, resourceFactory, routeParams, location) {

            scope.collateralTypes = [];
            scope.formData = {};
            scope.loanId = routeParams.id;
            resourceFactory.loanCollateralTemplateResource.get({loanId: scope.loanId}, function (data) {
                scope.collateralTypes = data.allowedCollateralTypes;
                scope.formData.collateralTypeId = data.allowedCollateralTypes[0].id;
            });

            scope.cancel = function () {
                location.path('/viewloanaccount/' + scope.loanId);
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                resourceFactory.loanResource.save({resourceType: 'collaterals', loanId: scope.loanId}, this.formData, function (data) {
                    location.path('/loan/' + data.loanId + '/viewcollateral/' + data.resourceId);
                });
            };

        }
    });
    mifosX.ng.application.controller('AddLoanCollateralController', ['$scope', 'ResourceFactory', '$routeParams', '$location', mifosX.controllers.AddLoanCollateralController]).run(function ($log) {
        $log.info("AddLoanCollateralController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AdjustRepaymentSchedule: function (scope, routeParams, resourceFactory, location, route, http, $uibModal, dateFilter, API_VERSION, $sce, $rootScope) {
            scope.formData = {};
            scope.enablePrincipal = false ;
            scope.enableInstallment = false ;
            scope.newinstallments = [] ;
            scope.deletedinstallments = [] ;
            scope.modifiedinstallments = [] ;
            scope.days = [] ;
            scope.months = [] ;
            var i = 0 ;
            //load days in this days array
            for(i = 0 ; i < 31; i++) {
                scope.days.push(i+1) ;
            }
            //load months in this months array
            for(i = 0 ; i < 12; i++) {
                scope.months.push(i+1) ;
            }
            loadData() ;

            function loadData() {
                scope.newinstallments.splice(0, scope.newinstallments.length) ;
                scope.deletedinstallments.splice(0, scope.deletedinstallments.length) ;
                scope.modifiedinstallments.splice(0, scope.modifiedinstallments.length) ;
                resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.accountId, associations: 'repaymentSchedule', exclude: 'guarantors'}, function (data) {
                    scope.loandetails = data;
                    scope.decimals = data.currency.decimalPlaces;
                    var length = scope.loandetails.repaymentSchedule.periods.length ;
                    var i = 0 ;
                    while(i < scope.loandetails.repaymentSchedule.periods.length) {
                        if(scope.loandetails.repaymentSchedule.periods[i].period) {
                            var date = new Date(scope.loandetails.repaymentSchedule.periods[i].dueDate) ;
                            scope.loandetails.repaymentSchedule.periods[i].dueDate = date ;
                            scope.loandetails.repaymentSchedule.periods[i].originalDueDate = scope.loandetails.repaymentSchedule.periods[i].dueDate ;
                            scope.loandetails.repaymentSchedule.periods[i].oroginalPrincipalDue = scope.loandetails.repaymentSchedule.periods[i].principalDue ;
                            scope.loandetails.repaymentSchedule.periods[i].originaltotalInstallmentAmountForPeriod = scope.loandetails.repaymentSchedule.periods[i].totalInstallmentAmountForPeriod;
                            scope.loandetails.repaymentSchedule.periods[i].formattedDueDate = dateFilter(scope.loandetails.repaymentSchedule.periods[i].dueDate, scope.df);
                            i++ ;
                        }else {
                            scope.loandetails.repaymentSchedule.periods.splice(i, 1) ;
                        }
                    }
                    if(scope.loandetails.interestType.code == 'interestType.flat') {
                        scope.enablePrincipal = true ;
                        scope.enableInstallment = false ;
                    }else if(scope.loandetails.interestType.code == 'interestType.declining.balance') {
                        if(scope.loandetails.amortizationType.code == 'amortizationType.equal.principal') {
                            scope.enablePrincipal = true ;
                        }else if(scope.loandetails.amortizationType.code == 'amortizationType.equal.installments') {
                            scope.enableInstallment = true ;
                        }
                    }else { //invalid case. don't allow anything to be modified
                        scope.enablePrincipal = false ;
                        scope.enableInstallment = false ;
                    }
                });
            }

            scope.pattern = function () {
                $uibModal.open({
                    templateUrl: 'pattern.html',
                    controller: patternController,
                    resolve: {
                        periods: function () {
                            return scope.loandetails.repaymentSchedule.periods;
                        },
                        enablePrincipal: function () {
                            return scope.enablePrincipal;
                        },
                        enableInstallment: function () {
                            return scope.enableInstallment;
                        },
                        months: function () {
                            return scope.months ;
                        },
                        days: function () {
                            return scope.days ;
                        }

                    }
                });
            };


            var patternController = function ($scope, $uibModalInstance, periods, enablePrincipal, enableInstallment, months, days) {
                $scope.periods = periods ;
                $scope.enablePrincipal = enablePrincipal;
                $scope.enableInstallment = enableInstallment ;
                $scope.months = months ;
                $scope.days = days ;
                $scope.adjustmentData = {} ;
                $scope.invaliddaterangeerror = false ;
                $scope.submit = function () {
                    var t1 = $scope.adjustmentData.fromDate.getTime() ;
                    var t2 = $scope.adjustmentData.fromDate.getTime() ;
                    if($scope.adjustmentData.toDate) {
                        t2 = $scope.adjustmentData.toDate.getTime() ;
                        if(t1 > t2) {
                            $scope.invaliddaterangeerror = true ;
                            return ;
                        }
                    }
                    $scope.invaliddaterangeerror = false ;
                    $uibModalInstance.close($scope.adjustmentData);
                    for(var i in scope.loandetails.repaymentSchedule.periods) {
                        if(scope.loandetails.repaymentSchedule.periods[i].dueDate.getTime()>= t1 &&
                            scope.loandetails.repaymentSchedule.periods[i].dueDate.getTime()<= t2) {
                            if($scope.enableInstallment && $scope.adjustmentData.totalInstallmentAmountForPeriod) {
                                scope.loandetails.repaymentSchedule.periods[i].totalInstallmentAmountForPeriod = $scope.adjustmentData.totalInstallmentAmountForPeriod ;
                            }else if($scope.enablePrincipal && $scope.adjustmentData.principalDue){
                                scope.loandetails.repaymentSchedule.periods[i].principalDue = $scope.adjustmentData.principalDue ;
                            }
                            if($scope.adjustmentData.month || $scope.adjustmentData.day) {
                                var tempDate = new Date(scope.loandetails.repaymentSchedule.periods[i].dueDate) ;
                                if($scope.adjustmentData.month) {
                                    tempDate.setMonth(parseInt($scope.adjustmentData.month)+scope.loandetails.repaymentSchedule.periods[i].dueDate.getMonth()) ;
                                }
                                if($scope.adjustmentData.day) {
                                    var uiday = parseInt($scope.adjustmentData.day) ;
                                    var day = numberOfDays(tempDate.getFullYear(), tempDate.getMonth()+1, uiday) ;
                                    tempDate.setDate(day) ;
                                }
                                scope.loandetails.repaymentSchedule.periods[i].dueDate = new Date(tempDate) ;
                                scope.loandetails.repaymentSchedule.periods[i].formattedDueDate = dateFilter(scope.loandetails.repaymentSchedule.periods[i].dueDate, scope.df);
                            }
                        }
                    }
                };

                function numberOfDays(year, month, day) {
                    var d = new Date(year, month, 0);
                    console.log(year, month) ;
                    console.log(d.getDate(), day) ;
                    if(d.getDate() < day) {
                        return d.getDate() ;
                    }else {
                        return day ;
                    }
                }

                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.addInstallment = function (index) {
                var installment = {} ;
                scope.loandetails.repaymentSchedule.periods.splice(index+1, 0, installment);
                scope.newinstallments.push(installment) ;

            } ;

            scope.deleteInstallment = function (index) {
                if(scope.loandetails.repaymentSchedule.periods[index].period) {
                    var deleted = {} ;
                    deleted.dueDate = dateFilter( scope.loandetails.repaymentSchedule.periods[index].dueDate , scope.df);
                    scope.deletedinstallments.push(deleted) ;
                }else {
                    var i = 0 ;
                    var length = scope.newinstallments.length ;
                    for(i = 0 ; i < length; i++) {
                        if(scope.newinstallments[i] == scope.loandetails.repaymentSchedule.periods[index]) {
                            scope.newinstallments.splice(i, 1) ;
                            break ;
                        }
                    }
                }
                scope.loandetails.repaymentSchedule.periods.splice(index, 1);
            } ;

            function getNewInstallments() {
                var tempArray = [] ;
                for (var i in scope.newinstallments) {
                    tempArray.push({}) ;
                    tempArray[i].dueDate = dateFilter( scope.newinstallments[i].dueDate, scope.df);
                    if(scope.enablePrincipal) {
                        tempArray[i].principal = scope.newinstallments[i].principalDue;
                    }
                    if(scope.enableInstallment) {
                        tempArray[i].installmentAmount = scope.newinstallments[i].totalInstallmentAmountForPeriod;
                    }
                }
                return tempArray ;
            } ;

            function constructRequestData() {
                var exceptions = {} ;
                var modified = getUpdatedInstallments() ;

                if(modified.length > 0) {
                    exceptions.modifiedinstallments = modified ;
                }
                var newinstalls = getNewInstallments() ;
                if(newinstalls.length > 0) {
                    exceptions.newinstallments = newinstalls ;
                }
                if(scope.deletedinstallments.length > 0) {
                    exceptions.deletedinstallments = scope.deletedinstallments ;
                }
                return exceptions ;
            }

            function getUpdatedInstallments() {
                var modified = [] ;
                var modifiedIndex = 0 ;
                scope.modifiedinstallments.splice(0, scope.modifiedinstallments.length);
                for(var i in scope.loandetails.repaymentSchedule.periods) {
                    if(scope.loandetails.repaymentSchedule.periods[i].period) {
                        var dateModified = scope.loandetails.repaymentSchedule.periods[i].originalDueDate.getTime() != scope.loandetails.repaymentSchedule.periods[i].dueDate.getTime() ;

                        if(!scope.loandetails.repaymentSchedule.periods[i].principalDue) {
                            scope.loandetails.repaymentSchedule.periods[i].principalDue = 0 ;
                        }
                        var principalModified = scope.loandetails.repaymentSchedule.periods[i].oroginalPrincipalDue !=  scope.loandetails.repaymentSchedule.periods[i].principalDue ;

                        if(!scope.loandetails.repaymentSchedule.periods[i].totalInstallmentAmountForPeriod) {
                            scope.loandetails.repaymentSchedule.periods[i].totalInstallmentAmountForPeriod = 0 ;
                        }
                        var installmentModified = scope.loandetails.repaymentSchedule.periods[i].originaltotalInstallmentAmountForPeriod !=  scope.loandetails.repaymentSchedule.periods[i].totalInstallmentAmountForPeriod ;

                        if(dateModified || principalModified || installmentModified) {
                            var modifiedInstallment = {} ;
                            scope.modifiedinstallments.push({}) ;
                            modifiedInstallment.dueDate = dateFilter(scope.loandetails.repaymentSchedule.periods[i].originalDueDate, scope.df);
                            scope.modifiedinstallments[modifiedIndex].dueDate = scope.loandetails.repaymentSchedule.periods[i].originalDueDate ;

                            if(dateModified) {
                                modifiedInstallment.modifiedDueDate = dateFilter(scope.loandetails.repaymentSchedule.periods[i].dueDate, scope.df);
                                scope.modifiedinstallments[modifiedIndex].modifiedDueDate = scope.loandetails.repaymentSchedule.periods[i].dueDate ;
                            }
                            if(scope.enablePrincipal && principalModified) {
                                modifiedInstallment.principal = scope.loandetails.repaymentSchedule.periods[i].principalDue ;
                                scope.modifiedinstallments[modifiedIndex].oroginalPrincipalDue = scope.loandetails.repaymentSchedule.periods[i].oroginalPrincipalDue ;
                                scope.modifiedinstallments[modifiedIndex].principal = scope.loandetails.repaymentSchedule.periods[i].principalDue ;
                            }
                            if(scope.enableInstallment && installmentModified) {
                                modifiedInstallment.installmentAmount = scope.loandetails.repaymentSchedule.periods[i].totalInstallmentAmountForPeriod ;
                                scope.modifiedinstallments[modifiedIndex].originaltotalInstallmentAmountForPeriod = scope.loandetails.repaymentSchedule.periods[i].originaltotalInstallmentAmountForPeriod ;
                                scope.modifiedinstallments[modifiedIndex].installmentAmount = scope.loandetails.repaymentSchedule.periods[i].totalInstallmentAmountForPeriod ;
                            }
                            modified.push(modifiedInstallment) ;
                            modifiedIndex++ ;
                        }
                    }
                }
                return modified ;
            };

            scope.resetToOriginalSchedule = function () {
                $uibModal.open({
                    templateUrl: 'resetschedule.html',
                    controller: resetToOriginalSchedule
                });
            };

            var resetToOriginalSchedule = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.variableinstallments.deleteVariations({loanId: routeParams.accountId}, function (data) {
                        $uibModalInstance.close("Close");
                        loadData() ;
                    });
                };

                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            function validateBeforesendingdata() {
                var emptyData = false ;
                for(var i in scope.loandetails.repaymentSchedule.periods) {
                    if(!scope.loandetails.repaymentSchedule.periods[i].dueDate){
                        emptyData = true ;
                        break ;
                    }
                }
                return emptyData ;
            }
            scope.validate = function () {
                if(validateBeforesendingdata()) return true ;
                scope.formData.exceptions = constructRequestData() ;
                if(!scope.formData.exceptions.modifiedinstallments &&
                    !scope.formData.exceptions.newinstallments &&
                    !scope.formData.exceptions.deletedinstallments) {
                    return ;
                }
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                resourceFactory.variableinstallments.validate({loanId: routeParams.accountId}, scope.formData, function (data) {
                    var validRepaymentSchedule = data ;
                    for (var i in validRepaymentSchedule.periods) {
                        var index = -1 ;
                        var date = new Date(validRepaymentSchedule.periods[i].dueDate) ;
                        for(var j in scope.modifiedinstallments) {
                            if((scope.modifiedinstallments[j].dueDate &&
                                scope.modifiedinstallments[j].dueDate.getTime() == date.getTime())) {
                                index = j ;
                                break ;
                            }
                            if(scope.modifiedinstallments[j].modifiedDueDate &&
                                scope.modifiedinstallments[j].modifiedDueDate.getTime() == date.getTime()) {
                                index = j ;
                                break ;
                            }
                        }
                        validRepaymentSchedule.periods[i].dueDate = date ;

                        if(index > -1) {
                            if(scope.modifiedinstallments[index].modifiedDueDate) {
                                validRepaymentSchedule.periods[i].originalDueDate = scope.modifiedinstallments[index].dueDate ;
                            }else {
                                validRepaymentSchedule.periods[i].originalDueDate = validRepaymentSchedule.periods[i].dueDate ;
                            }

                            if(scope.modifiedinstallments[index].principal) {
                                validRepaymentSchedule.periods[i].oroginalPrincipalDue = scope.modifiedinstallments[index].oroginalPrincipalDue ;
                            }else {
                                validRepaymentSchedule.periods[i].oroginalPrincipalDue = validRepaymentSchedule.periods[i].principalDue ;
                            }

                            if(scope.modifiedinstallments[index].installmentAmount) {
                                validRepaymentSchedule.periods[i].originaltotalInstallmentAmountForPeriod = scope.modifiedinstallments[index].originaltotalInstallmentAmountForPeriod ;
                            }else {
                                validRepaymentSchedule.periods[i].originaltotalInstallmentAmountForPeriod = validRepaymentSchedule.periods[i].totalInstallmentAmountForPeriod ;
                            }
                            validRepaymentSchedule.periods[i].formattedDueDate = dateFilter(validRepaymentSchedule.periods[i].dueDate, scope.df);
                        }else {
                            validRepaymentSchedule.periods[i].originalDueDate =  validRepaymentSchedule.periods[i].dueDate ;
                            validRepaymentSchedule.periods[i].oroginalPrincipalDue = validRepaymentSchedule.periods[i].principalDue ;
                            validRepaymentSchedule.periods[i].originaltotalInstallmentAmountForPeriod = validRepaymentSchedule.periods[i].totalInstallmentAmountForPeriod ;
                            validRepaymentSchedule.periods[i].formattedDueDate = dateFilter(validRepaymentSchedule.periods[i].dueDate, scope.df);
                        }

                    }
                    scope.loandetails.repaymentSchedule = data;
                });
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                scope.formData.exceptions = constructRequestData() ;
                resourceFactory.variableinstallments.addVariations({loanId: routeParams.accountId}, scope.formData, function (data) {
                    location.path('/viewloanaccount/' + data.loanId);
                });
            };
        }
    });

    mifosX.ng.application.controller('AdjustRepaymentSchedule', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$route', '$http', '$uibModal', 'dateFilter', 'API_VERSION', '$sce', '$rootScope', mifosX.controllers.AdjustRepaymentSchedule]).run(function ($log) {
        $log.info("AdjustRepaymentSchedule initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ApproveLoanRescheduleRequestController: function (scope, resourceFactory, routeParams, location, dateFilter) {
            scope.formData = {};
            scope.loanId = routeParams.loanId;
            scope.requestId = routeParams.requestId;

            scope.cancel = function () {
                location.path('/loans/' + scope.loanId + '/viewreschedulerequest/'+scope.requestId);
            };
            scope.approve = function(){
                this.formData.dateFormat = scope.df;
                this.formData.locale = scope.optlang.code;
                this.formData.approvedOnDate = dateFilter(this.formData.approvedOnDate, scope.df);

                resourceFactory.loanRescheduleResource.approve({scheduleId:scope.requestId},this.formData,function (data) {
                    location.path('/viewloanaccount/' + scope.loanId);
                });
            };
        }
    });
    mifosX.ng.application.controller('ApproveLoanRescheduleRequestController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.ApproveLoanRescheduleRequestController]).run(function ($log) {
        $log.info("ApproveLoanRescheduleRequestController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AssignLoanOfficerController: function (scope, resourceFactory, routeParams, location, dateFilter) {

            scope.loanOfficers = [];
            scope.formData = {};
            scope.loanId = routeParams.id;
            var fields = "id,loanOfficerId,loanOfficerOptions";
            scope.formData.assignmentDate = new Date();
            scope.restrictDate = new Date();

            resourceFactory.loanResource.get({loanId: scope.loanId, template: true, fields: fields, staffInSelectedOfficeOnly:true}, function (data) {
                if (data.loanOfficerOptions) {
                    scope.loanOfficers = data.loanOfficerOptions;
                    scope.formData.toLoanOfficerId = data.loanOfficerOptions[0].id;
                }
                scope.data = data;
            });

            scope.cancel = function () {
                location.path('/viewloanaccount/' + scope.loanId);
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.fromLoanOfficerId = scope.data.loanOfficerId || "";
                this.formData.assignmentDate = dateFilter(this.formData.assignmentDate, scope.df);
                resourceFactory.loanResource.save({command: 'assignloanofficer', loanId: scope.loanId}, this.formData, function (data) {
                    location.path('/viewloanaccount/' + data.loanId);
                });
            };

        }
    });
    mifosX.ng.application.controller('AssignLoanOfficerController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.AssignLoanOfficerController]).run(function ($log) {
        $log.info("AssignLoanOfficerController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportGuarantorController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/loans/1/guarantors/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices=data;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        scope.first.queryParams += 'officeId=' + scope.formData.officeId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }
            };

            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };
            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "guarantors"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };

            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/loans/1/guarantors/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportGuarantorController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportGuarantorController]).run(function ($log) {
        $log.info("BulkImportGuarantorController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportLoanAccountsController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/loans/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams += '&officeId=' + scope.formData.officeId;
                    }else {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }

            };

            scope.changeStaff = function() {
                if(scope.formData.staffId) {
                    if (scope.first.queryParams.indexOf("staffId")==-1) {
                        scope.first.queryParams = scope.first.queryParams + '&staffId=' + scope.formData.staffId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&staffId=\d+/i,"&staffId="+ scope.formData.staffId);
                    }
                } else {
                    if(scope.formData.officeId)
                        scope.first.queryParams = '&' + 'officeId=' + scope.formData.officeId;
                    else
                        scope.first.queryParams = '&';
                }
            };
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "loans"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };
            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/loans/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportLoanAccountsController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportLoanAccountsController]).run(function ($log) {
        $log.info("BulkImportLoanAccountsController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportLoanRepaymentController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/loans/repayments/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        scope.first.queryParams += 'officeId=' + scope.formData.officeId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }
            };

            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "loantransactions"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };

            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/loans/repayments/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportLoanRepaymentController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportLoanRepaymentController]).run(function ($log) {
        $log.info("BulkImportLoanRepaymentController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditGuarantorController: function (scope, resourceFactory, routeParams, location, dateFilter) {
            scope.template = {};
            scope.clientview = false;
            scope.date = {};
            scope.restrictDate = new Date();
            resourceFactory.guarantorResource.get({ loanId: routeParams.loanId, templateResource: routeParams.id, template: true}, function (data) {
                scope.template = data;
                scope.formData = {
                    firstname: data.firstname,
                    lastname: data.lastname,
                    city: data.city,
                    zip: data.zip,
                    mobile: data.mobileNumber,
                    residence: data.housePhoneNumber,
                    addressLine1: data.addressLine1,
                    addressLine2:data.addressLine2
                }

                if (data.clientRelationshipType) {
                    scope.formData.relationshipType = data.clientRelationshipType.id;
                }

                if (data.dob) {
                    scope.date.first = new Date(dateFilter(data.dob, scope.df));
                }
            });
            scope.submit = function () {
                var guarantor = {};
                var reqDate = dateFilter(scope.date.first, scope.df);
                guarantor.addressLine1 = this.formData.addressLine1;
                guarantor.addressLine2 = this.formData.addressLine2;
                guarantor.city = this.formData.city;
                guarantor.dob = reqDate;
                guarantor.zip = this.formData.zip;
                guarantor.dateFormat = scope.df;
                guarantor.locale = scope.optlang.code;
                guarantor.firstname = this.formData.firstname;
                guarantor.lastname = this.formData.lastname;
                guarantor.mobileNumber = this.formData.mobile;
                guarantor.housePhoneNumber = this.formData.residence;
                guarantor.clientRelationshipTypeId = this.formData.relationshipType;
                guarantor.guarantorTypeId = 3;
                resourceFactory.guarantorResource.update({ loanId: routeParams.loanId, templateResource: routeParams.id}, guarantor, function (data) {
                    location.path('listguarantors/' + routeParams.loanId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditGuarantorController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.EditGuarantorController]).run(function ($log) {
        $log.info("EditGuarantorController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditLoanAccAppController: function (scope, routeParams, resourceFactory, location, dateFilter, uiConfigService) {

            scope.previewRepayment = false;
            scope.formData = {};
            scope.chargeFormData = {}; //For charges
            scope.collateralFormData = {}; //For collaterals
            scope.collaterals = [];
            scope.restrictDate = new Date();
            scope.date = {};
            scope.rateFlag = false;

            resourceFactory.loanResource.get({loanId: routeParams.id, template: true, associations: 'charges,collateral,meeting,multiDisburseDetails',staffInSelectedOfficeOnly:true}, function (data) {
                scope.loanaccountinfo = data;

                resourceFactory.loanResource.get({resourceType: 'template', templateType: 'collateral', productId: data.loanProductId, fields: 'id,loanCollateralOptions'}, function (data) {
                    scope.collateralOptions = data.loanCollateralOptions || [];
                });

                if (data.clientId) {
                    scope.clientId = data.clientId;
                    scope.clientName = data.clientName;
                    scope.formData.clientId = scope.clientId;
                }

                if (data.group) {
                    scope.groupId = data.group.id;
                    scope.groupName = data.group.name;
                    scope.formData.groupId = scope.groupId;
                }

                if (scope.clientId && scope.groupId) {
                    scope.templateType = 'jlg';
                }
                else if (scope.groupId) {
                    scope.templateType = 'group';
                }
                else if (scope.clientId) {
                    scope.templateType = 'individual';
                }

                scope.formData.loanOfficerId = data.loanOfficerId;
                scope.formData.loanPurposeId = data.loanPurposeId;
                scope.formData.externalId = data.externalId;

                //update collaterals
                if (scope.loanaccountinfo.collateral) {
                    for (var i in scope.loanaccountinfo.collateral) {
                        scope.collaterals.push({type: scope.loanaccountinfo.collateral[i].type.id, name: scope.loanaccountinfo.collateral[i].type.name, value: scope.loanaccountinfo.collateral[i].value, description: scope.loanaccountinfo.collateral[i].description});
                    }
                }

                scope.previewClientLoanAccInfo();
                scope.ratesEnabled= scope.loanaccountinfo.isRatesEnabled;

            });

            scope.loanProductChange = function (loanProductId) {

                var inparams = { resourceType: 'template', productId: loanProductId, templateType: scope.templateType };
                if (scope.clientId) {
                    inparams.clientId = scope.clientId;
                }
                if (scope.groupId) {
                    inparams.groupId = scope.groupId;
                }

                inparams.staffInSelectedOfficeOnly = true;

                resourceFactory.loanResource.get(inparams, function (data) {
                    scope.loanaccountinfo = data;
                    scope.collaterals = [];
                    scope.previewClientLoanAccInfo();
                });

                resourceFactory.loanResource.get({resourceType: 'template', templateType: 'collateral', productId: loanProductId, fields: 'id,loanCollateralOptions'}, function (data) {
                    scope.collateralOptions = data.loanCollateralOptions || [];
                });
            }

            scope.previewClientLoanAccInfo = function () {
                scope.previewRepayment = false;
                for (var i in scope.loanaccountinfo.charges) {
                    if (scope.loanaccountinfo.charges[i].dueDate) {
                        if(scope.loanaccountinfo.charges[i].chargeTimeType.value == "Disbursement" ||
                            scope.loanaccountinfo.charges[i].chargeTimeType.value == "Tranche Disbursement"){
                            scope.loanaccountinfo.charges[i].dueDate = null;
                        }else{
                            scope.loanaccountinfo.charges[i].dueDate = new Date(scope.loanaccountinfo.charges[i].dueDate);
                        }

                    }
                }


                scope.charges = scope.loanaccountinfo.charges || [];
                scope.formData.disbursementData = scope.loanaccountinfo.disbursementDetails || [];
                if (scope.formData.disbursementData.length > 0) {
                    for (var i in scope.formData.disbursementData) {
                        scope.formData.disbursementData[i].expectedDisbursementDate = new Date(scope.formData.disbursementData[i].expectedDisbursementDate);
                    }
                }

                if (scope.loanaccountinfo.timeline.submittedOnDate) {
                    scope.formData.submittedOnDate = new Date(scope.loanaccountinfo.timeline.submittedOnDate);
                }
                if (scope.loanaccountinfo.timeline.expectedDisbursementDate) {
                    scope.formData.expectedDisbursementDate = new Date(scope.loanaccountinfo.timeline.expectedDisbursementDate);
                }
                if (scope.loanaccountinfo.interestChargedFromDate) {
                    scope.formData.interestChargedFromDate = new Date(scope.loanaccountinfo.interestChargedFromDate);
                }
                if (scope.loanaccountinfo.expectedFirstRepaymentOnDate) {
                    scope.formData.repaymentsStartingFromDate = new Date(scope.loanaccountinfo.expectedFirstRepaymentOnDate);
                }
                scope.multiDisburseLoan = scope.loanaccountinfo.multiDisburseLoan;
                scope.formData.productId = scope.loanaccountinfo.loanProductId;
                scope.formData.fundId = scope.loanaccountinfo.fundId;
                scope.formData.principal = scope.loanaccountinfo.principal;
                scope.formData.loanTermFrequency = scope.loanaccountinfo.termFrequency;
                scope.formData.loanTermFrequencyType = scope.loanaccountinfo.termPeriodFrequencyType.id;
                scope.formData.numberOfRepayments = scope.loanaccountinfo.numberOfRepayments;
                scope.formData.repaymentEvery = scope.loanaccountinfo.repaymentEvery;
                scope.formData.repaymentFrequencyType = scope.loanaccountinfo.repaymentFrequencyType.id;
                if (scope.loanaccountinfo.repaymentFrequencyNthDayType != null){
                    scope.formData.repaymentFrequencyNthDayType = scope.loanaccountinfo.repaymentFrequencyNthDayType.id;
                }
                if(scope.loanaccountinfo.repaymentFrequencyDayOfWeekType != null){
                    scope.formData.repaymentFrequencyDayOfWeekType = scope.loanaccountinfo.repaymentFrequencyDayOfWeekType.id
                }
                scope.formData.interestRatePerPeriod = scope.loanaccountinfo.interestRatePerPeriod;
                scope.formData.interestRateFrequencyType = scope.loanaccountinfo.interestRateFrequencyType.id;
                scope.formData.amortizationType = scope.loanaccountinfo.amortizationType.id;
                scope.formData.interestType = scope.loanaccountinfo.interestType.id;
                scope.formData.isEqualAmortization = scope.loanaccountinfo.isEqualAmortization;
                scope.formData.interestCalculationPeriodType = scope.loanaccountinfo.interestCalculationPeriodType.id;
                scope.formData.allowPartialPeriodInterestCalcualtion = scope.loanaccountinfo.allowPartialPeriodInterestCalcualtion;
                scope.formData.inArrearsTolerance = scope.loanaccountinfo.inArrearsTolerance;
                scope.formData.graceOnPrincipalPayment = scope.loanaccountinfo.graceOnPrincipalPayment;
                scope.formData.graceOnInterestPayment = scope.loanaccountinfo.graceOnInterestPayment;
                scope.formData.graceOnArrearsAgeing = scope.loanaccountinfo.graceOnArrearsAgeing;
                scope.formData.transactionProcessingStrategyId = scope.loanaccountinfo.transactionProcessingStrategyId;
                scope.formData.graceOnInterestCharged = scope.loanaccountinfo.graceOnInterestCharged;
                scope.formData.syncDisbursementWithMeeting = scope.loanaccountinfo.syncDisbursementWithMeeting;
                scope.formData.fixedEmiAmount = scope.loanaccountinfo.fixedEmiAmount;
                scope.formData.maxOutstandingLoanBalance = scope.loanaccountinfo.maxOutstandingLoanBalance;
                scope.formData.createStandingInstructionAtDisbursement = scope.loanaccountinfo.createStandingInstructionAtDisbursement;
                scope.formData.isTopup = scope.loanaccountinfo.isTopup;
                scope.formData.loanIdToClose = scope.loanaccountinfo.closureLoanId;

                if (scope.loanaccountinfo.meeting) {
                    scope.formData.syncRepaymentsWithMeeting = true;
                }

                if (scope.loanaccountinfo.linkedAccount) {
                    scope.formData.linkAccountId = scope.loanaccountinfo.linkedAccount.id;
                }
                if (scope.loanaccountinfo.isInterestRecalculationEnabled && scope.loanaccountinfo.interestRecalculationData.recalculationRestFrequencyDate) {
                    scope.date.recalculationRestFrequencyDate = new Date(scope.loanaccountinfo.interestRecalculationData.recalculationRestFrequencyDate);
                }
                if (scope.loanaccountinfo.isInterestRecalculationEnabled && scope.loanaccountinfo.interestRecalculationData.recalculationCompoundingFrequencyDate) {
                    scope.date.recalculationCompoundingFrequencyDate = new Date(scope.loanaccountinfo.interestRecalculationData.recalculationCompoundingFrequencyDate);
                }
                scope.formData.interestRateDifferential = scope.loanaccountinfo.interestRateDifferential ;
                scope.formData.isFloatingInterestRate = scope.loanaccountinfo.isFloatingInterestRate ;
                //Load Rates information
                scope.formData.rates = scope.loanaccountinfo.rates;
                scope.firstChange = false;
                scope.rateOptions = scope.loanaccountinfo.product.rates.filter(function(rate){
                    var exist = false;
                    scope.formData.rates.forEach(function(addedRate){
                        if(rate.id === addedRate.id){
                            exist = true;
                        }
                    });
                    return !exist;
                });
                if (scope.formData.rates && scope.formData.rates.length>0){
                    scope.rateFlag=true;
                }else{
                    scope.rateFlag=false;
                }
            };

            //Rate
            scope.rateSelected = function(currentRate){
                if(currentRate && !scope.checkIfRateAlreadyExist(currentRate)){
                    scope.rateFlag=true;
                    scope.formData.rates.push(currentRate);
                    scope.rateOptions.splice(scope.rateOptions.indexOf(currentRate),1);
                    scope.currentRate = '';
                    currentRate = '';
                    scope.calculateRates();
                }
            };

            scope.checkIfRateAlreadyExist = function(currentRate){
                var exist = false;
                scope.formData.rates.forEach(function(rate){
                    if(rate.id === currentRate.id){
                        exist = true;
                    }
                });
                return exist;
            };

            scope.calculateRates = function(){
                var total = 0;
                scope.formData.rates.forEach(function(rate){
                    total += rate.percentage;
                });
                if (total===0){
                    scope.rateFlag=false;
                    total=undefined;
                }
                scope.formData.interestRatePerPeriod = total;


            };

            scope.deleteRate = function (index){
                scope.rateOptions.push(scope.formData.rates[index]);
                scope.formData.rates.splice(index,1);
                scope.calculateRates();
            };

            scope.addCharge = function () {
                if (scope.chargeFormData.chargeId) {
                    resourceFactory.chargeResource.get({chargeId: this.chargeFormData.chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        data.id = null;
                        data.amountOrPercentage = data.amount;
                        scope.charges.push(data);
                        scope.chargeFormData.chargeId = undefined;
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.addTranches = function () {
                scope.formData.disbursementData.push({
                });
            };
            scope.deleteTranches = function (index) {
                scope.formData.disbursementData.splice(index, 1);
            }


            scope.syncRepaymentsWithMeetingchange = function () {
                if (!scope.formData.syncRepaymentsWithMeeting) {
                    scope.formData.syncDisbursementWithMeeting = false;
                }
            };

            scope.syncDisbursementWithMeetingchange = function () {
                if (scope.formData.syncDisbursementWithMeeting) {
                    scope.formData.syncRepaymentsWithMeeting = true;
                }
            };

            scope.addCollateral = function () {
                if (scope.collateralFormData.collateralIdTemplate && scope.collateralFormData.collateralValueTemplate) {
                    scope.collaterals.push({type: scope.collateralFormData.collateralIdTemplate.id, name: scope.collateralFormData.collateralIdTemplate.name, value: scope.collateralFormData.collateralValueTemplate, description: scope.collateralFormData.collateralDescriptionTemplate});
                    scope.collateralFormData.collateralIdTemplate = undefined;
                    scope.collateralFormData.collateralValueTemplate = undefined;
                    scope.collateralFormData.collateralDescriptionTemplate = undefined;
                }
            };

            scope.deleteCollateral = function (index) {
                scope.collaterals.splice(index, 1);
            };

            scope.previewRepayments = function () {
                // Make sure charges and collaterals are empty before initializing.
                delete scope.formData.charges;
                delete scope.formData.collateral;

                if (scope.charges.length > 0) {
                    scope.formData.charges = [];
                    for (var i in scope.charges) {
                        scope.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amountOrPercentage, dueDate: dateFilter(scope.charges[i].dueDate, scope.df) });
                    }
                }

                if (scope.formData.disbursementData.length > 0) {
                    for (var i in scope.formData.disbursementData) {
                        scope.formData.disbursementData[i].expectedDisbursementDate = dateFilter(scope.formData.disbursementData[i].expectedDisbursementDate,  scope.df);
                    }
                }

                if (scope.collaterals.length > 0) {
                    scope.formData.collateral = [];
                    for (var i in scope.collaterals) {
                        scope.formData.collateral.push({type: scope.collaterals[i].type, value: scope.collaterals[i].value, description: scope.collaterals[i].description});
                    }

                }

                if (this.formData.syncRepaymentsWithMeeting) {
                    if(scope.loanaccountinfo.calendarOptions){
                        this.formData.calendarId = scope.loanaccountinfo.calendarOptions[0].id;
                    }
                    scope.syncRepaymentsWithMeeting = this.formData.syncRepaymentsWithMeeting;
                }
                delete this.formData.syncRepaymentsWithMeeting;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.loanType = scope.templateType;
                this.formData.expectedDisbursementDate = dateFilter(this.formData.expectedDisbursementDate, scope.df);
                this.formData.submittedOnDate = dateFilter(this.formData.submittedOnDate, scope.df);
                this.formData.interestChargedFromDate = dateFilter(this.formData.interestChargedFromDate, scope.df);
                this.formData.repaymentsStartingFromDate = dateFilter(this.formData.repaymentsStartingFromDate, scope.df);
                if(!scope.loanaccountinfo.isLoanProductLinkedToFloatingRate) {
                    delete this.formData.interestRateDifferential ;
                    delete this.formData.isFloatingInterestRate ;
                }
                resourceFactory.loanResource.save({command: 'calculateLoanSchedule'}, this.formData, function (data) {
                    scope.repaymentscheduleinfo = data;
                    scope.previewRepayment = true;
                    scope.formData.syncRepaymentsWithMeeting = scope.syncRepaymentsWithMeeting;
                });

            }


            uiConfigService.appendConfigToScope(scope);


            scope.submit = function () {
                // Make sure charges and collaterals are empty before initializing.
                delete scope.formData.charges;
                delete scope.formData.collateral;

                if (scope.formData.disbursementData.length > 0) {
                    for (var i in scope.formData.disbursementData) {
                        scope.formData.disbursementData[i].expectedDisbursementDate = dateFilter(scope.formData.disbursementData[i].expectedDisbursementDate, scope.df);
                    }
                }

                scope.formData.charges = [];
                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {
                        scope.formData.charges.push({id: scope.charges[i].id, chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amountOrPercentage, dueDate: dateFilter(scope.charges[i].dueDate, scope.df) });
                    }
                }

                scope.formData.collateral = [];
                if (scope.collaterals.length > 0) {
                    for (var i in scope.collaterals) {
                        scope.formData.collateral.push({type: scope.collaterals[i].type, value: scope.collaterals[i].value, description: scope.collaterals[i].description});
                    }
                    ;
                }

                if (this.formData.syncRepaymentsWithMeeting) {
                    if(scope.loanaccountinfo.calendarOptions){
                        this.formData.calendarId = scope.loanaccountinfo.calendarOptions[0].id;
                    }
                }
                delete this.formData.syncRepaymentsWithMeeting;
                delete this.formData.interestRateFrequencyType;
                if(!scope.loanaccountinfo.isLoanProductLinkedToFloatingRate) {
                    delete this.formData.interestRateDifferential ;
                    delete this.formData.isFloatingInterestRate ;
                }
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.loanType = scope.templateType;
                this.formData.expectedDisbursementDate = dateFilter(this.formData.expectedDisbursementDate, scope.df);
                this.formData.submittedOnDate = dateFilter(this.formData.submittedOnDate, scope.df);
                this.formData.interestChargedFromDate = dateFilter(this.formData.interestChargedFromDate, scope.df);
                this.formData.repaymentsStartingFromDate = dateFilter(this.formData.repaymentsStartingFromDate, scope.df);
                this.formData.createStandingInstructionAtDisbursement = scope.formData.createStandingInstructionAtDisbursement;
                if (scope.date.recalculationRestFrequencyDate) {
                    var restFrequencyDate = dateFilter(scope.date.recalculationRestFrequencyDate, scope.df);
                    scope.formData.recalculationRestFrequencyDate = restFrequencyDate;
                }
                if (scope.date.recalculationCompoundingFrequencyDate) {
                    var restFrequencyDate = dateFilter(scope.date.recalculationCompoundingFrequencyDate, scope.df);
                    scope.formData.recalculationCompoundingFrequencyDate = restFrequencyDate;
                }
                if(this.formData.interestCalculationPeriodType == 0){
                    this.formData.allowPartialPeriodInterestCalcualtion = false;
                }
                resourceFactory.loanResource.put({loanId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewloanaccount/' + data.loanId);
                });
            };

            scope.cancel = function () {
                location.path('/viewloanaccount/' + routeParams.id);
            }
        }
    });
    mifosX.ng.application.controller('EditLoanAccAppController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', 'UIConfigService', mifosX.controllers.EditLoanAccAppController]).run(function ($log) {
        $log.info("EditLoanAccAppController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditLoanChargeController: function (scope, resourceFactory, routeParams, location) {

            scope.loanId = routeParams.loanId;
            scope.chargeId = routeParams.id;
            resourceFactory.loanResource.get({ resourceType: 'charges', loanId: scope.loanId, resourceId: scope.chargeId, template: true }, function (data) {
                scope.formData = {amount: data.amount};
            });

            scope.cancel = function () {
                location.path('/viewloanaccount/' + scope.loanId);
            };


            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                resourceFactory.loanResource.put({resourceType: 'charges', resourceId: scope.chargeId, loanId: scope.loanId}, this.formData, function (data) {
                    location.path('/viewloanaccount/' + data.loanId);
                });
            };

        }
    });
    mifosX.ng.application.controller('EditLoanChargeController', ['$scope', 'ResourceFactory', '$routeParams', '$location', mifosX.controllers.EditLoanChargeController]).run(function ($log) {
        $log.info("EditLoanChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditLoanCollateralController: function (scope, resourceFactory, routeParams, location) {

            scope.loanId = routeParams.loanId;
            scope.collateralId = routeParams.id;
            resourceFactory.loanResource.get({ resourceType: 'collaterals', loanId: scope.loanId, resourceId: scope.collateralId, template: true }, function (data) {
                scope.formData = {collateralTypeId: data.type.id, value: data.value, description: data.description};
                scope.collateralTypes = data.allowedCollateralTypes;
            });

            scope.cancel = function () {
                location.path('/viewloanaccount/' + scope.loanId);
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                resourceFactory.loanResource.put({resourceType: 'collaterals', resourceId: scope.collateralId, loanId: scope.loanId}, this.formData, function (data) {
                    location.path('/viewloanaccount/' + data.loanId);
                });
            };

        }
    });
    mifosX.ng.application.controller('EditLoanCollateralController', ['$scope', 'ResourceFactory', '$routeParams', '$location', mifosX.controllers.EditLoanCollateralController]).run(function ($log) {
        $log.info("EditLoanCollateralController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        GLIMLoanAccountActionsController: function (scope, resourceFactory, location, routeParams, dateFilter) {

            scope.action = routeParams.action || "";
            scope.accountId = routeParams.id; //childloanId
            scope.glimId=routeParams.glimId;
            scope.groupId=routeParams.groupId;

            scope.formData = {};
            scope.showDateField = true;
            scope.showNoteField = true;
            scope.showAmountField = false;
            scope.restrictDate = new Date();
            // Transaction UI Related
            scope.isTransaction = false;
            scope.showPaymentDetails = false;
            scope.paymentTypes = [];
            scope.expectedDisbursementDate = [];
            scope.disbursementDetails = [];
            scope.showTrancheAmountTotal = 0;
            scope.processDate = false;

            var prevLoanAmount;



            switch (scope.action) {
                case "approve":
                    scope.taskPermissionName = 'APPROVE_LOAN';
                    resourceFactory.loanTemplateResource.get({loanId: scope.accountId, templateType: 'approval'}, function (data) {

                        scope.title = 'label.heading.approveloanaccount';
                        scope.labelName = 'label.input.approvedondate';
                        scope.modelName = 'approvedOnDate';
                        scope.formData[scope.modelName] =  new Date();
                        scope.showApprovalAmount = true;
                        scope.formData.approvedLoanAmount =  data.approvalAmount;
                    });

                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'multiDisburseDetails'}, function (data) {
                        scope.expectedDisbursementDate = new Date(data.timeline.expectedDisbursementDate);
                        if(data.disbursementDetails != ""){
                            scope.disbursementDetails = data.disbursementDetails;
                            scope.approveTranches = true;
                        }
                        for(var i in data.disbursementDetails){
                            scope.disbursementDetails[i].expectedDisbursementDate = new Date(data.disbursementDetails[i].expectedDisbursementDate);
                            scope.disbursementDetails[i].principal = data.disbursementDetails[i].principal;
                            scope.showTrancheAmountTotal += Number(data.disbursementDetails[i].principal) ;
                        }
                    });
                    break;
                case "glimApprove":
                    scope.taskPermissionName = 'APPROVE_LOAN';
                    scope.showApprovalTable=true;
                    scope.approvalArray=[];
                    scope.glimAccounts=[];
                    scope.totalLoanAmount=0;
                    scope.approvalFormData=[];

                    resourceFactory.loanTemplateResource.get({loanId: scope.accountId, templateType: 'approval'}, function (data) {

                        scope.title = 'label.heading.approveloanaccount';
                        scope.labelName = 'label.input.approvedondate';
                        scope.modelName = 'approvedOnDate';
                        scope.formData[scope.modelName] =  new Date();
                        scope.showApprovalAmount = false;
                        scope.formData.approvedLoanAmount =  data.approvalAmount;
                    });
                    // start of glim

                    resourceFactory.glimLoanTemplate.get({glimId: scope.glimId}, function (data) {
                        scope.glimAccounts = data;

                        if(scope.approvalArray.length!=0)
                        {
                            scope.approvalArray=[];

                        }
                        for(i=0;i<scope.glimAccounts.length;i++)
                        {

                            var temp={};
                            temp.parentAccountNo=data[i].parentAccountNo;
                            temp.clientName=data[i].clientName;
                            temp.childLoanId=data[i].childLoanId;
                            temp.childLoanAccountNo=data[i].childLoanAccountNo;
                            temp.approvedLoanAmount=parseFloat(data[i].childPrincipalAmount);

                            scope.totalLoanAmount+=parseFloat(data[i].childPrincipalAmount);


                            scope.approvalArray.push(temp);
                        }

                    });
                    // end of glim

                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'multiDisburseDetails'}, function (data) {
                        scope.expectedDisbursementDate = new Date(data.timeline.expectedDisbursementDate);
                        if(data.disbursementDetails != ""){
                            scope.disbursementDetails = data.disbursementDetails;
                            scope.approveTranches = true;
                        }
                        for(var i in data.disbursementDetails){
                            scope.disbursementDetails[i].expectedDisbursementDate = new Date(data.disbursementDetails[i].expectedDisbursementDate);
                            scope.disbursementDetails[i].principal = data.disbursementDetails[i].principal;
                            scope.showTrancheAmountTotal += Number(data.disbursementDetails[i].principal) ;
                        }
                    });
                    break;
                case "reject":
                    scope.title = 'label.heading.rejectloanaccount';
                    scope.labelName = 'label.input.rejectedondate';
                    scope.modelName = 'rejectedOnDate';
                    scope.formData[scope.modelName] = new Date();
                    scope.taskPermissionName = 'REJECT_LOAN';
                    break;
                case "withdrawnByApplicant":
                    scope.title = 'label.heading.withdrawloanaccount';
                    scope.labelName = 'label.input.withdrawnondate';
                    scope.modelName = 'withdrawnOnDate';
                    scope.formData[scope.modelName] = new Date();
                    scope.taskPermissionName = 'WITHDRAW_LOAN';
                    break;
                case "undoapproval":
                    scope.title = 'label.heading.undoapproveloanaccount';
                    scope.showDateField = false;
                    scope.taskPermissionName = 'APPROVALUNDO_LOAN';
                    break;
                case "undodisbursal":
                    scope.title = 'label.heading.undodisburseloanaccount';
                    scope.showDateField = false;
                    scope.taskPermissionName = 'DISBURSALUNDO_LOAN';
                    break;
                case "disburse":
                    scope.modelName = 'actualDisbursementDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'disburse'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date();
                        if (data.fixedEmiAmount) {
                            scope.formData.fixedEmiAmount = data.fixedEmiAmount;
                            scope.showEMIAmountField = true;
                        }
                    });
                    scope.title = 'label.heading.disburseloanaccount';
                    scope.labelName = 'label.input.disbursedondate';
                    scope.isTransaction = true;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'DISBURSE_LOAN';
                    break;
                case "glimDisburse":
                    scope.modelName = 'actualDisbursementDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'disburse'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        // scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date();
                        if (data.fixedEmiAmount) {
                            scope.formData.fixedEmiAmount = data.fixedEmiAmount;
                            scope.showEMIAmountField = true;
                        }
                    });

                    // start of glim
                    scope.approvalArray=[];
                    scope.glimAccounts=[];
                    scope.totalLoanAmount=0;
                    scope.showDisbursalTable=true;
                    resourceFactory.glimLoanTemplate.get({glimId: scope.glimId}, function (data) {
                        scope.glimAccounts = data;

                        if(scope.approvalArray.length!=0)
                        {
                            scope.approvalArray=[];
                        }
                        for(i=0;i<scope.glimAccounts.length;i++)
                        {
                            var temp={};
                            temp.parentAccountNo=data[i].parentAccountNo;
                            temp.clientName=data[i].clientName;
                            temp.childLoanId=data[i].childLoanId;
                            temp.childLoanAccountNo=data[i].childLoanAccountNo;
                            temp.approvedLoanAmount=parseFloat(data[i].childPrincipalAmount);

                            scope.totalLoanAmount+=parseFloat(data[i].childPrincipalAmount);
                            scope.approvalArray.push(temp);

                        }
                    });
                    // end of glim

                    scope.title = 'label.heading.disburseloanaccount';
                    scope.labelName = 'label.input.disbursedondate';
                    scope.isTransaction = false;
                    scope.showAmountField = false;
                    scope.taskPermissionName = 'DISBURSE_LOAN';
                    break;
                case "disbursetosavings":
                    scope.modelName = 'actualDisbursementDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'disburseToSavings'}, function (data) {
                        scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date();
                        if (data.fixedEmiAmount) {
                            scope.formData.fixedEmiAmount = data.fixedEmiAmount;
                            scope.showEMIAmountField = true;
                        }
                    });
                    scope.title = 'label.heading.disburseloanaccount';
                    scope.labelName = 'label.input.disbursedondate';
                    scope.isTransaction = false;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'DISBURSETOSAVINGS_LOAN';
                    break;
                case "repayment":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'repayment'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                        if(data.penaltyChargesPortion>0){
                            scope.showPenaltyPortionDisplay = true;
                        }
                    });
                    scope.title = 'label.heading.loanrepayments';
                    scope.labelName = 'label.input.transactiondate';
                    scope.isTransaction = true;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'REPAYMENT_LOAN';
                    break;
                case "glimrepayment":
                    scope.formData.formDataArray=[];
                    scope.glimAccounts=[];
                    scope.repaymentArray=[];
                    scope.glimRepaymentAccounts=[];
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'repayment'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        // scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                        if(data.penaltyChargesPortion>0){
                            scope.showPenaltyPortionDisplay = true;
                        }
                    });

                    //scope.repaymentArray=new Array();
                    resourceFactory.glimLoanTemplate.get({glimId: scope.glimId}, function (data) {
                        scope.glimRepaymentAccounts = data;

                        if(scope.repaymentArray.length!=0)
                        {
                            scope.repaymentArray=[];
                        }
                        for(i=0;i<scope.glimRepaymentAccounts.length;i++)
                        {
                            var temp={};
                            temp.parentAccountNo=data[i].parentAccountNo;
                            temp.clientName=data[i].clientName;
                            temp.childLoanId=data[i].childLoanId;
                            temp.childLoanAccountNo=data[i].childLoanAccountNo;

                            resourceFactory.loanTrxnsTemplateResource.get({loanId: data[i].childLoanId, command: 'repayment'}, function (data1) {
                                if(data1.amount)
                                {
                                    temp.transactionAmount=data1.amount;
                                }
                                else {
                                    temp.transactionAmount=0;
                                }
                                //console.log(temp.transactionAmount);
                            });

                            scope.repaymentArray.push(temp);

                        }
                    });

                    scope.title = 'label.heading.loanrepayments';
                    scope.labelName = 'label.input.transactiondate';
                    scope.isTransaction = true;
                    scope.showAmountField = false;
                    scope.taskPermissionName = 'REPAYMENT_LOAN';
                    scope.showRepaymentTable=true;
                    break;
                case "prepayloan":
                    scope.modelName = 'transactionDate';
                    scope.formData.transactionDate =  new Date();
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'prepayLoan'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        scope.formData.transactionAmount = data.amount;
                        if(data.penaltyChargesPortion>0){
                            scope.showPenaltyPortionDisplay = true;
                        }
                        scope.principalPortion = data.principalPortion;
                        scope.interestPortion = data.interestPortion;
                        scope.processDate = true;
                    });
                    scope.title = 'label.heading.prepayloan';
                    scope.labelName = 'label.input.transactiondate';
                    scope.isTransaction = true;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'REPAYMENT_LOAN';
                    scope.action = 'repayment';
                    break;
                case "waiveinterest":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'waiveinterest'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                    });
                    scope.title = 'label.heading.loanwaiveinterest';
                    scope.labelName = 'label.input.interestwaivedon';
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'WAIVEINTERESTPORTION_LOAN';
                    break;
                case "writeoff":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'writeoff'}, function (data) {
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                        scope.writeOffAmount = data.amount;
                        scope.isLoanWriteOff = true;
                    });
                    scope.title = 'label.heading.writeoffloanaccount';
                    scope.labelName = 'label.input.writeoffondate';
                    scope.taskPermissionName = 'WRITEOFF_LOAN';
                    break;
                case "close-rescheduled":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'close-rescheduled'}, function (data) {
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                    });
                    scope.title = 'label.heading.closeloanaccountasrescheduled';
                    scope.labelName = 'label.input.closedondate';
                    scope.taskPermissionName = 'CLOSEASRESCHEDULED_LOAN';
                    break;
                case "close":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'close'}, function (data) {
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                    });
                    scope.title = 'label.heading.closeloanaccount';
                    scope.labelName = 'label.input.closedondate';
                    scope.taskPermissionName = 'CLOSE_LOAN';
                    break;
                case "unassignloanofficer":
                    scope.title = 'label.heading.unassignloanofficer';
                    scope.labelName = 'label.input.loanofficerunassigneddate';
                    scope.modelName = 'unassignedDate';
                    scope.showNoteField = false;
                    scope.formData[scope.modelName] = new Date();
                    scope.taskPermissionName = 'REMOVELOANOFFICER_LOAN';
                    break;
                case "modifytransaction":
                    resourceFactory.loanTrxnsResource.get({loanId: scope.accountId, transactionId: routeParams.transactionId, template: 'true'},
                        function (data) {
                            scope.title = 'label.heading.editloanaccounttransaction';
                            scope.labelName = 'label.input.transactiondate';
                            scope.modelName = 'transactionDate';
                            scope.paymentTypes = data.paymentTypeOptions || [];
                            scope.formData.transactionAmount = data.amount;
                            scope.formData[scope.modelName] = new Date(data.date) || new Date();
                            if (data.paymentDetailData) {
                                if (data.paymentDetailData.paymentType) {
                                    scope.formData.paymentTypeId = data.paymentDetailData.paymentType.id;
                                }
                                scope.formData.accountNumber = data.paymentDetailData.accountNumber;
                                scope.formData.checkNumber = data.paymentDetailData.checkNumber;
                                scope.formData.routingCode = data.paymentDetailData.routingCode;
                                scope.formData.receiptNumber = data.paymentDetailData.receiptNumber;
                                scope.formData.bankNumber = data.paymentDetailData.bankNumber;
                            }
                        });
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.showAmountField = true;
                    scope.isTransaction = true;
                    scope.showPaymentDetails = false;
                    scope.taskPermissionName = 'ADJUST_LOAN';
                    break;
                case "deleteloancharge":
                    scope.showDelete = true;
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'DELETE_LOANCHARGE';
                    break;
                case "recoverguarantee":
                    scope.showDelete = true;
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'RECOVERGUARANTEES_LOAN';
                    break;
                case "waivecharge":
                    resourceFactory.LoanAccountResource.get({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, function (data) {
                        if (data.chargeTimeType.value !== "Specified due date" && data.installmentChargeData) {
                            scope.installmentCharges = data.installmentChargeData;
                            scope.formData.installmentNumber = data.installmentChargeData[0].installmentNumber;
                            scope.installmentchargeField = true;
                        } else {
                            scope.installmentchargeField = false;
                            scope.showwaiveforspecicficduedate = true;
                        }
                    });

                    scope.title = 'label.heading.waiveloancharge';
                    scope.labelName = 'label.input.installment';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'WAIVE_LOANCHARGE';
                    break;
                case "paycharge":
                    resourceFactory.LoanAccountResource.get({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, command: 'pay'}, function (data) {
                        if (data.dueDate) {
                            scope.formData.transactionDate = new Date(data.dueDate);
                        }
                        if (data.chargeTimeType.value === "Instalment Fee" && data.installmentChargeData) {
                            scope.installmentCharges = data.installmentChargeData;
                            scope.formData.installmentNumber = data.installmentChargeData[0].installmentNumber;
                            scope.installmentchargeField = true;
                        }
                    });
                    scope.title = 'label.heading.payloancharge';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.paymentDatefield = true;
                    scope.taskPermissionName = 'PAY_LOANCHARGE';
                    break;
                case "editcharge":
                    resourceFactory.LoanAccountResource.get({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, function (data) {
                        if (data.amountOrPercentage) {
                            scope.showEditChargeAmount = true;
                            scope.formData.amount = data.amountOrPercentage;
                            if (data.dueDate) {
                                scope.formData.dueDate = new Date(data.dueDate);
                                scope.showEditChargeDueDate = true;
                            }
                        }

                    });
                    scope.title = 'label.heading.editcharge';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UPDATE_LOANCHARGE';
                    break;
                case "editdisbursedate":
                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'multiDisburseDetails'}, function (data) {
                        scope.showEditDisburseDate = true;
                        scope.formData.approvedLoanAmount = data.approvedPrincipal;
                        scope.expectedDisbursementDate = new Date(data.timeline.expectedDisbursementDate);
                        for(var i in data.disbursementDetails){
                            if(routeParams.disbursementId == data.disbursementDetails[i].id){
                                scope.formData.updatedExpectedDisbursementDate = new Date(data.disbursementDetails[i].expectedDisbursementDate);
                                scope.formData.updatedPrincipal = data.disbursementDetails[i].principal;
                                scope.id = data.disbursementDetails[i].id;
                            }
                        }
                    });

                    scope.title = 'label.heading.editdisbursedate';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UPDATE_DISBURSEMENTDETAIL';
                    break;
                case "recoverypayment":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'recoverypayment'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date();
                    });
                    scope.title = 'label.heading.recoverypayment';
                    scope.labelName = 'label.input.transactiondate';
                    scope.isTransaction = true;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'RECOVERYPAYMENT_LOAN';
                    break;
                case "adddisbursedetails":
                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'multiDisburseDetails'}, function (data) {
                        scope.addDisburseDetails = true;
                        scope.formData.approvedLoanAmount = data.approvedPrincipal;
                        scope.expectedDisbursementDate = new Date(data.timeline.expectedDisbursementDate);

                        if(data.disbursementDetails != ""){
                            scope.disbursementDetails = data.disbursementDetails;
                        }
                        if (scope.disbursementDetails.length > 0) {
                            for (var i in scope.disbursementDetails) {
                                scope.disbursementDetails[i].expectedDisbursementDate = new Date(scope.disbursementDetails[i].expectedDisbursementDate);
                            }
                        }
                        scope.disbursementDetails.push({
                        });
                    });

                    scope.title = 'label.heading.adddisbursedetails';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UPDATE_DISBURSEMENTDETAIL';
                    break;
                case "deletedisbursedetails":
                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'multiDisburseDetails'}, function (data) {
                        scope.deleteDisburseDetails = true;
                        scope.formData.approvedLoanAmount = data.approvedPrincipal;
                        scope.expectedDisbursementDate = new Date(data.timeline.expectedDisbursementDate);
                        if(data.disbursementDetails != ""){
                            scope.disbursementDetails = data.disbursementDetails;
                        }
                        if (scope.disbursementDetails.length > 0) {
                            for (var i in scope.disbursementDetails) {
                                scope.disbursementDetails[i].expectedDisbursementDate = new Date(scope.disbursementDetails[i].expectedDisbursementDate);
                            }
                        }
                    });

                    scope.title = 'label.heading.deletedisbursedetails';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UPDATE_DISBURSEMENTDETAIL';
                    break;
            }

            scope.cancel = function () {
                location.path('/viewglimaccount/' +scope.groupId+"/" +routeParams.id +"/"+routeParams.glimId);
            };

            scope.addTrancheAmounts = function(){
                scope.showTrancheAmountTotal = 0;
                for(var i in scope.disbursementDetails ){
                    scope.showTrancheAmountTotal += Number(scope.disbursementDetails[i].principal);
                }
            };

            scope.deleteTranches = function (index) {
                scope.disbursementDetails.splice(index, 1);
            };

            scope.addTranches = function () {
                scope.disbursementDetails.push({
                });
            };

            scope.submit = function () {
                scope.processDate = false;
                var params = {command: scope.action};
                if(scope.action == "recoverguarantee"){
                    params.command = "recoverGuarantees";
                }
                if(scope.action == "approve"){
                    this.formData.expectedDisbursementDate = dateFilter(scope.expectedDisbursementDate, scope.df);
                    if(scope.disbursementDetails != null) {
                        this.formData.disbursementData = [];
                        for (var i in  scope.disbursementDetails) {
                            this.formData.disbursementData.push({
                                id: scope.disbursementDetails[i].id,
                                principal: scope.disbursementDetails[i].principal,
                                expectedDisbursementDate: dateFilter(scope.disbursementDetails[i].expectedDisbursementDate, scope.df),
                                loanChargeId : scope.disbursementDetails[i].loanChargeId
                            });
                        }
                    }
                    if(scope.formData.approvedLoanAmount == null){
                        scope.formData.approvedLoanAmount = scope.showTrancheAmountTotal;
                    }
                }

                if(scope.action == "glimApprove"){
                    approvalFormData=[];
                    this.formData.approvalFormData=[];
                    this.formData.glimPrincipal=0;
                    for(var j=0;j<scope.glimAccounts.length;j++)
                    {
                        approvalFormData[j]={};
                        approvalFormData[j].loanId=scope.approvalArray[j].childLoanId;
                        approvalFormData[j].approvedOnDate=dateFilter(scope.formData['approvedOnDate'], scope.df);
                        approvalFormData[j].approvedLoanAmount=scope.approvalArray[j].approvedLoanAmount;
                        approvalFormData[j].expectedDisbursementDate=dateFilter(scope.expectedDisbursementDate, scope.df);
                        approvalFormData[j].locale = scope.optlang.code;
                        approvalFormData[j].dateFormat = scope.df;
                        this.formData.glimPrincipal+=parseFloat(approvalFormData[j].approvedLoanAmount);
                    }
                    this.formData.locale = scope.optlang.code;
                    scope.formData.approvedLoanAmount =parseFloat(this.formData.glimPrincipal);
                    this.formData.approvalFormData=approvalFormData;
                    // this.formData.expectedDisbursementDate = dateFilter(scope.expectedDisbursementDate, scope.df);
                    if(scope.disbursementDetails != null) {
                        this.formData.disbursementData = [];
                        for (var i in  scope.disbursementDetails) {
                            this.formData.disbursementData.push({
                                id: scope.disbursementDetails[i].id,
                                principal: scope.disbursementDetails[i].principal,
                                expectedDisbursementDate: dateFilter(scope.disbursementDetails[i].expectedDisbursementDate, scope.df),
                                loanChargeId : scope.disbursementDetails[i].loanChargeId
                            });
                        }
                    }
                    if(scope.formData.approvedLoanAmount == null){
                        scope.formData.approvedLoanAmount = scope.showTrancheAmountTotal;
                    }
                }

                if (this.formData[scope.modelName]) {
                    this.formData[scope.modelName] = dateFilter(this.formData[scope.modelName], scope.df);
                }
                if (scope.action != "glimApprove" && scope.action != "undoapproval" && scope.action != "undodisbursal" || scope.action === "paycharge") {
                    this.formData.locale = scope.optlang.code;
                    this.formData.dateFormat = scope.df;
                }
                if (scope.action == "repayment" || scope.action == "waiveinterest" || scope.action == "writeoff" || scope.action == "close-rescheduled"
                    || scope.action == "close" || scope.action == "modifytransaction" || scope.action == "recoverypayment" || scope.action == "prepayloan") {
                    if (scope.action == "modifytransaction") {
                        params.command = 'modify';
                        params.transactionId = routeParams.transactionId;
                    }
                    params.loanId = scope.accountId;
                    resourceFactory.loanTrxnsResource.save(params, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action == "deleteloancharge") {
                    resourceFactory.LoanAccountResource.delete({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action === "waivecharge") {
                    resourceFactory.LoanAccountResource.save({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, 'command': 'waive'}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action === "paycharge") {
                    this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                    resourceFactory.LoanAccountResource.save({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, 'command': 'pay'}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action === "editcharge") {
                    this.formData.dueDate = dateFilter(this.formData.dueDate, scope.df);
                    resourceFactory.LoanAccountResource.update({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action === "editdisbursedate") {
                    this.formData.expectedDisbursementDate = dateFilter(this.formData.expectedDisbursementDate, scope.df);
                    for(var i in scope.disbursementDetails){
                        if(scope.disbursementDetails[i].id == scope.id){
                            scope.disbursementDetails[i].principal = scope.formData.updatedPrincipal;
                            scope.disbursementDetails[i].expectedDisbursementDate = dateFilter(scope.formData.updatedExpectedDisbursementDate, scope.df);
                        }
                    }
                    this.formData.disbursementData = [];
                    this.formData.updatedExpectedDisbursementDate = dateFilter(scope.formData.updatedExpectedDisbursementDate, scope.df);
                    this.formData.expectedDisbursementDate = dateFilter(scope.expectedDisbursementDate, scope.df);

                    for (var i in  scope.disbursementDetails) {
                        this.formData.disbursementData.push({
                            id: scope.disbursementDetails[i].id,
                            principal: scope.disbursementDetails[i].principal,
                            expectedDisbursementDate: dateFilter(scope.disbursementDetails[i].expectedDisbursementDate, scope.df),
                            loanChargeId : scope.disbursementDetails[i].loanChargeId
                        });
                    }
                    resourceFactory.LoanEditDisburseResource.update({loanId: routeParams.id, disbursementId: routeParams.disbursementId}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                }else if(scope.action === "adddisbursedetails" || scope.action === "deletedisbursedetails") {
                    this.formData.disbursementData = [];
                    for (var i in  scope.disbursementDetails) {
                        this.formData.disbursementData.push({
                            id:scope.disbursementDetails[i].id,
                            principal: scope.disbursementDetails[i].principal,
                            expectedDisbursementDate: dateFilter(scope.disbursementDetails[i].expectedDisbursementDate, scope.df),
                            loanChargeId : scope.disbursementDetails[i].loanChargeId
                        });
                    }

                    this.formData.expectedDisbursementDate = dateFilter(scope.expectedDisbursementDate, scope.df);
                    resourceFactory.LoanAddTranchesResource.update({loanId: routeParams.id}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                }
                else if (scope.action == "deleteloancharge") {
                    resourceFactory.LoanAccountResource.delete({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                }  else if(scope.action == "Approve"){
                    this.formData.expectedDisbursementDate = dateFilter(scope.expectedDisbursementDate, scope.df);
                    if(scope.disbursementDetails != null) {
                        this.formData.disbursementData = [];
                        for (var i in  scope.disbursementDetails) {
                            this.formData.disbursementData.push({
                                id: scope.disbursementDetails[i].id,
                                principal: scope.disbursementDetails[i].principal,
                                expectedDisbursementDate: dateFilter(scope.disbursementDetails[i].expectedDisbursementDate, scope.df),
                                loanChargeId : scope.disbursementDetails[i].loanChargeId
                            });
                        }
                    }
                    if(scope.formData.approvedLoanAmount == null){
                        scope.formData.approvedLoanAmount = scope.showTrancheAmountTotal;
                    }
                }
                else if(scope.action == "glimApprove")
                {
                    resourceFactory.glimLoan.post({glimId: scope.glimId,command:'approve'},this.formData,function (data) {
                        location.path('/viewglimaccount/' +scope.groupId+"/" +routeParams.id +"/"+routeParams.glimId);
                    });
                }

                else if(scope.action == "glimDisburse"){
                    resourceFactory.glimLoan.post({glimId: scope.glimId,command:'disburse'},this.formData,function (data) {
                        location.path('/viewglimaccount/' +scope.groupId+"/" +routeParams.id +"/"+routeParams.glimId);
                    });
                }else if(scope.action == "undoapproval"){

                    resourceFactory.glimLoan.post({glimId: scope.glimId,command:'undoapproval'},scope.formData,function (data) {

                        location.path('/viewloanaccount/' + scope.accountId);
                    });

                }else if(scope.action == "undodisbursal"){

                    resourceFactory.glimLoan.post({glimId: scope.glimId,command:"undodisbursal"},scope.formData,function (data) {
                        location.path('/viewloanaccount/' + scope.accountId);
                    });
                }
                else  if(scope.action=="glimrepayment")
                {
                    scope.formData.formDataArray=[];

                    var j=0;
                    for(j=0;j<scope.repaymentArray.length;j++)
                    {
                        var temp1={};
                        temp1.paymentTypeId= scope.formData.paymentTypeId;
                        temp1.transactionAmount=scope.repaymentArray[j].transactionAmount
                        temp1.transactionDate=  scope.formData['transactionDate'];
                        temp1.locale = scope.optlang.code;
                        temp1.dateFormat = scope.df;
                        temp1.loanId=scope.repaymentArray[j].childLoanId;
                        scope.formData.formDataArray.push(temp1);
                    }

                    resourceFactory.glimLoan.save({glimId: scope.glimId,command:'glimrepayment'}, this.formData, function (data) {

                        location.path('/viewglimaccount/' +scope.groupId+"/" +routeParams.id +"/"+routeParams.glimId);

                    });
                }
                else
                {
                    params.glimId = scope.glimId;
                    resourceFactory.glimLoan.save(params, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                }
            };

            scope.$watch('formData.transactionDate',function(){
                scope.onDateChange();
            });

            scope.onDateChange = function(){
                if(scope.processDate) {
                    var params = {};
                    params.locale = scope.optlang.code;
                    params.dateFormat = scope.df;
                    params.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                    params.loanId = scope.accountId;
                    params.command = 'prepayLoan';
                    resourceFactory.loanTrxnsTemplateResource.get(params, function (data) {
                        scope.formData.transactionAmount = data.amount;
                        if (data.penaltyChargesPortion > 0) {
                            scope.showPenaltyPortionDisplay = true;
                        }
                        scope.principalPortion = data.principalPortion;
                        scope.interestPortion = data.interestPortion;
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('GLIMLoanAccountActionsController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.GLIMLoanAccountActionsController]).run(function ($log) {
        $log.info("GLIMLoanAccountActionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        GuarantorController: function ($q,scope, resourceFactory, routeParams, location, dateFilter) {
            scope.template = {};
            scope.clientview = false;
            scope.temp = true;
            scope.date = {};
            scope.formData = {};
            scope.restrictDate = new Date();
            scope.clientData={};
            scope.offices=[];
            scope.toClients=[];

            resourceFactory.clientTemplateResource.get(function(data) {
                scope.offices=data.officeOptions;
                scope.formData.officeId=scope.offices[0].id;
            });

            scope.changeOffice=function(officeId){
                resourceFactory.clientTemplateResource.get({officeId:officeId},function (data) {
                    scope.staffs=data.staffOptions;
                });
            };

            resourceFactory.guarantorResource.get({ loanId: routeParams.id, templateResource: 'template'}, function (data) {
                scope.template = data;
                scope.loanId = routeParams.id;
            });

            scope.clientOptions=function(value){
            var deferred=$q.defer();
                resourceFactory.clientResource.getAllClientsWithoutLimit({displayName:value, orderBy: 'displayName', officeId:
                scope.formData.officeId,sortOrder: 'ASC'},function (data) {
                    deferred.resolve(data.pageItems);
                });
                return deferred.promise;
            }


            scope.viewClient = function (item) {
                scope.clientview = true;
                scope.client = item;
                scope.changeEvent();
            };
            scope.checkClient = function () {
                if (!scope.temp) {
                    scope.clientview = false;
                }
            };

            scope.changeEvent = function () {
                resourceFactory.guarantorAccountResource.get({ loanId: routeParams.id, clientId: scope.client.id},  function (data) {
                    scope.accounts = data.accountLinkingOptions;
                });
            }

            scope.submit = function () {
                var guarantor = {};
                var reqDate = dateFilter(scope.date.first, scope.df);
                if (scope.temp == true) {
                    guarantor.guarantorTypeId = scope.template.guarantorTypeOptions[0].id;
                    guarantor.locale = scope.optlang.code;
                    if (this.formData) {
                        guarantor.clientRelationshipTypeId = this.formData.relationship;
                    }
                    if (scope.client) {
                        guarantor.entityId = scope.client.id;
                        guarantor.savingsId =  this.formData.savingsId;
                        guarantor.amount =  this.formData.amount;
                    }
                }
                else if (this.formData) {
                    guarantor.addressLine1 = this.formData.addressLine1;
                    guarantor.addressLine2 = this.formData.addressLine2;
                    guarantor.city = this.formData.city;
                    guarantor.dob = reqDate;
                    guarantor.zip = this.formData.zip;
                    guarantor.dateFormat = scope.df;
                    guarantor.locale = scope.optlang.code;
                    guarantor.firstname = this.formData.firstname;
                    guarantor.lastname = this.formData.lastname;
                    guarantor.mobileNumber = this.formData.mobile;
                    guarantor.housePhoneNumber = this.formData.residence;
                    guarantor.guarantorTypeId = scope.template.guarantorTypeOptions[2].id;
                    guarantor.clientRelationshipTypeId = this.formData.relationshipType;
                }
                resourceFactory.guarantorResource.save({ loanId: routeParams.id}, guarantor, function (data) {
                    location.path('viewloanaccount/' + routeParams.id);
                });
            };
        }
    });
   mifosX.ng.application.controller('GuarantorController', ['$q','$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.GuarantorController]).run(function ($log) {
        $log.info("GuarantorController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ListGuarantorController: function (scope, routeParams, resourceFactory, location, route, http, $uibModal, dateFilter, API_VERSION, $sce, $rootScope) {

            scope.modified = 0;
            resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'guarantors'}, function (data) {
                scope.loandetails = data;
                scope.guarantorDetails = data.guarantors;
                scope.status = data.status.value;
                scope.decimals = data.currency.decimalPlaces;
                scope.changedDetail = [];
                scope.hideDeletedGuarantors=true;
                scope.hideWithDrawnGuarantors=true;
                scope.isHideDeletedGuarantorsCheckboxChecked = true;
                scope.updateCheckBoxStatus = function (){
                    scope.isHideDeletedGuarantorsCheckboxChecked = !scope.isHideDeletedGuarantorsCheckboxChecked;
                };
            });


            scope.showDetails = function (parentindex, index) {
                scope.guarantorData = scope.guarantorDetails[parentindex];
                if (index == null) {
                    scope.guarantorFundDetail = null;
                } else {
                    scope.guarantorFundDetail = scope.guarantorData.guarantorFundingDetails[index];
                }

                $uibModal.open({
                    templateUrl: 'viewguarantor.html',
                    controller: GuarantorViewCtrl,
                    resolve: {
                        guarantorFundDetail: function () {
                            return scope.guarantorFundDetail;
                        },
                        guarantorData: function () {
                            return scope.guarantorData;
                        }
                    }
                });
            };


            var GuarantorViewCtrl = function ($scope, $uibModalInstance, guarantorData, guarantorFundDetail) {
                $scope.guarantorFundDetail = guarantorFundDetail;
                $scope.guarantorData = guarantorData;
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };


            scope.deleteGuarantor = function (id,fundId) {
                scope.guarantorId = id;
                scope.guarantorFundId = fundId;
                $uibModal.open({
                    templateUrl: 'deleteguarantor.html',
                    controller: GuarantorDeleteCtrl,
                    resolve: {
                        id: function () {
                            return scope.guarantorId;
                        },
                        fundId: function () {
                            return scope.guarantorFundId;
                        }
                    }
                });
            };
            var GuarantorDeleteCtrl = function ($scope, $uibModalInstance, id, fundId) {
                $scope.delete = function () {
                    resourceFactory.guarantorResource.delete({loanId: routeParams.id, templateResource: id,guarantorFundingId:fundId}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ListGuarantorController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$route', '$http', '$uibModal', 'dateFilter', 'API_VERSION', '$sce', '$rootScope', mifosX.controllers.ListGuarantorController]).run(function ($log) {
        $log.info("ListGuarantorController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        LoanAccountActionsController: function (scope, rootScope, resourceFactory, location, routeParams, dateFilter) {

            scope.action = routeParams.action || "";
            scope.accountId = routeParams.id;
            scope.formData = {};
            scope.entityformData = {datatables:{}};
            scope.showDateField = true;
            scope.showNoteField = true;
            scope.showAmountField = false;
            scope.restrictDate = new Date();
            // Transaction UI Related
            scope.isTransaction = false;
            scope.showPaymentDetails = false;
            scope.paymentTypes = [];
            scope.form = {};
            scope.form.expectedDisbursementDate = [];
            scope.disbursementDetails = [];
            scope.showTrancheAmountTotal = 0;
            scope.processDate = false;
            scope.submittedDatatables = [];
            var submitStatus = [];

            rootScope.RequestEntities = function(entity,status,productId){
                resourceFactory.entityDatatableChecksResource.getAll({limit:-1},function (response) {
                    scope.entityDatatableChecks = _.filter(response.pageItems , function(datatable){
                        var specificProduct = (datatable.entity == entity && datatable.status.value == status && datatable.productId == productId);
                        var AllProducts = (datatable.entity == entity && datatable.status.value == status);
                        return (datatable.productId?specificProduct:AllProducts);
                    });
                    scope.entityDatatableChecks = _.pluck(scope.entityDatatableChecks,'datatableName');
                    scope.datatables = [];
                    var k=0;
                    _.each(scope.entityDatatableChecks,function(entitytable) {
                        resourceFactory.DataTablesResource.getTableDetails({datatablename:entitytable,entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                            data.registeredTableName = entitytable;
                            var colName = data.columnHeaders[0].columnName;
                            if (colName == 'id') {
                                data.columnHeaders.splice(0, 1);
                            }

                            colName = data.columnHeaders[0].columnName;
                            if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                                data.columnHeaders.splice(0, 1);
                                scope.isCenter = (colName == 'center_id') ? true : false;
                            }


                            data.noData = (data.data.length == 0);
                            if(data.noData){
                                scope.datatables.push(data);
                                scope.entityformData.datatables[k] = {data:{}};
                                submitStatus[k] = "save";
                                _.each(data.columnHeaders,function(Header){
                                    scope.entityformData.datatables[k].data[Header.columnName] = "";
                                });
                                k++;
                                scope.isEntityDatatables = true;
                            }
                        });


                    });

                });
            };

            scope.fetchEntities = function(entity,status,productId){
                if(!productId){
                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id}, function (data) {
                        scope.productId = data.loanProductId;
                        rootScope.RequestEntities(entity,status,scope.productId);
                    });
                }
                else{
                   rootScope.RequestEntities(entity,status,productId);
                }
            };

            //Stack overflow
            function asyncLoop(iterations, func, callback) {
                var index = 0;
                var done = false;
                var loop = {
                    next: function() {
                        if (done) {
                            return;
                        }

                        if (index < iterations) {
                            index++;
                            func(loop);

                        } else {
                            done = true;
                            callback();
                        }
                    },

                    iteration: function() {
                        return index - 1;
                    },

                    break: function() {
                        done = true;
                    }
                };
                loop.next();
                return loop;
            }

            switch (scope.action) {
                case "approve":
                    scope.taskPermissionName = 'APPROVE_LOAN';
                    resourceFactory.loanTemplateResource.get({loanId: scope.accountId, templateType: 'approval'}, function (data) {

                        scope.title = 'label.heading.approveloanaccount';
                        scope.labelName = 'label.input.approvedondate';
                        scope.modelName = 'approvedOnDate';
                        scope.formData[scope.modelName] =  new Date();
                        scope.showApprovalAmount = true;
                        scope.formData.approvedLoanAmount =  data.approvalAmount;
                    });
                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'multiDisburseDetails'}, function (data) {
                        scope.form.expectedDisbursementDate = new Date(data.timeline.expectedDisbursementDate);
                        scope.productId = data.loanProductId;
                        if(data.disbursementDetails != ""){
                            scope.disbursementDetails = data.disbursementDetails;
                            scope.approveTranches = true;
                        }
                        for(var i in data.disbursementDetails){
                            scope.disbursementDetails[i].expectedDisbursementDate = new Date(data.disbursementDetails[i].expectedDisbursementDate);
                            scope.disbursementDetails[i].principal = data.disbursementDetails[i].principal;
                            scope.showTrancheAmountTotal += Number(data.disbursementDetails[i].principal) ;
                        }
                        scope.fetchEntities('m_loan','APPROVE',scope.productId);
                    });
                    break;
                case "reject":
                    scope.title = 'label.heading.rejectloanaccount';
                    scope.labelName = 'label.input.rejectedondate';
                    scope.modelName = 'rejectedOnDate';
                    scope.formData[scope.modelName] = new Date();
                    scope.taskPermissionName = 'REJECT_LOAN';
                    scope.fetchEntities('m_loan','REJECTED');
                    break;
                case "withdrawnByApplicant":
                    scope.title = 'label.heading.withdrawloanaccount';
                    scope.labelName = 'label.input.withdrawnondate';
                    scope.modelName = 'withdrawnOnDate';
                    scope.formData[scope.modelName] = new Date();
                    scope.taskPermissionName = 'WITHDRAW_LOAN';
                    scope.fetchEntities('m_loan','WITHDRAWN');
                    break;
                case "undoapproval":
                    scope.title = 'label.heading.undoapproveloanaccount';
                    scope.showDateField = false;
                    scope.taskPermissionName = 'APPROVALUNDO_LOAN';
                    break;
                case "undodisbursal":
                    scope.title = 'label.heading.undodisburseloanaccount';
                    scope.showDateField = false;
                    scope.taskPermissionName = 'DISBURSALUNDO_LOAN';
                    break;
                case "disburse":
                    scope.modelName = 'actualDisbursementDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'disburse'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date();
                        if (data.fixedEmiAmount) {
                            scope.formData.fixedEmiAmount = data.fixedEmiAmount;
                            scope.showEMIAmountField = true;
                        }
                    });
                    scope.title = 'label.heading.disburseloanaccount';
                    scope.labelName = 'label.input.disbursedondate';
                    scope.isTransaction = true;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'DISBURSE_LOAN';
                    scope.fetchEntities('m_loan','DISBURSE');
                    break;
                case "disbursetosavings":
                    scope.modelName = 'actualDisbursementDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'disburseToSavings'}, function (data) {
                       scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date();
                        if (data.fixedEmiAmount) {
                            scope.formData.fixedEmiAmount = data.fixedEmiAmount;
                            scope.showEMIAmountField = true;
                        }
                    });
                    scope.title = 'label.heading.disburseloanaccount';
                    scope.labelName = 'label.input.disbursedondate';
                    scope.isTransaction = false;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'DISBURSETOSAVINGS_LOAN';
                    break;
                case "repayment":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'repayment'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                        if(data.penaltyChargesPortion>0){
                            scope.showPenaltyPortionDisplay = true;
                        }
                    });
                    scope.title = 'label.heading.loanrepayments';
                    scope.labelName = 'label.input.transactiondate';
                    scope.isTransaction = true;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'REPAYMENT_LOAN';
                    break;
                case "prepayloan":
                    scope.modelName = 'transactionDate';
                    scope.formData.transactionDate =  new Date();
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'prepayLoan'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        scope.formData.transactionAmount = data.amount;
                        if(data.penaltyChargesPortion>0){
                            scope.showPenaltyPortionDisplay = true;
                        }
                        scope.principalPortion = data.principalPortion;
                        scope.interestPortion = data.interestPortion;
                        scope.feeChargesPortion = data.feeChargesPortion;
                        scope.processDate = true;
                    });
                    scope.title = 'label.heading.prepayloan';
                    scope.labelName = 'label.input.transactiondate';
                    scope.isTransaction = true;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'REPAYMENT_LOAN';
                    scope.action = 'repayment';
                    break;
                case "waiveinterest":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'waiveinterest'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                    });
                    scope.title = 'label.heading.loanwaiveinterest';
                    scope.labelName = 'label.input.interestwaivedon';
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'WAIVEINTERESTPORTION_LOAN';
                    break;
                case "writeoff":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'writeoff'}, function (data) {
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                        scope.writeOffAmount = data.amount;
                        scope.isLoanWriteOff = true;
                    });
                    scope.title = 'label.heading.writeoffloanaccount';
                    scope.labelName = 'label.input.writeoffondate';
                    scope.taskPermissionName = 'WRITEOFF_LOAN';
                    scope.fetchEntities('m_loan','WRITE_OFF');
                    break;
                case "close-rescheduled":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'close-rescheduled'}, function (data) {
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                    });
                    scope.title = 'label.heading.closeloanaccountasrescheduled';
                    scope.labelName = 'label.input.closedondate';
                    scope.taskPermissionName = 'CLOSEASRESCHEDULED_LOAN';
                    break;
                case "close":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'close'}, function (data) {
                        scope.formData[scope.modelName] = new Date(data.date) || new Date();
                    });
                    scope.title = 'label.heading.closeloanaccount';
                    scope.labelName = 'label.input.closedondate';
                    scope.taskPermissionName = 'CLOSE_LOAN';
                    break;
                case "unassignloanofficer":
                    scope.title = 'label.heading.unassignloanofficer';
                    scope.labelName = 'label.input.loanofficerunassigneddate';
                    scope.modelName = 'unassignedDate';
                    scope.showNoteField = false;
                    scope.formData[scope.modelName] = new Date();
                    scope.taskPermissionName = 'REMOVELOANOFFICER_LOAN';
                    break;
                case "modifytransaction":
                    resourceFactory.loanTrxnsResource.get({loanId: scope.accountId, transactionId: routeParams.transactionId, template: 'true'},
                        function (data) {
                            scope.title = 'label.heading.editloanaccounttransaction';
                            scope.labelName = 'label.input.transactiondate';
                            scope.modelName = 'transactionDate';
                            scope.paymentTypes = data.paymentTypeOptions || [];
                            scope.formData.transactionAmount = data.amount;
                            scope.formData[scope.modelName] = new Date(data.date) || new Date();
                            if (data.paymentDetailData) {
                                if (data.paymentDetailData.paymentType) {
                                    scope.formData.paymentTypeId = data.paymentDetailData.paymentType.id;
                                }
                                scope.formData.accountNumber = data.paymentDetailData.accountNumber;
                                scope.formData.checkNumber = data.paymentDetailData.checkNumber;
                                scope.formData.routingCode = data.paymentDetailData.routingCode;
                                scope.formData.receiptNumber = data.paymentDetailData.receiptNumber;
                                scope.formData.bankNumber = data.paymentDetailData.bankNumber;
                            }
                        });
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.showAmountField = true;
                    scope.isTransaction = true;
                    scope.showPaymentDetails = false;
                    scope.taskPermissionName = 'ADJUST_LOAN';
                    break;
                case "deleteloancharge":
                    scope.showDelete = true;
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'DELETE_LOANCHARGE';
                    break;
                case "recoverguarantee":
                    scope.showDelete = true;
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'RECOVERGUARANTEES_LOAN';
                    break;
                case "waivecharge":
                    resourceFactory.LoanAccountResource.get({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, function (data) {
                        if (data.chargeTimeType.value !== "Specified due date" && data.installmentChargeData) {
                            scope.installmentCharges = data.installmentChargeData;
                            scope.formData.installmentNumber = data.installmentChargeData[0].installmentNumber;
                            scope.installmentchargeField = true;
                        } else {
                            scope.installmentchargeField = false;
                            scope.showwaiveforspecicficduedate = true;
                        }
                    });

                    scope.title = 'label.heading.waiveloancharge';
                    scope.labelName = 'label.input.installment';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'WAIVE_LOANCHARGE';
                    break;
                case "paycharge":
                    resourceFactory.LoanAccountResource.get({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, command: 'pay'}, function (data) {
                        if (data.dueDate) {
                            scope.formData.transactionDate = new Date(data.dueDate);
                        }
                        if (data.chargeTimeType.value === "Instalment Fee" && data.installmentChargeData) {
                            scope.installmentCharges = data.installmentChargeData;
                            scope.formData.installmentNumber = data.installmentChargeData[0].installmentNumber;
                            scope.installmentchargeField = true;
                        }
                    });
                    scope.title = 'label.heading.payloancharge';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.paymentDatefield = true;
                    scope.taskPermissionName = 'PAY_LOANCHARGE';
                    break;
                case "editcharge":
                    resourceFactory.LoanAccountResource.get({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, function (data) {
                        if (data.amountOrPercentage) {
                            scope.showEditChargeAmount = true;
                            scope.formData.amount = data.amountOrPercentage;
                            if (data.dueDate) {
                                scope.formData.dueDate = new Date(data.dueDate);
                                scope.showEditChargeDueDate = true;
                            }
                        }

                    });
                    scope.title = 'label.heading.editcharge';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UPDATE_LOANCHARGE';
                    break;
                case "editdisbursedate":
                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'multiDisburseDetails'}, function (data) {
                        scope.showEditDisburseDate = true;
                        scope.formData.approvedLoanAmount = data.approvedPrincipal;
                        scope.form.expectedDisbursementDate = new Date(data.timeline.expectedDisbursementDate);
                        for(var i in data.disbursementDetails){
                            if(routeParams.disbursementId == data.disbursementDetails[i].id){
                                scope.formData.updatedExpectedDisbursementDate = new Date(data.disbursementDetails[i].expectedDisbursementDate);
                                scope.formData.updatedPrincipal = data.disbursementDetails[i].principal;
                                scope.id = data.disbursementDetails[i].id;
                            }
                        }
                    });

                    scope.title = 'label.heading.editdisbursedate';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UPDATE_DISBURSEMENTDETAIL';
                    break;
                case "recoverypayment":
                    scope.modelName = 'transactionDate';
                    resourceFactory.loanTrxnsTemplateResource.get({loanId: scope.accountId, command: 'recoverypayment'}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                        if (data.paymentTypeOptions.length > 0) {
                            scope.formData.paymentTypeId = data.paymentTypeOptions[0].id;
                        }
                        scope.formData.transactionAmount = data.amount;
                        scope.formData[scope.modelName] = new Date();
                    });
                    scope.title = 'label.heading.recoverypayment';
                    scope.labelName = 'label.input.transactiondate';
                    scope.isTransaction = true;
                    scope.showAmountField = true;
                    scope.taskPermissionName = 'RECOVERYPAYMENT_LOAN';
                    break;
                case "adddisbursedetails":
                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'multiDisburseDetails'}, function (data) {
                        scope.addDisburseDetails = true;
                        scope.formData.approvedLoanAmount = data.approvedPrincipal;
                        scope.form.expectedDisbursementDate = new Date(data.timeline.expectedDisbursementDate);

                        if(data.disbursementDetails != ""){
                            scope.disbursementDetails = data.disbursementDetails;
                        }
                        if (scope.disbursementDetails.length > 0) {
                            for (var i in scope.disbursementDetails) {
                                scope.disbursementDetails[i].expectedDisbursementDate = new Date(scope.disbursementDetails[i].expectedDisbursementDate);
                            }
                        }
                        scope.disbursementDetails.push({
                        });
                    });

                    scope.title = 'label.heading.adddisbursedetails';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UPDATE_DISBURSEMENTDETAIL';
                    break;
                case "deletedisbursedetails":
                    resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'multiDisburseDetails'}, function (data) {
                        scope.deleteDisburseDetails = true;
                        scope.formData.approvedLoanAmount = data.approvedPrincipal;
                        scope.form.expectedDisbursementDate = new Date(data.timeline.expectedDisbursementDate);
                        if(data.disbursementDetails != ""){
                            scope.disbursementDetails = data.disbursementDetails;
                        }
                        if (scope.disbursementDetails.length > 0) {
                            for (var i in scope.disbursementDetails) {
                                scope.disbursementDetails[i].expectedDisbursementDate = new Date(scope.disbursementDetails[i].expectedDisbursementDate);
                            }
                        }
                    });

                    scope.title = 'label.heading.deletedisbursedetails';
                    scope.showNoteField = false;
                    scope.showDateField = false;
                    scope.taskPermissionName = 'UPDATE_DISBURSEMENTDETAIL';
                    break;
            }

            scope.cancel = function () {
                location.path('/viewloanaccount/' + routeParams.id);
            };

            scope.addTrancheAmounts = function(){
                scope.showTrancheAmountTotal = 0;
                for(var i in scope.disbursementDetails ){
                    scope.showTrancheAmountTotal += Number(scope.disbursementDetails[i].principal);
                }
            };

            scope.deleteTranches = function (index) {
                scope.disbursementDetails.splice(index, 1);
            };

            scope.addTranches = function () {
                scope.disbursementDetails.push({
                });
            };

            scope.submit = function () {
                scope.processDate = false;
                var params = {command: scope.action};
                if(scope.action == "recoverguarantee"){
                    params.command = "recoverGuarantees";
                }
                if(scope.action == "approve"){
                    this.formData.expectedDisbursementDate = dateFilter(scope.form.expectedDisbursementDate, scope.df);
                    if(scope.disbursementDetails != null) {
                        this.formData.disbursementData = [];
                        for (var i in  scope.disbursementDetails) {
                            this.formData.disbursementData.push({
                                id: scope.disbursementDetails[i].id,
                                principal: scope.disbursementDetails[i].principal,
                                expectedDisbursementDate: dateFilter(scope.disbursementDetails[i].expectedDisbursementDate, scope.df),
                                loanChargeId : scope.disbursementDetails[i].loanChargeId
                            });
                        }
                        console.log("DISBURSEMENT DATA", this.formData.expectedDisbursementDate);
                    }
                    if(scope.formData.approvedLoanAmount == null){
                        scope.formData.approvedLoanAmount = scope.showTrancheAmountTotal;
                    }
                }

                if (this.formData[scope.modelName]) {
                    this.formData[scope.modelName] = dateFilter(this.formData[scope.modelName], scope.df);
                }
                if (scope.action != "undoapproval" && scope.action != "undodisbursal" || scope.action === "paycharge") {
                    this.formData.locale = scope.optlang.code;
                    this.formData.dateFormat = scope.df;
                }
                if (scope.action == "repayment" || scope.action == "waiveinterest" || scope.action == "writeoff" || scope.action == "close-rescheduled"
                    || scope.action == "close" || scope.action == "modifytransaction" || scope.action == "recoverypayment" || scope.action == "prepayloan") {
                    if (scope.action == "modifytransaction") {
                        params.command = 'modify';
                        params.transactionId = routeParams.transactionId;
                    }
                    params.loanId = scope.accountId;
                    resourceFactory.loanTrxnsResource.save(params, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action == "deleteloancharge") {
                    resourceFactory.LoanAccountResource.delete({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action === "waivecharge") {
                    resourceFactory.LoanAccountResource.save({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, 'command': 'waive'}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action === "paycharge") {
                    this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                    resourceFactory.LoanAccountResource.save({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, 'command': 'pay'}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action === "editcharge") {
                    this.formData.dueDate = dateFilter(this.formData.dueDate, scope.df);
                    resourceFactory.LoanAccountResource.update({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else if (scope.action === "editdisbursedate") {
                    this.formData.expectedDisbursementDate = dateFilter(this.formData.expectedDisbursementDate, scope.df);
                    for(var i in scope.disbursementDetails){
                        if(scope.disbursementDetails[i].id == scope.id){
                            scope.disbursementDetails[i].principal = scope.formData.updatedPrincipal;
                            scope.disbursementDetails[i].expectedDisbursementDate = dateFilter(scope.formData.updatedExpectedDisbursementDate, scope.df);
                        }
                    }
                    this.formData.disbursementData = [];
                    this.formData.updatedExpectedDisbursementDate = dateFilter(scope.formData.updatedExpectedDisbursementDate, scope.df);
                    this.formData.expectedDisbursementDate = dateFilter(scope.form.expectedDisbursementDate, scope.df);

                    for (var i in  scope.disbursementDetails) {
                        this.formData.disbursementData.push({
                            id: scope.disbursementDetails[i].id,
                            principal: scope.disbursementDetails[i].principal,
                            expectedDisbursementDate: dateFilter(scope.disbursementDetails[i].expectedDisbursementDate, scope.df),
                            loanChargeId : scope.disbursementDetails[i].loanChargeId
                        });
                    }
                    resourceFactory.LoanEditDisburseResource.update({loanId: routeParams.id, disbursementId: routeParams.disbursementId}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                }else if(scope.action === "adddisbursedetails" || scope.action === "deletedisbursedetails") {
                    this.formData.disbursementData = [];
                    for (var i in  scope.disbursementDetails) {
                            this.formData.disbursementData.push({
                                id:scope.disbursementDetails[i].id,
                                principal: scope.disbursementDetails[i].principal,
                                expectedDisbursementDate: dateFilter(scope.disbursementDetails[i].expectedDisbursementDate, scope.df),
                                loanChargeId : scope.disbursementDetails[i].loanChargeId
                            });
                    }

                    this.formData.expectedDisbursementDate = dateFilter(scope.form.expectedDisbursementDate, scope.df);
                    resourceFactory.LoanAddTranchesResource.update({loanId: routeParams.id}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                }
                else if (scope.action == "deleteloancharge") {
                    resourceFactory.LoanAccountResource.delete({loanId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData, function (data) {
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                } else {
                    params.loanId = scope.accountId;
                    resourceFactory.LoanAccountResource.save(params, this.formData, function (data) {

                        location.path('/viewloanaccount/' + data.loanId);
                    });
                }
            };

             scope.submitDatatable = function(){
                if(scope.datatables) {
                    asyncLoop(Object.keys(scope.entityformData.datatables).length,function(loop){
                            var cnt = loop.iteration();
                            var formData = scope.entityformData.datatables[cnt];
                            formData.registeredTableName = scope.datatables[cnt].registeredTableName;

                            var params = {
                                datatablename: formData.registeredTableName,
                                entityId: routeParams.id,
                                genericResultSet: 'true'
                            };

                            angular.extend(formData.data,{dateFormat: scope.df, locale: scope.optlang.code});

                            _.each(formData.data, function (columnHeader) {
                                if (columnHeader.dateType) {
                                    columnHeader = dateFilter(columnHeader.dateType.date, params.dateFormat);
                                }
                                else if (columnHeader.dateTimeType) {
                                    columnHeader = dateFilter(columnHeader.columnName.date, scope.df) + " " + dateFilter(columnHeader.columnName.time, scope.tf);
                                }
                            });

                            var action = submitStatus[cnt];
                            resourceFactory.DataTablesResource[action](params, formData.data, function (data) {

                                submitStatus[cnt] = "update";
                                scope.submittedDatatables.push(scope.datatables[cnt].registeredTableName);
                                loop.next();

                            },function(){
                                rootScope.errorDetails[0].push({datatable:scope.datatables[cnt].registeredTableName});
                                loop.break();
                            });

                    },function(){
                            scope.submit();
                    });
                }
                else{
                    scope.submit();
                }
            };

            scope.$watch('formData.transactionDate',function(){
                scope.onDateChange();
             });



            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };



            scope.onDateChange = function(){
                if(scope.processDate) {
                    var params = {};
                    params.locale = scope.optlang.code;
                    params.dateFormat = scope.df;
                    params.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                    params.loanId = scope.accountId;
                    params.command = 'prepayLoan';
                    resourceFactory.loanTrxnsTemplateResource.get(params, function (data) {
                        scope.formData.transactionAmount = data.amount;
                        if (data.penaltyChargesPortion > 0) {
                            scope.showPenaltyPortionDisplay = true;
                        }
                        scope.principalPortion = data.principalPortion;
                        scope.interestPortion = data.interestPortion;
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('LoanAccountActionsController', ['$scope','$rootScope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.LoanAccountActionsController]).run(function ($log) {
        $log.info("LoanAccountActionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        LoanDocumentController: function (scope, location, http, routeParams, API_VERSION, Upload, $rootScope) {
            scope.loanId = routeParams.loanId;
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.submit = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/loans/' + scope.loanId + '/documents',
                    data: { name : scope.formData.name, description : scope.formData.description, file: scope.formData.file},
                }).then(function (data) {
                        // to fix IE not refreshing the model
                        if (!scope.$$phase) {
                            scope.$apply();
                        }
                        location.path('/viewloanaccount/' + scope.loanId);
                    });
            };
        }
    });
    mifosX.ng.application.controller('LoanDocumentController', ['$scope', '$location', '$http', '$routeParams', 'API_VERSION', 'Upload', '$rootScope', mifosX.controllers.LoanDocumentController]).run(function ($log) {
        $log.info("LoanDocumentController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        LoanForeclosureController: function (scope, routeParams, resourceFactory, location, route, http, $uibModal, dateFilter, $filter) {
            scope.accountId = routeParams.id;
            scope.formData = {};
            scope.formData.loanId = scope.accountId;
            scope.taskTypeName = 'Foreclosure';
            scope.subTaskTypeName = 'Foreclosure';
            scope.formData.transactionDate = new Date();
            scope.restrictDate = new Date();

            resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'all'}, function (data) {
                scope.loandetails = data;
            });
            scope.$watch('formData.transactionDate',function(){
                scope.retrieveLoanForeclosureTemplate();
            });

            scope.retrieveLoanForeclosureTemplate = function() {
                resourceFactory.loanTrxnsTemplateResource.get({
                    loanId: routeParams.id,
                    command: 'foreclosure',
                    transactionDate: dateFilter(this.formData.transactionDate, scope.df),
                    dateFormat: scope.df,
                    locale: scope.optlang.code
                }, function (data) {
                    scope.foreclosuredata = data;
                    scope.formData.outstandingPrincipalPortion = scope.foreclosuredata.principalPortion;
                    scope.formData.outstandingInterestPortion = scope.foreclosuredata.interestPortion;
                    if (scope.foreclosuredata.unrecognizedIncomePortion) {
                        scope.formData.interestAccruedAfterDeath = scope.foreclosuredata.unrecognizedIncomePortion;
                    }

                    scope.formData.outstandingFeeChargesPortion = scope.foreclosuredata.feeChargesPortion;
                    scope.formData.outstandingPenaltyChargesPortion = scope.foreclosuredata.penaltyChargesPortion;
                    scope.formData.foreClosureChargesPortion = scope.foreclosuredata.foreClosureChargesPortion;
                    scope.calculateTransactionAmount();
                    scope.paymentTypes = scope.foreclosuredata.paymentTypeOptions;

                });
            }

            scope.calculateTransactionAmount = function(){
                var transactionAmount = 0;
                transactionAmount += parseFloat(scope.foreclosuredata.principalPortion);
                transactionAmount += parseFloat(scope.foreclosuredata.interestPortion);
                transactionAmount += parseFloat(scope.foreclosuredata.feeChargesPortion);
                transactionAmount += parseFloat(scope.foreclosuredata.penaltyChargesPortion);
                scope.formData.transactionAmount = $filter('number')(transactionAmount, 2);
                scope.formData.transactionAmount =  scope.formData.transactionAmount.replace(/,/g,"");
            };

            scope.reCalculateTransactionAmount = function(){
                scope.calculateTransactionAmount();
                var transactionAmount = 0;
                transactionAmount += parseFloat(scope.formData.transactionAmount);
                transactionAmount -= parseFloat(scope.formData.totalWaivedAmount);
                scope.formData.transactionAmount = $filter('number')(transactionAmount, 2);
                scope.formData.transactionAmount =  scope.formData.transactionAmount.replace(/,/g,"");
            };

            scope.submit = function () {
                scope.foreclosureFormData = {
                    transactionDate: dateFilter(this.formData.transactionDate, scope.df),
                    locale:  scope.optlang.code,
                    dateFormat: scope.df,
                    note: this.formData.note
                };
                resourceFactory.loanTrxnsResource.save({loanId: routeParams.id, command: 'foreclosure'}, scope.foreclosureFormData, function(data) {
                    location.path('/viewloanaccount/' + scope.accountId);
                });
            };

            scope.cancel = function () {
                location.path('/viewloanaccount/' + scope.accountId);
            };
        }
    });
    mifosX.ng.application.controller('LoanForeclosureController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$route', '$http', '$uibModal', 'dateFilter','$filter', mifosX.controllers.LoanForeclosureController]).run(function ($log) {
        $log.info("LoanForeclosureController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        LoanScreenReportController: function (scope, resourceFactory, location, http, API_VERSION, routeParams, $rootScope, $sce) {
            scope.accountId = routeParams.loanId;
            resourceFactory.templateResource.get({entityId: 1, typeId: 0}, function (data) {
                scope.loanTemplateData = data;
            });
            scope.print = function (template) {
                var templateWindow = window.open('', 'Screen Report', 'height=400,width=600');
                templateWindow.document.write('<html><head>');
                templateWindow.document.write('</head><body>');
                templateWindow.document.write(template);
                templateWindow.document.write('</body></html>');
                templateWindow.print();
                templateWindow.close();
            };
            scope.getLoanTemplate = function (templateId) {
                scope.selectedTemplate = templateId;
                http({
                    method: 'POST',
                    url: $rootScope.hostUrl + API_VERSION + '/templates/' + templateId + '?loanId=' + routeParams.loanId,
                    data: {}
                }).then(function (data) {
                        scope.template =  $sce.trustAsHtml(data.data);
                    });
            };
        }
    });
    mifosX.ng.application.controller('LoanScreenReportController', ['$scope', 'ResourceFactory', '$location', '$http', 'API_VERSION', '$routeParams', '$rootScope', '$sce', mifosX.controllers.LoanScreenReportController]).run(function ($log) {
        $log.info("LoanScreenReportController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        NewGLIMAccountController: function (scope, rootScope, routeParams, resourceFactory, location, dateFilter, WizardHandler) {

            scope.response = {success:[],failed:[]};
            scope.group = {};
            scope.clientId = routeParams.clientId;
            scope.groupId = routeParams.groupId;
            scope.group.selectedclients = [];
            scope.group.id = routeParams.groupId;
            scope.staffInSelectedOfficeOnly = true;
            scope.requestIdentifier = "clientId";
            scope.inparams = { resourceType: 'template', templateType: 'jlgbulk', lendingStrategy: 300 };
            scope.selectedProduct = {};
            scope.loanApplicationCommonData = {};  // user set common data for all the loan applications
            scope.loanApplicationCommonData.submittedOnDate = new Date();
            scope.loanApplicationCommonData.expectedDisbursementDate = new Date();
            scope.loanApplicationCommonData.syncDisbursementWithMeeting = false;
            scope.datatables = [];
            scope.noOfTabs = 1;
            scope.step = '-';
            scope.formData = {};
            scope.formDat = {};
            scope.formData.datatables = [];
            scope.formDat.datatables = [];
            scope.tf = "HH:mm";
            scope.tempDataTables = [];
            scope.isAllClientSelected = false;
            scope.gsimAccounts=[];
            scope.gsimAccountId=0;
            scope.date = {};
            scope.chargeFormData = {}; //For charges

            if (scope.group.id) {
                scope.inparams.groupId = scope.group.id;
            }

            // Fetch loan products for initital product drop-down
            resourceFactory.loanResource.get(scope.inparams, function (data) {
                scope.products = data.productOptions;
                scope.datatables = data.datatables;

                if (data.clientName) {
                    scope.clientName = data.clientName;
                }
                if (data.group) {
                    scope.groupName = data.group.name;
                }
                scope.handleDatatables(scope.datatables);
            });

            scope.loanProductChange = function (loanProductId) {
                _.isUndefined(scope.datatables) ? scope.tempDataTables = [] : scope.tempDataTables = scope.datatables;
                WizardHandler.wizard().removeSteps(1, scope.tempDataTables.length);
                scope.inparams.productId = loanProductId;
                resourceFactory.loanResource.get(scope.inparams, function (data) {
                    scope.productDetails = data.product;
                    scope.loanaccountinfo = data;
                    scope.previewClientLoanAccInfo();
                    scope.datatables = data.datatables;
                    scope.handleDatatables(scope.datatables);
                    scope.loanOfficers = data.loanOfficerOptions;
                    scope.funds = data.fundOptions;
                    scope.loanPurposes = data.loanPurposeOptions;
                    scope.group.clients = data.group.clientMembers.map(function(client) {
                        client.principal = data.product.principal;
                        client.charges = data.product.charges.map(function(charge){
                            charge.isDeleted = false;
                            return _.clone(charge);});
                        return client;
                    });
                });

                resourceFactory.loanResource.get({resourceType: 'template', templateType: 'collateral', productId: loanProductId, fields: 'id,loanCollateralOptions'}, function (data) {
                    scope.collateralOptions = data.loanCollateralOptions || [];
                });
            }

            scope.previewClientLoanAccInfo = function () {
                scope.previewRepayment = false;
                scope.charges = scope.loanaccountinfo.charges || [];
                scope.formData.disbursementData = scope.loanaccountinfo.disbursementDetails || [];
                scope.collaterals = [];

                if (scope.loanaccountinfo.calendarOptions) {
                    scope.formData.syncRepaymentsWithMeeting = true;
                    scope.formData.syncDisbursementWithMeeting = true;
                }
                scope.multiDisburseLoan = scope.loanaccountinfo.multiDisburseLoan;
                scope.formData.productId = scope.loanaccountinfo.loanProductId;
                scope.formData.fundId = scope.loanaccountinfo.fundId;
                scope.formData.principal = scope.loanaccountinfo.principal;
                scope.formData.loanTermFrequency = scope.loanaccountinfo.termFrequency;
                scope.formData.loanTermFrequencyType = scope.loanaccountinfo.termPeriodFrequencyType.id;
                scope.formData.numberOfRepayments = scope.loanaccountinfo.numberOfRepayments;
                scope.formData.repaymentEvery = scope.loanaccountinfo.repaymentEvery;
                scope.formData.repaymentFrequencyType = scope.loanaccountinfo.repaymentFrequencyType.id;
                scope.formData.interestRatePerPeriod = scope.loanaccountinfo.interestRatePerPeriod;
                scope.formData.amortizationType = scope.loanaccountinfo.amortizationType.id;
                scope.formData.interestType = scope.loanaccountinfo.interestType.id;
                scope.formData.interestCalculationPeriodType = scope.loanaccountinfo.interestCalculationPeriodType.id;
                scope.formData.allowPartialPeriodInterestCalcualtion = scope.loanaccountinfo.allowPartialPeriodInterestCalcualtion;
                scope.formData.inArrearsTolerance = scope.loanaccountinfo.inArrearsTolerance;
                scope.formData.graceOnPrincipalPayment = scope.loanaccountinfo.graceOnPrincipalPayment;
                scope.formData.graceOnInterestPayment = scope.loanaccountinfo.graceOnInterestPayment;
                scope.formData.graceOnArrearsAgeing = scope.loanaccountinfo.graceOnArrearsAgeing;
                scope.formData.transactionProcessingStrategyId = scope.loanaccountinfo.transactionProcessingStrategyId;
                scope.formData.graceOnInterestCharged = scope.loanaccountinfo.graceOnInterestCharged;
                scope.formData.fixedEmiAmount = scope.loanaccountinfo.fixedEmiAmount;
                scope.formData.maxOutstandingLoanBalance = scope.loanaccountinfo.maxOutstandingLoanBalance;

                if (scope.loanaccountinfo.isInterestRecalculationEnabled && scope.loanaccountinfo.interestRecalculationData.recalculationRestFrequencyDate) {
                    scope.date.recalculationRestFrequencyDate = new Date(scope.loanaccountinfo.interestRecalculationData.recalculationRestFrequencyDate);
                }
                if (scope.loanaccountinfo.isInterestRecalculationEnabled && scope.loanaccountinfo.interestRecalculationData.recalculationCompoundingFrequencyDate) {
                    scope.date.recalculationCompoundingFrequencyDate = new Date(scope.loanaccountinfo.interestRecalculationData.recalculationCompoundingFrequencyDate);
                }

                if(scope.loanaccountinfo.isLoanProductLinkedToFloatingRate) {
                    scope.formData.isFloatingInterestRate = false ;
                }
            }

            scope.addCharge = function () {
                if (scope.chargeFormData.chargeId) {
                    resourceFactory.chargeResource.get({chargeId: this.chargeFormData.chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        scope.chargeFormData.chargeId = undefined;
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            resourceFactory.groupGSIMAccountResource.get({groupId:routeParams.groupId},function(data)
            {
                scope.gsimAccounts=data;

            });

            scope.handleDatatables = function (datatables) {
                if (!_.isUndefined(datatables) && datatables.length > 0) {
                    scope.formData.datatables = [];
                    scope.formDat.datatables = [];
                    scope.noOfTabs = datatables.length + 1;
                    angular.forEach(datatables, function (datatable, index) {
                        scope.updateColumnHeaders(datatable.columnHeaderData);
                        angular.forEach(datatable.columnHeaderData, function (colHeader, i) {
                            if (_.isEmpty(scope.formDat.datatables[index])) {
                                scope.formDat.datatables[index] = {data: {}};
                            }

                            if (_.isEmpty(scope.formData.datatables[index])) {
                                scope.formData.datatables[index] = {
                                    registeredTableName: datatable.registeredTableName,
                                    data: {locale: scope.optlang.code}
                                };
                            }

                            if (datatable.columnHeaderData[i].columnDisplayType == 'DATETIME') {
                                scope.formDat.datatables[index].data[datatable.columnHeaderData[i].columnName] = {};
                            }
                        });
                    });
                }
            };

            scope.updateColumnHeaders = function(columnHeaderData) {
                var colName = columnHeaderData[0].columnName;
                if (colName == 'id') {
                    columnHeaderData.splice(0, 1);
                }
                colName = columnHeaderData[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    columnHeaderData.splice(0, 1);
                }
            };

            //return input type
            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.checkerInboxAllCheckBoxesClicked = function() {
                scope.isAllClientSelected = !scope.isAllClientSelected;
                if(!angular.isUndefined(scope.group.clients)) {
                    for (var i in scope.group.clients) {
                        scope.group.clients[i].isSelected = scope.isAllClientSelected;
                    }
                }
            }

            scope.checkerInboxAllCheckBoxesMet = function() {
                if(!angular.isUndefined(scope.group.clients)) {
                    var count = 0;
                    for (var i in scope.group.clients) {
                        if(scope.group.clients[i].isSelected){
                            count++;
                        }
                    }
                    scope.isAllClientSelected = (scope.group.clients.length==count);
                    return scope.isAllClientSelected;
                }
            }

            scope.submit = function () {

                if (!_.isUndefined(scope.datatables) && scope.datatables.length > 0) {
                    angular.forEach(scope.datatables, function (datatable, index) {
                        scope.columnHeaders = datatable.columnHeaderData;
                        angular.forEach(scope.columnHeaders, function (colHeader, i) {
                            scope.dateFormat = scope.df + " " + scope.tf
                            if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName])) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName],
                                        scope.dateFormat);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            } else if (scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date) && !_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time)) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date, scope.df)
                                        + " " + dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time, scope.tf);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            }
                        });
                    });
                } else {
                    delete scope.formData.datatables;
                }

                this.batchRequests = [];
                var totalLoan=0;
                for (var i in scope.group.clients) {

                    if( scope.group.clients[i].isSelected ){
                        totalLoan+=parseFloat(scope.group.clients[i].principal);
                    }
                }

                var loanApp={};
                loanApp.charges=[];
                if (scope.charges.length > 0) {

                    for (var i in scope.charges) {
                        loanApp.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount, dueDate: dateFilter(scope.charges[i].dueDate, scope.df) });
                    }
                }

                console.log("gsim id"+scope.formData.gsimAccountId);

                var child=0;
                var reqFirstDate = dateFilter(scope.date.first, scope.df);
                var reqSecondDate = dateFilter(scope.date.second, scope.df);
                var reqThirdDate = dateFilter(scope.date.third, scope.df);
                var reqFourthDate = dateFilter(scope.date.fourth, scope.df);
                var reqFifthDate = dateFilter(scope.date.fifth, scope.df);

                var applicationCount=0;
                // count number of application
                for (var i in scope.group.clients) {
                    if (scope.group.clients[i].isSelected) {

                        applicationCount=applicationCount+1;
                    }
                }

                var applicationId= Math.floor((Math.random() * 9999999999) + 1);

                for (var i in scope.group.clients) {

                    if( scope.group.clients[i].isSelected ){

                        var loanApplication = {};
                        loanApplication.charges=loanApp.charges;
                        loanApplication.locale = scope.optlang.code;
                        loanApplication.dateFormat =  scope.df;
                        loanApplication.groupId = scope.group.id;
                        loanApplication.clientId = scope.group.clients[i].id;
                        if(scope.caledars){
                            loanApplication.calendarId = scope.caledars[0].id;
                        }
                        loanApplication.loanType = 'glim';
                        loanApplication.productId = scope.productDetails.id;
                        loanApplication.fundId = scope.loanApplicationCommonData.fundId;
                        loanApplication.numberOfRepayments = scope.formData.numberOfRepayments;
                        loanApplication.repaymentEvery = scope.formData.repaymentEvery;
                        loanApplication.repaymentFrequencyType = scope.formData.repaymentFrequencyType;
                        loanApplication.repaymentsStartingFromDate = reqFourthDate;
                        loanApplication.interestChargedFromDate = reqThirdDate;
                        loanApplication.interestRatePerPeriod = scope.formData.interestRatePerPeriod;
                        loanApplication.amortizationType = scope.productDetails.amortizationType.id;
                        loanApplication.interestType = scope.formData.interestType;
                        loanApplication.interestCalculationPeriodType = scope.productDetails.interestCalculationPeriodType.id;
                        loanApplication.inArrearsTolerance = scope.productDetails.inArrearsTolerance;
                        loanApplication.graceOnPrincipalPayment = scope.productDetails.graceOnPrincipalPayment;
                        loanApplication.graceOnInterestPayment = scope.productDetails.graceOnInterestPayment;
                        loanApplication.transactionProcessingStrategyId = scope.productDetails.transactionProcessingStrategyId;
                        loanApplication.loanTermFrequency = scope.formData.loanTermFrequency;
                        loanApplication.loanTermFrequencyType = scope.formData.loanTermFrequencyType;
                        loanApplication.loanPurposeId = scope.group.clients[i].loanPurposeId;
                        loanApplication.loanOfficerId = scope.loanApplicationCommonData.loanOfficerId;
                        loanApplication.principal = scope.group.clients[i].principal;

                        if(child==0)
                        {
                            loanApplication.totalLoan=totalLoan;
                            loanApplication.isParentAccount=true;

                        }

                        loanApplication.expectedDisbursementDate = dateFilter(scope.loanApplicationCommonData.expectedDisbursementDate, scope.df);
                        loanApplication.submittedOnDate =  dateFilter(scope.loanApplicationCommonData.submittedOnDate, scope.df);
                        loanApplication.syncDisbursementWithMeeting = scope.loanApplicationCommonData.syncDisbursementWithMeeting;
                        loanApplication.lastApplication=false;
                        loanApplication.applicationId=applicationId;

                        loanApplication.linkAccountId=scope.formData.gsimAccountId;
                        console.log('formData.gsimAccountId : '+scope.formData.gsimAccountId);

                        if (!_.isUndefined(scope.formData.datatables) && scope.formData.datatables.length > 0) {
                            loanApplication.datatables = scope.formData.datatables;
                        }

                        child=child+1;

                        if(child==applicationCount)
                        {
                            loanApplication.lastApplication=true;
                        }

                        this.batchRequests.push({requestId: i, relativeUrl: "loans",
                            method: "POST", body: JSON.stringify(loanApplication)});
                    }
                }

                resourceFactory.batchResource.post({
                    enclosingTransaction:true},this.batchRequests,  function (data) {

                    for (var i = 0; i < data.length; i++) {
                        if(data[i].statusCode == 200 )
                            scope.response.success.push(data[i]);
                        else
                            scope.response.failed.push(data[i]);
                    }

                    if(scope.response.failed.length === 0 ){
                        location.path('/viewgroup/' + scope.group.id);
                    }
                });
            };

            /* Cancel button action */
            scope.cancel = function () {
                if (scope.clientId) {
                    location.path('/viewclient/' + scope.clientId);
                } else if (scope.centerEntity) {
                    location.path('/viewcenter/' + scope.groupId);
                }
                if (scope.group.id) {
                    location.path('/viewgroup/' + scope.group.id);
                }
            };
        } // End of GLIMAccountController

    });
    mifosX.ng.application.controller('NewGLIMAccountController', ['$scope', '$rootScope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', 'WizardHandler', mifosX.controllers.NewGLIMAccountController]).run(function ($log) {
        $log.info("NewGLIMAccountController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        NewJLGLoanAccAppController: function (scope, rootScope, routeParams, resourceFactory, location, dateFilter) {

            scope.response = {success:[],failed:[]};
            scope.group = {};
            scope.group.selectedclients = [];
            scope.group.id = routeParams.groupId;
            scope.staffInSelectedOfficeOnly = true;
            scope.requestIdentifier = "clientId";
            scope.inparams = { resourceType: 'template', templateType: 'jlgbulk', lendingStrategy: 300 };
            scope.selectedProduct = {};
            scope.loanApplicationCommonData = {};  // user set common data for all the loan applications
            scope.loanApplicationCommonData.submittedOnDate = new Date();
            scope.loanApplicationCommonData.expectedDisbursementDate = new Date();
            scope.loanApplicationCommonData.syncDisbursementWithMeeting = true;
            scope.datatables = [];
            scope.noOfTabs = 1;
            scope.step = '-';
            scope.formData = {};
            scope.formDat = {};
            scope.formData.datatables = [];
            scope.formDat.datatables = [];
            scope.tf = "HH:mm";
            scope.tempDataTables = [];
            scope.isAllClientSelected = false;

            if (scope.group.id) {
                scope.inparams.groupId = scope.group.id;
            }

            // Fetch loan products for initital product drop-down
            resourceFactory.loanResource.get(scope.inparams, function (data) {
                scope.products = data.productOptions;
                scope.datatables = data.datatables;
                if (data.group) {
                    scope.group.name = data.group.name;
                }
                scope.handleDatatables(scope.datatables);
            });


            scope.loanProductChange = function (loanProductId) {
                _.isUndefined(scope.datatables) ? scope.tempDataTables = [] : scope.tempDataTables = scope.datatables;
                scope.inparams.productId = loanProductId;
                resourceFactory.loanResource.get(scope.inparams, function (data) {

                    scope.productDetails = data.product;
                    console.log('scope', scope.productDetails);
                    scope.group.clients = data.group.clientMembers.map(function(client) {
                        client.principal = data.product.principal;
                        client.charges = data.product.charges.map(function(charge){
                            charge.isDeleted = false; 
                            return _.clone(charge);});
                        // return was returing the reference, instead the value, so added _.clone
                        return client; 
                    });

                    scope.loanOfficers = data.loanOfficerOptions;
                    scope.funds = data.fundOptions;
                    scope.caledars = data.calendarOptions;
                    scope.loanPurposes = data.loanPurposeOptions;
                    scope.termFrequency = data.termFrequency;
                    scope.termPeriodFrequencyType = data.termPeriodFrequencyType;
                    scope.datatables = data.datatables;
                    scope.handleDatatables(scope.datatables);
                });
            };

            scope.handleDatatables = function (datatables) {
                if (!_.isUndefined(datatables) && datatables.length > 0) {
                    scope.formData.datatables = [];
                    scope.formDat.datatables = [];
                    scope.noOfTabs = datatables.length + 1;
                    angular.forEach(datatables, function (datatable, index) {
                        scope.updateColumnHeaders(datatable.columnHeaderData);
                        angular.forEach(datatable.columnHeaderData, function (colHeader, i) {
                            if (_.isEmpty(scope.formDat.datatables[index])) {
                                scope.formDat.datatables[index] = {data: {}};
                            }

                            if (_.isEmpty(scope.formData.datatables[index])) {
                                scope.formData.datatables[index] = {
                                    registeredTableName: datatable.registeredTableName,
                                    data: {locale: scope.optlang.code}
                                };
                            }

                            if (datatable.columnHeaderData[i].columnDisplayType == 'DATETIME') {
                                scope.formDat.datatables[index].data[datatable.columnHeaderData[i].columnName] = {};
                            }
                        });
                    });
                }
            };

            scope.updateColumnHeaders = function(columnHeaderData) {
                var colName = columnHeaderData[0].columnName;
                if (colName == 'id') {
                    columnHeaderData.splice(0, 1);
                }

                colName = columnHeaderData[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    columnHeaderData.splice(0, 1);
                }
            };

            //return input type
            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.toggleCharge = function (clientIndex, chargeIndex) {

                // scope.group.clients[clientIndex].charges.splice(chargeIndex,1);
                if(scope.group.clients[clientIndex].charges[chargeIndex].isDeleted){
                    scope.group.clients[clientIndex].charges[chargeIndex].isDeleted = false;
                }
                else{
                    scope.group.clients[clientIndex].charges[chargeIndex].isDeleted = true;
                }

            };

            scope.checkerInboxAllCheckBoxesClicked = function() {
                scope.isAllClientSelected = !scope.isAllClientSelected;
                if(!angular.isUndefined(scope.group.clients)) {
                    for (var i in scope.group.clients) {
                        scope.group.clients[i].isSelected = scope.isAllClientSelected;
                    }
                }
            }

            scope.checkerInboxAllCheckBoxesMet = function() {
                if(!angular.isUndefined(scope.group.clients)) {
                    var count = 0;
                    for (var i in scope.group.clients) {
                        if(scope.group.clients[i].isSelected){
                            count++;
                        }
                    }
                    scope.isAllClientSelected = (scope.group.clients.length==count);
                    return scope.isAllClientSelected;
                }
            }

            /* Submit button action */
            scope.submit = function () {
                if (!_.isUndefined(scope.datatables) && scope.datatables.length > 0) {
                    angular.forEach(scope.datatables, function (datatable, index) {
                        scope.columnHeaders = datatable.columnHeaderData;
                        angular.forEach(scope.columnHeaders, function (colHeader, i) {
                            scope.dateFormat = scope.df + " " + scope.tf
                            if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName])) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName],
                                        scope.dateFormat);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            } else if (scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date) && !_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time)) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date, scope.df)
                                        + " " + dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time, scope.tf);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            }
                        });
                    });
                } else {
                    delete scope.formData.datatables;
                }

                this.batchRequests = [];
                for (var i in scope.group.clients) {
                    if( scope.group.clients[i].isSelected ){

                        var loanApplication = {};

                        loanApplication.locale = scope.optlang.code;
                        loanApplication.dateFormat =  scope.df;
                        loanApplication.groupId = scope.group.id;
                        loanApplication.clientId = scope.group.clients[i].id;
                        if(scope.caledars){
                            loanApplication.calendarId = scope.caledars[0].id;
                        }
                        loanApplication.loanType = 'jlg';
                        loanApplication.productId = scope.productDetails.id;
                        loanApplication.fundId = scope.loanApplicationCommonData.fundId;
                        loanApplication.numberOfRepayments = scope.productDetails.numberOfRepayments;
                        loanApplication.repaymentEvery = scope.productDetails.repaymentEvery;
                        loanApplication.repaymentFrequencyType = scope.productDetails.repaymentFrequencyType.id;
                        loanApplication.interestRatePerPeriod = scope.productDetails.interestRatePerPeriod;
                        loanApplication.amortizationType = scope.productDetails.amortizationType.id;
                        loanApplication.interestType = scope.productDetails.interestType.id;
                        loanApplication.interestCalculationPeriodType = scope.productDetails.interestCalculationPeriodType.id;
                        loanApplication.inArrearsTolerance = scope.productDetails.inArrearsTolerance;
                        loanApplication.graceOnPrincipalPayment = scope.productDetails.graceOnPrincipalPayment;
                        loanApplication.graceOnInterestPayment = scope.productDetails.graceOnInterestPayment;
                        loanApplication.transactionProcessingStrategyId = scope.productDetails.transactionProcessingStrategyId;
                        loanApplication.loanTermFrequency = scope.termFrequency;
                        loanApplication.loanTermFrequencyType = scope.termPeriodFrequencyType.id;
                        loanApplication.loanPurposeId = scope.group.clients[i].loanPurposeId;

                        loanApplication.loanOfficerId = scope.loanApplicationCommonData.loanOfficerId;
                        loanApplication.principal = scope.group.clients[i].principal;
                        loanApplication.expectedDisbursementDate = dateFilter(scope.loanApplicationCommonData.expectedDisbursementDate, scope.df);
                        loanApplication.submittedOnDate =  dateFilter(scope.loanApplicationCommonData.submittedOnDate, scope.df);
                        loanApplication.syncDisbursementWithMeeting = scope.loanApplicationCommonData.syncDisbursementWithMeeting;


                        loanApplication.charges = [];

                        for (var j in scope.group.clients[i].charges) {

                            if(!scope.group.clients[i].charges[j].isDeleted && scope.group.clients[i].charges[j].chargeTimeType.code !="chargeTimeType.overdueInstallment"){
                                var charge = {};
                                charge.amount = scope.group.clients[i].charges[j].amount;
                                charge.chargeId = scope.group.clients[i].charges[j].id;
                                loanApplication.charges.push(charge);
                            }

                        }
                        if (!_.isUndefined(scope.formData.datatables) && scope.formData.datatables.length > 0) {
                            loanApplication.datatables = scope.formData.datatables;
                        }

                        this.batchRequests.push({requestId: i, relativeUrl: "loans",
                            method: "POST", body: JSON.stringify(loanApplication)});

                    }

                }

                resourceFactory.batchResource.post(this.batchRequests, function (data) {

                        for (var i = 0; i < data.length; i++) {
                                if(data[i].statusCode == 200 ) 
                                    scope.response.success.push(data[i]);
                                else
                                    scope.response.failed.push(data[i]);

                            }   

                        if(scope.response.failed.length === 0 ){
                            location.path('/viewgroup/' + scope.group.id);    
                        }

                });

                
            }; 

            /* Cancel button action */
            scope.cancel = function () {
                if (scope.group.id) {
                    location.path('/viewgroup/' + scope.group.id);
                }
            };             


        } // End of NewJLGLoanAccAppController

    });
    mifosX.ng.application.controller('NewJLGLoanAccAppController', ['$scope', '$rootScope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.NewJLGLoanAccAppController]).run(function ($log) {
        $log.info("NewJLGLoanAccAppController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        NewLoanAccAppController: function (scope, routeParams, resourceFactory, location, dateFilter, uiConfigService, WizardHandler, translate) {
            scope.previewRepayment = false;
            scope.clientId = routeParams.clientId;
            scope.groupId = routeParams.groupId;
            scope.restrictDate = new Date();
            scope.formData = {};
            scope.loandetails = {};
            scope.chargeFormData = {}; //For charges
            scope.collateralFormData = {}; //For collaterals
            scope.inparams = {resourceType: 'template', activeOnly: 'true'};
            scope.date = {};
            scope.formDat = {};
            scope.datatables = [];
            scope.noOfTabs = 1;
            scope.step = '-';
            scope.formData.datatables = [];
            scope.formDat.datatables = [];
            scope.tf = "HH:mm";
            scope.loanApp = "LoanApp";
            scope.customSteps = [];
            scope.tempDataTables = [];
            scope.disabled = true;
            scope.translate= translate;
            scope.rateFlag=false;

            scope.date.first = new Date();

            if (scope.clientId) {
                scope.inparams.clientId = scope.clientId;
                scope.formData.clientId = scope.clientId;
            }


            if (scope.groupId) {
                scope.inparams.groupId = scope.groupId;
                scope.formData.groupId = scope.groupId;
            }

            if (scope.clientId && scope.groupId) {
                scope.inparams.templateType = 'jlg';
            }
            else if (scope.groupId) {
                scope.inparams.templateType = 'group';
            }
            else if (scope.clientId) {
                scope.inparams.templateType = 'individual';
            }

            scope.inparams.staffInSelectedOfficeOnly = true;

            resourceFactory.loanResource.get(scope.inparams, function (data) {
                scope.products = data.productOptions;
                scope.ratesEnabled = data.isRatesEnabled;

                if (data.clientName) {
                    scope.clientName = data.clientName;
                }
                if (data.group) {
                    scope.groupName = data.group.name;
                }
            });

            scope.loanProductChange = function (loanProductId) {
                // _.isUndefined(scope.datatables) ? scope.tempDataTables = [] : scope.tempDataTables = scope.datatables;
                // WizardHandler.wizard().removeSteps(1, scope.tempDataTables.length);
                scope.inparams.productId = loanProductId;
                // scope.datatables = [];
                resourceFactory.loanResource.get(scope.inparams, function (data) {
                    scope.loanaccountinfo = data;
                    scope.previewClientLoanAccInfo();
                    scope.loandetails.interestValue = scope.loanaccountinfo.interestType.value;
                    scope.loandetails.amortizationValue = scope.loanaccountinfo.amortizationType.value;
                    scope.loandetails.interestCalculationPeriodValue = scope.loanaccountinfo.interestCalculationPeriodType.value;
                    scope.loandetails.transactionProcessingStrategyValue = scope.formValue(scope.loanaccountinfo.transactionProcessingStrategyOptions,scope.formData.transactionProcessingStrategyId,'id','name');
                    scope.datatables = data.datatables;
                    scope.handleDatatables(scope.datatables);
                    scope.disabled = false;
                });

                resourceFactory.loanResource.get({resourceType: 'template', templateType: 'collateral', productId: loanProductId, fields: 'id,loanCollateralOptions'}, function (data) {
                    scope.collateralOptions = data.loanCollateralOptions || [];
                });
            }

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
            }

            scope.handleDatatables = function (datatables) {
                if (!_.isUndefined(datatables) && datatables.length > 0) {
                    scope.formData.datatables = [];
                    scope.formDat.datatables = [];
                    scope.noOfTabs = datatables.length + 1;
                    angular.forEach(datatables, function (datatable, index) {
                        scope.updateColumnHeaders(datatable.columnHeaderData);
                        angular.forEach(datatable.columnHeaderData, function (colHeader, i) {
                            if (_.isEmpty(scope.formDat.datatables[index])) {
                                scope.formDat.datatables[index] = {data: {}};
                            }

                            if (_.isEmpty(scope.formData.datatables[index])) {
                                scope.formData.datatables[index] = {
                                    registeredTableName: datatable.registeredTableName,
                                    data: {locale: scope.optlang.code}
                                };
                            }

                            if (datatable.columnHeaderData[i].columnDisplayType == 'DATETIME') {
                                scope.formDat.datatables[index].data[datatable.columnHeaderData[i].columnName] = {};
                            }
                        });
                    });
                }
            };

            scope.updateColumnHeaders = function(columnHeaderData) {
                var colName = columnHeaderData[0].columnName;
                if (colName == 'id') {
                    columnHeaderData.splice(0, 1);
                }

                colName = columnHeaderData[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    columnHeaderData.splice(0, 1);
                }
            };
            //Wizard is creating new scope on every step. So resetting the variable here
            scope.resetPreviewFlag = function() {
                scope.previewRepayment =  !scope.previewRepayment;
            };

            scope.previewClientLoanAccInfo = function () {
                scope.previewRepayment = false;
                scope.charges = scope.loanaccountinfo.charges || [];
                scope.formData.disbursementData = scope.loanaccountinfo.disbursementDetails || [];
                scope.collaterals = [];

                if (scope.loanaccountinfo.calendarOptions) {
                    scope.formData.syncRepaymentsWithMeeting = true;
                    scope.formData.syncDisbursementWithMeeting = true;
                }
                scope.multiDisburseLoan = scope.loanaccountinfo.multiDisburseLoan;
                scope.formData.productId = scope.loanaccountinfo.loanProductId;
                scope.formData.fundId = scope.loanaccountinfo.fundId;
                scope.formData.principal = scope.loanaccountinfo.principal;
                scope.formData.loanTermFrequency = scope.loanaccountinfo.termFrequency;
                scope.formData.loanTermFrequencyType = scope.loanaccountinfo.termPeriodFrequencyType.id;
                scope.loandetails.loanTermFrequencyValue = scope.loanaccountinfo.termPeriodFrequencyType.value;
                scope.formData.numberOfRepayments = scope.loanaccountinfo.numberOfRepayments;
                scope.formData.repaymentEvery = scope.loanaccountinfo.repaymentEvery;
                scope.formData.repaymentFrequencyType = scope.loanaccountinfo.repaymentFrequencyType.id;
                scope.loandetails.repaymentFrequencyValue = scope.loanaccountinfo.repaymentFrequencyType.value;
                scope.formData.interestRatePerPeriod = scope.loanaccountinfo.interestRatePerPeriod;
                scope.formData.amortizationType = scope.loanaccountinfo.amortizationType.id;
                scope.formData.isEqualAmortization = scope.loanaccountinfo.isEqualAmortization;
                scope.loandetails.amortizationValue = scope.loanaccountinfo.amortizationType.value;
                scope.formData.interestType = scope.loanaccountinfo.interestType.id;
                scope.loandetails.interestValue = scope.loanaccountinfo.interestType.value;
                scope.formData.interestCalculationPeriodType = scope.loanaccountinfo.interestCalculationPeriodType.id;
                scope.loandetails.interestCalculationPeriodValue = scope.loanaccountinfo.interestCalculationPeriodType.value;
                scope.formData.allowPartialPeriodInterestCalcualtion = scope.loanaccountinfo.allowPartialPeriodInterestCalcualtion;
                scope.formData.inArrearsTolerance = scope.loanaccountinfo.inArrearsTolerance;
                scope.formData.graceOnPrincipalPayment = scope.loanaccountinfo.graceOnPrincipalPayment;
                scope.formData.graceOnInterestPayment = scope.loanaccountinfo.graceOnInterestPayment;
                scope.formData.graceOnArrearsAgeing = scope.loanaccountinfo.graceOnArrearsAgeing;
                scope.formData.transactionProcessingStrategyId = scope.loanaccountinfo.transactionProcessingStrategyId;
                scope.loandetails.transactionProcessingStrategyValue = scope.formValue(scope.loanaccountinfo.transactionProcessingStrategyOptions,scope.formData.transactionProcessingStrategyId,'id','name');
                scope.formData.graceOnInterestCharged = scope.loanaccountinfo.graceOnInterestCharged;
                scope.formData.fixedEmiAmount = scope.loanaccountinfo.fixedEmiAmount;
                scope.formData.maxOutstandingLoanBalance = scope.loanaccountinfo.maxOutstandingLoanBalance;

                if (scope.loanaccountinfo.isInterestRecalculationEnabled && scope.loanaccountinfo.interestRecalculationData.recalculationRestFrequencyDate) {
                    scope.date.recalculationRestFrequencyDate = new Date(scope.loanaccountinfo.interestRecalculationData.recalculationRestFrequencyDate);
                }
                if (scope.loanaccountinfo.isInterestRecalculationEnabled && scope.loanaccountinfo.interestRecalculationData.recalculationCompoundingFrequencyDate) {
                    scope.date.recalculationCompoundingFrequencyDate = new Date(scope.loanaccountinfo.interestRecalculationData.recalculationCompoundingFrequencyDate);
                }

                if(scope.loanaccountinfo.isLoanProductLinkedToFloatingRate) {
                    scope.formData.isFloatingInterestRate = false ;
                }

                scope.loandetails = angular.copy(scope.formData);
                scope.loandetails.productName = scope.formValue(scope.products,scope.formData.productId,'id','name');
                scope.formData.rates = scope.loanaccountinfo.product.rates;
                if (scope.formData.rates && scope.formData.rates.length>0){
                    scope.rateFlag=true;
                }
                scope.rateOptions = [];
            };

          //Rate
          scope.rateSelected = function(currentRate){

            if(currentRate && !scope.checkIfRateAlreadyExist(currentRate)){
                scope.rateFlag=true;
              scope.formData.rates.push(currentRate);
              scope.rateOptions.splice(scope.rateOptions.indexOf(currentRate),1);
              scope.currentRate = '';
              currentRate = '';
              scope.calculateRates();
            }
          };

          scope.checkIfRateAlreadyExist = function(currentRate){
            var exist = false;
            scope.formData.rates.forEach(function(rate){
              if(rate.id === currentRate.id){
                exist = true;
              }
            });

            return exist
          };

          scope.calculateRates = function(){
            var total = 0;
            scope.formData.rates.forEach(function(rate){
              total += rate.percentage;
            });
            if (total===0){
                total=undefined;
                scope.rateFlag=false;
            }
            scope.formData.interestRatePerPeriod = total;


          };

          scope.deleteRate = function (index){
            scope.rateOptions.push(scope.formData.rates[index]);
            scope.formData.rates.splice(index,1);
            scope.calculateRates();
          };

          scope.$watch('formData',function(newVal){
                scope.loandetails = angular.extend(scope.loandetails,newVal);
            },true);

            scope.formValue = function(array,model,findattr,retAttr){
                findattr = findattr ? findattr : 'id';
                retAttr = retAttr ? retAttr : 'value';
                console.log(findattr,retAttr,model);
                return _.find(array, function (obj) {
                    return obj[findattr] === model;
                })[retAttr];
            };

            scope.addCharge = function () {
                if (scope.chargeFormData.chargeId) {
                    resourceFactory.chargeResource.get({chargeId: this.chargeFormData.chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        scope.chargeFormData.chargeId = undefined;
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }


            scope.addTranches = function () {
                scope.formData.disbursementData.push({
                });
            };
            scope.deleteTranches = function (index) {
                scope.formData.disbursementData.splice(index, 1);
            }

            scope.syncRepaymentsWithMeetingchange = function () {
                if (!scope.formData.syncRepaymentsWithMeeting) {
                    scope.formData.syncDisbursementWithMeeting = false;
                }
            };

            scope.syncDisbursementWithMeetingchange = function () {
                if (scope.formData.syncDisbursementWithMeeting) {
                    scope.formData.syncRepaymentsWithMeeting = true;
                }
            };

            scope.addCollateral = function () {
                if (scope.collateralFormData.collateralIdTemplate && scope.collateralFormData.collateralValueTemplate) {
                    scope.collaterals.push({type: scope.collateralFormData.collateralIdTemplate.id, name: scope.collateralFormData.collateralIdTemplate.name, value: scope.collateralFormData.collateralValueTemplate, description: scope.collateralFormData.collateralDescriptionTemplate});
                    scope.collateralFormData.collateralIdTemplate = undefined;
                    scope.collateralFormData.collateralValueTemplate = undefined;
                    scope.collateralFormData.collateralDescriptionTemplate = undefined;
                }
            };

            scope.deleteCollateral = function (index) {
                scope.collaterals.splice(index, 1);
            };

            scope.previewRepayments = function () {
                // Make sure charges and collaterals are empty before initializing.
                delete scope.formData.charges;
                delete scope.formData.collateral;
                if(_.isUndefined(scope.formData.datatables) || (!_.isUndefined(scope.formData.datatables) && scope.formData.datatables.length == 0)) {
                    delete scope.formData.datatables;
                }

                var reqFirstDate = dateFilter(scope.date.first, scope.df);
                var reqSecondDate = dateFilter(scope.date.second, scope.df);
                var reqThirdDate = dateFilter(scope.date.third, scope.df);
                var reqFourthDate = dateFilter(scope.date.fourth, scope.df);
                if (scope.charges.length > 0) {
                    scope.formData.charges = [];
                    for (var i in scope.charges) {
                        scope.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount, dueDate: dateFilter(scope.charges[i].dueDate, scope.df) });
                    }
                }

                if (scope.formData.disbursementData.length > 0) {
                    for (var i in scope.formData.disbursementData) {
                        scope.formData.disbursementData[i].expectedDisbursementDate = dateFilter(scope.formData.disbursementData[i].expectedDisbursementDate, scope.df);
                    }
                }

                if (scope.collaterals.length > 0) {
                    scope.formData.collateral = [];
                    for (var i in scope.collaterals) {
                        scope.formData.collateral.push({type: scope.collaterals[i].type, value: scope.collaterals[i].value, description: scope.collaterals[i].description});
                    }
                    ;
                }

                if (this.formData.syncRepaymentsWithMeeting) {
                    this.formData.calendarId = scope.loanaccountinfo.calendarOptions[0].id;
                    scope.syncRepaymentsWithMeeting = this.formData.syncRepaymentsWithMeeting;
                }
                delete this.formData.syncRepaymentsWithMeeting;

                this.formData.interestChargedFromDate = reqThirdDate;
                this.formData.repaymentsStartingFromDate = reqFourthDate;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.loanType = scope.inparams.templateType;
                this.formData.expectedDisbursementDate = reqSecondDate;
                this.formData.submittedOnDate = reqFirstDate;
                if(this.formData.interestCalculationPeriodType == 0){
                    this.formData.allowPartialPeriodInterestCalcualtion = false;
                }
                resourceFactory.loanResource.save({command: 'calculateLoanSchedule'}, this.formData, function (data) {
                    scope.repaymentscheduleinfo = data;
                    scope.previewRepayment = true;
                    scope.formData.syncRepaymentsWithMeeting = scope.syncRepaymentsWithMeeting;
                });

            }

            uiConfigService.appendConfigToScope(scope);

            //return input type
            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.submit = function () {
                // if (WizardHandler.wizard().getCurrentStep() != scope.noOfTabs) {
                //     WizardHandler.wizard().next();
                //     return;
                // }
                // Make sure charges and collaterals are empty before initializing.
                delete scope.formData.charges;
                delete scope.formData.collateral;
                var reqFirstDate = dateFilter(scope.date.first, scope.df);
                var reqSecondDate = dateFilter(scope.date.second, scope.df);
                var reqThirdDate = dateFilter(scope.date.third, scope.df);
                var reqFourthDate = dateFilter(scope.date.fourth, scope.df);
                var reqFifthDate = dateFilter(scope.date.fifth, scope.df);

                if (scope.charges.length > 0) {
                    scope.formData.charges = [];
                    for (var i in scope.charges) {
                        scope.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount, dueDate: dateFilter(scope.charges[i].dueDate, scope.df) });
                    }
                }

                if (scope.formData.disbursementData.length > 0) {
                    for (var i in scope.formData.disbursementData) {
                        scope.formData.disbursementData[i].expectedDisbursementDate = dateFilter(scope.formData.disbursementData[i].expectedDisbursementDate, scope.df);
                    }
                }
                if (scope.collaterals.length > 0) {
                    scope.formData.collateral = [];
                    for (var i in scope.collaterals) {
                        scope.formData.collateral.push({type: scope.collaterals[i].type, value: scope.collaterals[i].value, description: scope.collaterals[i].description});
                    }
                    ;
                }

                if (this.formData.syncRepaymentsWithMeeting) {
                    this.formData.calendarId = scope.loanaccountinfo.calendarOptions[0].id;
                }
                delete this.formData.syncRepaymentsWithMeeting;
                this.formData.interestChargedFromDate = reqThirdDate;
                this.formData.repaymentsStartingFromDate = reqFourthDate;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.loanType = scope.inparams.templateType;
                this.formData.expectedDisbursementDate = reqSecondDate;
                this.formData.submittedOnDate = reqFirstDate;
                this.formData.createStandingInstructionAtDisbursement = scope.formData.createStandingInstructionAtDisbursement;
                if (scope.date.recalculationRestFrequencyDate) {
                    var restFrequencyDate = dateFilter(scope.date.recalculationRestFrequencyDate, scope.df);
                    scope.formData.recalculationRestFrequencyDate = restFrequencyDate;
                }
                if (scope.date.recalculationCompoundingFrequencyDate) {
                    var restFrequencyDate = dateFilter(scope.date.recalculationCompoundingFrequencyDate, scope.df);
                    scope.formData.recalculationCompoundingFrequencyDate = restFrequencyDate;
                }
                if(this.formData.interestCalculationPeriodType == 0){
                    this.formData.allowPartialPeriodInterestCalcualtion = false;
                }
                if (!_.isUndefined(scope.datatables) && scope.datatables.length > 0) {
                    angular.forEach(scope.datatables, function (datatable, index) {
                        scope.columnHeaders = datatable.columnHeaderData;
                        angular.forEach(scope.columnHeaders, function (colHeader, i) {
                            scope.dateFormat = scope.df + " " + scope.tf
                            if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName])) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName],
                                        scope.dateFormat);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            } else if (scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date) && !_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time)) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date, scope.df)
                                        + " " + dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time, scope.tf);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            }
                        });
                    });
                } else {
                    delete scope.formData.datatables;
                }
                resourceFactory.loanResource.save(this.formData, function (data) {
                    location.path('/viewloanaccount/' + data.loanId);
                });
            };

            scope.cancel = function () {
                if (scope.groupId) {
                    location.path('/viewgroup/' + scope.groupId);
                } else if (scope.clientId) {
                    location.path('/viewclient/' + scope.clientId);
                }
            }
        }
    });
    mifosX.ng.application.controller('NewLoanAccAppController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', 'UIConfigService', 'WizardHandler', '$translate',mifosX.controllers.NewLoanAccAppController]).run(function ($log) {
        $log.info("NewLoanAccAppController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        PreviewLoanRepaymentScheduleController: function (scope, resourceFactory, routeParams, location, dateFilter) {
            scope.requestId = routeParams.requestId;
            scope.loanId = routeParams.loanId;
            scope.data = {};

            resourceFactory.loanRescheduleResource.preview({scheduleId:scope.requestId}, function (data) {
                scope.data = data;
            });
            scope.reject = function(){
                location.path('/loans/' + scope.loanId + '/rejectreschedulerequest/'+scope.requestId);
            };
            scope.approve = function(){
                location.path('/loans/' + scope.loanId + '/approvereschedulerequest/'+scope.requestId);
            };

            scope.back = function () {
                location.path('/loans/' + scope.loanId + '/viewreschedulerequest/'+scope.requestId);
            };
        }
    });
    mifosX.ng.application.controller('PreviewLoanRepaymentScheduleController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.PreviewLoanRepaymentScheduleController]).run(function ($log) {
        $log.info("PreviewLoanRepaymentScheduleController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        RejectLoanRescheduleRequestController: function (scope, resourceFactory, routeParams, location, dateFilter) {
            scope.formData = {};
            scope.loanId = routeParams.loanId;
            scope.requestId = routeParams.requestId;

            scope.cancel = function () {
                location.path('/loans/' + scope.loanId + '/viewreschedulerequest/'+scope.requestId);
            };
            scope.reject = function(){
                this.formData.dateFormat = scope.df;
                this.formData.locale = scope.optlang.code;
                this.formData.rejectedOnDate = dateFilter(this.formData.rejectedOnDate, scope.df);

                resourceFactory.loanRescheduleResource.reject({scheduleId:scope.requestId},this.formData,function (data) {
                    location.path('/viewloanaccount/' + scope.loanId);
                });
            };
        }
    });
    mifosX.ng.application.controller('RejectLoanRescheduleRequestController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.RejectLoanRescheduleRequestController]).run(function ($log) {
        $log.info("RejectLoanRescheduleRequestController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        RescheduleLoansRequestController: function (scope, resourceFactory, routeParams, location, dateFilter) {
            scope.loanId = routeParams.loanId;
            scope.formData = {};
            scope.rejectData = {};
            scope.formData.submittedOnDate = new Date();

            resourceFactory.loanRescheduleResource.template({scheduleId:'template'},function(data){
                if (data.length > 0) {
                    scope.formData.rescheduleReasonId = data.rescheduleReasons[0].id;
                }
                scope.codes = data.rescheduleReasons;
            });
            scope.cancel = function () {
                location.path('/viewloanaccount/' + scope.loanId);
            };

            scope.submit = function () {
                this.formData.loanId = scope.loanId;
                this.formData.dateFormat = scope.df;
                this.formData.locale = scope.optlang.code;
                this.formData.rescheduleFromDate = dateFilter(this.formData.rescheduleFromDate, scope.df);
                this.formData.adjustedDueDate = dateFilter(this.formData.adjustedDueDate, scope.df);
                this.formData.submittedOnDate = dateFilter(this.formData.submittedOnDate, scope.df);
                this.formData.endDate = dateFilter(this.formData.endDate, scope.df);
                this.formData.rescheduleReasonComment = scope.comments;
                resourceFactory.loanRescheduleResource.put(this.formData, function (data) {
                    scope.requestId = data.resourceId;
                    location.path('/loans/' + scope.loanId + '/viewreschedulerequest/'+ data.resourceId);
                });
            };

        }
    });
    mifosX.ng.application.controller('RescheduleLoansRequestController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.RescheduleLoansRequestController]).run(function ($log) {
        $log.info("RescheduleLoansRequestController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewGLIMaccountController: function (scope, routeParams, resourceFactory, location, route, http, $uibModal, dateFilter, API_VERSION, $sce, $rootScope) {

            var parentLoanAccountNo=routeParams.id;
            scope.groupId=routeParams.groupId;
            scope.glimId=routeParams.glimId;
            scope.groupGLIMAccounts={};
            scope.productName="";
            scope.buttons={};
            scope.routeToLoan = function (id) {
                location.path('/viewloanaccount/' + id);
            };

            var parentglimid=0;



            resourceFactory.glimLoanTemplate.get({glimId: scope.glimId}, function (data) {

                scope.glimAccounts = data;

                for(i=0;i<scope.glimAccounts.length;i++)
                {

                    var temp={};
                    temp.parentAccountNo=data[i].parentAccountNo;
                    temp.clientName=data[i].clientName;
                    temp.childLoanId=data[i].childLoanId;
                    temp.childLoanAccountNo=data[i].childLoanAccountNo;
                    temp.approvedLoanAmount=parseFloat(data[i].childPrincipalAmount);

                    scope.totalLoanAmount+=parseFloat(data[i].childPrincipalAmount);


                    scope.approvalArray.push(temp);
                }
            });


            resourceFactory.groupGLIMAccountResource.get({groupId: routeParams.groupId,parentLoanAccountNo:parentLoanAccountNo }, function (data) {
                scope.groupGLIMAccounts = data[0];
                scope.productName=data[0].childGLIMAccounts[0].productName;
                parentglimid=data[0].childGLIMAccounts[0].id;
                scope.id=data[0].childGLIMAccounts[0].id;
                scope.submittedOnDate=data[0].childGLIMAccounts[0].timeline.submittedOnDate;
                scope.value=data[0].childGLIMAccounts[0].status.value;

                if (scope.groupGLIMAccounts.loanStatus === "SUBMITTED_AND_PENDING_APPROVAL") {

                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.approve",
                            icon: "fa fa-check",
                            taskPermissionName: 'APPROVE_LOAN'
                        },
                        {
                            name: "button.reject",
                            icon: "fa fa-times",
                            taskPermissionName: 'REJECT_LOAN'
                        }
                    ]
                    };
                }

                if (data[0].loanStatus === "APPROVED") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.disburse",
                            icon: "fa fa-flag",
                            taskPermissionName: 'DISBURSE_LOAN'
                        },
                        {
                            name: "button.undoapproval",
                            icon: "fa fa-undo",
                            taskPermissionName: 'APPROVALUNDO_LOAN'
                        }
                    ]
                    };
                }

                if (data[0].loanStatus === "ACTIVE") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.makerepayment",
                            icon: "fa fa-dollar",
                            taskPermissionName: 'REPAYMENT_LOAN'
                        },
                        {
                            name: "button.undodisbursal",
                            icon: "fa fa-undo",
                            taskPermissionName: 'DISBURSALUNDO_LOAN'
                        }
                    ]
                    };
                }
            });

            scope.clickEvent = function (eventName, accountId) {
                eventName = eventName || "";
                switch (eventName) {
                    case "addloancharge":
                        location.path('/addloancharge/' + accountId);
                        break;
                    case "addcollateral":
                        location.path('/addcollateral/' + accountId);
                        break;
                    case "assignloanofficer":
                        location.path('/assignloanofficer/' + accountId);
                        break;
                    case "modifyapplication":
                        location.path('/editloanaccount/' + parentglimid);
                        break;
                    case "approve":
                        location.path('/glimloanaccount/' + routeParams.id + '/glimApprove/'+accountId +'/'+scope.groupId);   //accountid is glimId and  routerparamsid is child loanid
                        break;
                    case "reject":
                        location.path('/glimloanaccount/' + routeParams.id +'/reject/'+accountId+'/'+scope.groupId);
                        break;
                    case "withdrawnbyclient":
                        location.path('/loanaccount/' + accountId + '/withdrawnByApplicant');
                        break;
                    case "delete":
                        resourceFactory.LoanAccountResource.delete({loanId: accountId}, {}, function (data) {
                            var destination = '/viewgroup/' + data.groupId;
                            if (data.clientId) destination = '/viewclient/' + data.clientId;
                            location.path(destination);
                        });
                        break;
                    case "undoapproval":
                        location.path('/glimloanaccount/' + routeParams.id + '/undoapproval/'+ accountId +'/'+scope.groupId);
                        break;
                    case "disburse":
                        location.path('/glimloanaccount/' + routeParams.id + '/glimDisburse/'+accountId+'/'+scope.groupId);
                        break;
                    case "disbursetosavings":
                        location.path('/loanaccount/' + accountId + '/disbursetosavings');
                        break;
                    case "undodisbursal":
                        location.path('/glimloanaccount/'+ routeParams.id + '/undodisbursal/'+ accountId +'/'+scope.groupId);
                        break;
                    case "makerepayment":
                        location.path('/glimloanaccount/' + routeParams.id + '/glimrepayment/'+accountId+'/'+scope.groupId);
                        break;
                    case "prepayment":
                        location.path('/loanaccount/' + accountId + '/prepayloan');
                        break;
                    case "waiveinterest":
                        location.path('/loanaccount/' + accountId + '/waiveinterest');
                        break;
                    case "writeoff":
                        location.path('/loanaccount/' + accountId + '/writeoff');
                        break;
                    case "recoverypayment":
                        location.path('/loanaccount/' + accountId + '/recoverypayment');
                        break;
                    case "close-rescheduled":
                        location.path('/loanaccount/' + accountId + '/close-rescheduled');
                        break;
                    case "transferFunds":
                        if (scope.loandetails.clientId) {
                            location.path('/accounttransfers/fromloans/' + accountId);
                        }
                        break;
                    case "close":
                        location.path('/loanaccount/' + accountId + '/close');
                        break;
                    case "createguarantor":
                        location.path('/guarantor/' + accountId);
                        break;
                    case "listguarantor":
                        location.path('/listguarantors/' + accountId);
                        break;
                    case "recoverguarantee":
                        location.path('/loanaccount/' + accountId + '/recoverguarantee');
                        break;
                    case "unassignloanofficer":
                        location.path('/loanaccount/' + accountId + '/unassignloanofficer');
                        break;
                    case "loanscreenreport":
                        location.path('/loanscreenreport/' + accountId);
                        break;
                    case "reschedule":
                        location.path('/loans/' +accountId + '/reschedule');
                        break;
                    case "adjustrepaymentschedule":
                        location.path('/adjustrepaymentschedule/'+accountId) ;
                        break ;
                    case "foreclosure":
                        location.path('loanforeclosure/' + accountId);
                        break;
                }
            };

            resourceFactory.groupResource.get({groupId: routeParams.groupId, associations: 'all'}, function (data) {
                scope.group = data;

            });
        }
    });
    mifosX.ng.application.controller('ViewGLIMaccountController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$route', '$http', '$uibModal', 'dateFilter', 'API_VERSION', '$sce', '$rootScope', mifosX.controllers.ViewGLIMaccountController]).run(function ($log) {
        $log.info("ViewGLIMaccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewLoanChargeController: function (scope, resourceFactory, routeParams, location, $uibModal) {

            scope.loanId = routeParams.loanId;
            scope.chargeId = routeParams.id;
            if (routeParams.loanstatus == 'Submitted and pending approval') {
                scope.showEditButtons = true;
            }
            if (routeParams.loanstatus == 'Active') {
                scope.showWaiveButton = true;
            }
            resourceFactory.loanResource.get({ resourceType: 'charges', loanId: scope.loanId, resourceId: scope.chargeId}, function (data) {
                scope.charge = data;
            });
            scope.deleteCharge = function () {
                $uibModal.open({
                    templateUrl: 'deletecharge.html',
                    controller: ChargeDeleteCtrl
                });
            };
            var ChargeDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.loanResource.delete({ resourceType: 'charges', loanId: scope.loanId, resourceId: scope.chargeId}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/viewloanaccount/' + scope.loanId);
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.waiveCharge = function () {
                resourceFactory.loanResource.save({ resourceType: 'charges', loanId: scope.loanId, resourceId: scope.chargeId}, {}, function (data) {
                    location.path('/viewloanaccount/' + scope.loanId);
                });
            };

        }
    });
    mifosX.ng.application.controller('ViewLoanChargeController', ['$scope', 'ResourceFactory', '$routeParams', '$location', '$uibModal', mifosX.controllers.ViewLoanChargeController]).run(function ($log) {
        $log.info("ViewLoanChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewLoanCollateralController: function (scope, resourceFactory, routeParams, location, $uibModal) {

            scope.loanId = routeParams.loanId;
            scope.collateralId = routeParams.id;
            scope.showEditButtons = routeParams.status == 'Submitted and pending approval' ? true : false;
            resourceFactory.loanResource.get({ resourceType: 'collaterals', loanId: scope.loanId, resourceId: scope.collateralId}, function (data) {
                scope.collateral = data;
            });
            scope.deleteCollateral = function () {
                $uibModal.open({
                    templateUrl: 'deletecollateral.html',
                    controller: CollateralDeleteCtrl
                });
            };
            var CollateralDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.loanResource.delete({ resourceType: 'collaterals', loanId: scope.loanId, resourceId: scope.collateralId}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/viewloanaccount/' + scope.loanId);
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewLoanCollateralController', ['$scope', 'ResourceFactory', '$routeParams', '$location', '$uibModal', mifosX.controllers.ViewLoanCollateralController]).run(function ($log) {
        $log.info("ViewLoanCollateralController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewLoanDetailsController: function (scope, routeParams, resourceFactory,paginatorService, location, route, http, $uibModal, dateFilter, API_VERSION, $sce, $rootScope) {
            scope.loandocuments = [];
            scope.report = false;
            scope.hidePentahoReport = true;
            scope.formData = {};
            scope.date = {};
            scope.date.payDate = new Date();
            scope.hideAccrualTransactions = false;
            scope.isHideAccrualsCheckboxChecked = true;
            scope.loandetails = [];
            scope.routeTo = function (loanId, transactionId, transactionTypeId) {
                if (transactionTypeId == 2 || transactionTypeId == 4 || transactionTypeId == 1) {
                    $rootScope.rates = scope.loandetails.rates;
                    location.path('/viewloantrxn/' + loanId + '/trxnId/' + transactionId);
                };
            };

            /***
             * we are using orderBy(https://docs.angularjs.org/api/ng/filter/orderBy) filter to sort fields in ui
             * api returns dates in array format[yyyy, mm, dd], converting the array of dates to date object
             * @param dateFieldName
             */
            scope.convertDateArrayToObject = function(dateFieldName){
                for(var i in scope.loandetails.transactions){
                    scope.loandetails.transactions[i][dateFieldName] = new Date(scope.loandetails.transactions[i].date);
                }
            };

            scope.clickEvent = function (eventName, accountId) {
                eventName = eventName || "";
                switch (eventName) {
                    case "addloancharge":
                        location.path('/addloancharge/' + accountId);
                        break;
                    case "addcollateral":
                        location.path('/addcollateral/' + accountId);
                        break;
                    case "assignloanofficer":
                    case "changeloanofficer":
                        location.path('/assignloanofficer/' + accountId);
                        break;
                    case "modifyapplication":
                        location.path('/editloanaccount/' + accountId);
                        break;
                    case "approve":
                        location.path('/loanaccount/' + accountId + '/approve');
                        break;
                    case "reject":
                        location.path('/loanaccount/' + accountId + '/reject');
                        break;
                    case "withdrawnbyclient":
                        location.path('/loanaccount/' + accountId + '/withdrawnByApplicant');
                        break;
                    case "delete":
                        resourceFactory.LoanAccountResource.delete({loanId: accountId}, {}, function (data) {
                            var destination = '/viewgroup/' + data.groupId;
                            if (data.clientId) destination = '/viewclient/' + data.clientId;
                            location.path(destination);
                        });
                        break;
                    case "undoapproval":
                        location.path('/loanaccount/' + accountId + '/undoapproval');
                        break;
                    case "disburse":
                        location.path('/loanaccount/' + accountId + '/disburse');
                        break;
                    case "disbursetosavings":
                        location.path('/loanaccount/' + accountId + '/disbursetosavings');
                        break;
                    case "undodisbursal":
                        location.path('/loanaccount/' + accountId + '/undodisbursal');
                        break;
                    case "makerepayment":
                        location.path('/loanaccount/' + accountId + '/repayment');
                        break;
                    case "prepayment":
                        location.path('/loanaccount/' + accountId + '/prepayloan');
                        break;
                    case "waiveinterest":
                        location.path('/loanaccount/' + accountId + '/waiveinterest');
                        break;
                    case "writeoff":
                        location.path('/loanaccount/' + accountId + '/writeoff');
                        break;
                    case "recoverypayment":
                        location.path('/loanaccount/' + accountId + '/recoverypayment');
                        break;
                    case "close-rescheduled":
                        location.path('/loanaccount/' + accountId + '/close-rescheduled');
                        break;
                    case "transferFunds":
                        if (scope.loandetails.clientId) {
                            location.path('/accounttransfers/fromloans/' + accountId);
                        }
                        break;
                    case "close":
                        location.path('/loanaccount/' + accountId + '/close');
                        break;
                    case "createguarantor":
                        location.path('/guarantor/' + accountId);
                        break;
                    case "listguarantor":
                        location.path('/listguarantors/' + accountId);
                        break;
                    case "recoverguarantee":
                        location.path('/loanaccount/' + accountId + '/recoverguarantee');
                        break;
                    case "unassignloanofficer":
                        location.path('/loanaccount/' + accountId + '/unassignloanofficer');
                        break;
                    case "loanscreenreport":
                        location.path('/loanscreenreport/' + accountId);
                        break;
                    case "reschedule":
                        location.path('/loans/' +accountId + '/reschedule');
                        break;
                    case "adjustrepaymentschedule":
                        location.path('/adjustrepaymentschedule/'+accountId) ;
                        break ;
                    case "foreclosure":
                        location.path('loanforeclosure/' + accountId);
                        break;
                }
            };

            scope.delCharge = function (id) {
                $uibModal.open({
                    templateUrl: 'delcharge.html',
                    controller: DelChargeCtrl,
                    resolve: {
                        ids: function () {
                            return id;
                        }
                    }
                });
            };

            var DelChargeCtrl = function ($scope, $uibModalInstance, ids) {
                $scope.delete = function () {
                    resourceFactory.LoanAccountResource.delete({loanId: routeParams.id, resourceType: 'charges', chargeId: ids}, {}, function (data) {

                        $uibModalInstance.close('delete');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            resourceFactory.LoanAccountResource.getLoanAccountDetails({loanId: routeParams.id, associations: 'all',exclude: 'guarantors,futureSchedule'}, function (data) {
                scope.loandetails = data;
                scope.convertDateArrayToObject('date');
                scope.recalculateInterest = data.recalculateInterest || true;
                scope.isWaived = scope.loandetails.repaymentSchedule.totalWaived > 0;
                scope.date.fromDate = new Date(data.timeline.actualDisbursementDate);
                scope.date.toDate = new Date();
                scope.status = data.status.value;
                scope.chargeAction = data.status.value == "Submitted and pending approval" ? true : false;
                scope.decimals = data.currency.decimalPlaces;
                if (scope.loandetails.charges) {
                    scope.charges = scope.loandetails.charges;
                    for (var i in scope.charges) {
                        if (scope.charges[i].paid || scope.charges[i].waived || scope.charges[i].chargeTimeType.value == 'Disbursement' || scope.loandetails.status.value != 'Active') {
                            var actionFlag = true;
                        }
                        else {
                            var actionFlag = false;
                        }
                        scope.charges[i].actionFlag = actionFlag;
                    }

                    scope.chargeTableShow = true;
                }
                else {
                    scope.chargeTableShow = false;
                }
                if (scope.status == "Submitted and pending approval" || scope.status == "Active" || scope.status == "Approved") {
                    scope.choice = true;
                }
                if (data.status.value == "Submitted and pending approval") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.addloancharge",
                            icon: "fa fa-plus",
                            taskPermissionName: 'CREATE_LOANCHARGE'
                        },
                        {
                            name: "button.approve",
                            icon: "fa fa-check",
                            taskPermissionName: 'APPROVE_LOAN'
                        },
                        {
                            name: "button.modifyapplication",
                            icon: "fa fa-pincel-square-o",
                            taskPermissionName: 'UPDATE_LOAN'
                        },
                        {
                            name: "button.reject",
                            icon: "fa fa-times",
                            taskPermissionName: 'REJECT_LOAN'
                        }
                    ],
                        options: [
                            {
                                name: (scope.loandetails.loanOfficerName?"button.changeloanofficer":"button.assignloanofficer"),
                                taskPermissionName: 'UPDATELOANOFFICER_LOAN'
                            },
                            {
                                name: "button.withdrawnbyclient",
                                taskPermissionName: 'WITHDRAW_LOAN'
                            },
                            {
                                name: "button.delete",
                                taskPermissionName: 'DELETE_LOAN'
                            },
                            {
                                name: "button.addcollateral",
                                taskPermissionName: 'CREATE_COLLATERAL'
                            },
                            {
                                name: "button.listguarantor",
                                taskPermissionName: 'READ_GUARANTOR'
                            },
                            {
                                name: "button.createguarantor",
                                taskPermissionName: 'CREATE_GUARANTOR'
                            },
                            {
                                name: "button.loanscreenreport",
                                taskPermissionName: 'READ_LOAN'
                            }
                        ]

                    };
                    if(data.isVariableInstallmentsAllowed) {
                        scope.buttons.options.push({
                            name: "button.adjustrepaymentschedule",
                            taskPermissionName: 'ADJUST_REPAYMENT_SCHEDULE'
                        }) ;
                    }
                }

                if (data.status.value == "Approved") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: (scope.loandetails.loanOfficerName?"button.changeloanofficer":"button.assignloanofficer"),
                            icon: "fa fa-user",
                            taskPermissionName: 'UPDATELOANOFFICER_LOAN'
                        },
                        {
                            name: "button.disburse",
                            icon: "fa fa-flag",
                            taskPermissionName: 'DISBURSE_LOAN'
                        },
                        {
                            name: "button.disbursetosavings",
                            icon: "fa fa-flag",
                            taskPermissionName: 'DISBURSETOSAVINGS_LOAN'
                        },
                        {
                            name: "button.undoapproval",
                            icon: "fa fa-undo",
                            taskPermissionName: 'APPROVALUNDO_LOAN'
                        }
                    ],
                        options: [
                            {
                                name: "button.addloancharge",
                                taskPermissionName: 'CREATE_LOANCHARGE'
                            },
                            {
                                name: "button.listguarantor",
                                taskPermissionName: 'READ_GUARANTOR'
                            },
                            {
                                name: "button.createguarantor",
                                taskPermissionName: 'CREATE_GUARANTOR'
                            },
                            {
                                name: "button.loanscreenreport",
                                taskPermissionName: 'READ_LOAN'
                            }
                        ]

                    };
                }

                if (data.status.value == "Active") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.addloancharge",
                            icon: "fa fa-plus",
                            taskPermissionName: 'CREATE_LOANCHARGE'
                        },
                        {
                            name: "button.foreclosure",
                            icon: "icon-dollar",
                            taskPermissionName: 'FORECLOSURE_LOAN'
                        },
                        {
                            name: "button.makerepayment",
                            icon: "fa fa-dollar",
                            taskPermissionName: 'REPAYMENT_LOAN'
                        },
                        {
                            name: "button.undodisbursal",
                            icon: "fa fa-undo",
                            taskPermissionName: 'DISBURSALUNDO_LOAN'
                        }
                    ],
                        options: [
                            {
                                name: "button.waiveinterest",
                                taskPermissionName: 'WAIVEINTERESTPORTION_LOAN'
                            },
                            {
                                name: "button.reschedule",
                                taskPermissionName: 'CREATE_RESCHEDULELOAN'
                            },
                            {
                                name: "button.writeoff",
                                taskPermissionName: 'WRITEOFF_LOAN'
                            },
                            {
                                name: "button.close-rescheduled",
                                taskPermissionName: 'CLOSEASRESCHEDULED_LOAN'
                            },
                            {
                                name: "button.close",
                                taskPermissionName: 'CLOSE_LOAN'
                            },
                            {
                                name: "button.loanscreenreport",
                                taskPermissionName: 'READ_LOAN'
                            },
                            {
                                name: "button.listguarantor",
                                taskPermissionName: 'READ_GUARANTOR'
                            },
                            {
                                name: "button.createguarantor",
                                taskPermissionName: 'CREATE_GUARANTOR'
                            },
                            {
                                name: "button.recoverguarantee",
                                taskPermissionName: 'RECOVERGUARANTEES_LOAN'
                            }
                        ]

                    };

                    if (data.canDisburse) {
                        scope.buttons.singlebuttons.splice(1, 0, {
                            name: "button.disburse",
                            icon: "fa fa-flag",
                            taskPermissionName: 'DISBURSE_LOAN'
                        });
                        scope.buttons.singlebuttons.splice(1, 0, {
                            name: "button.disbursetosavings",
                            icon: "fa fa-flag",
                            taskPermissionName: 'DISBURSETOSAVINGS_LOAN'
                        });
                    }
                    //loan officer not assigned to loan, below logic
                    //helps to display otherwise not
                    if (!data.loanOfficerName) {
                        scope.buttons.singlebuttons.splice(1, 0, {
                            name: "button.assignloanofficer",
                            icon: "fa fa-user",
                            taskPermissionName: 'UPDATELOANOFFICER_LOAN'
                        });
                    }

                    if(scope.recalculateInterest){
                        scope.buttons.singlebuttons.splice(1, 0, {
                            name: "button.prepayment",
                            icon: "fa fa-money",
                            taskPermissionName: 'REPAYMENT_LOAN'
                        });
                    }
                }
                if (data.status.value == "Overpaid") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.transferFunds",
                            icon: "fa fa-exchange",
                            taskPermissionName: 'CREATE_ACCOUNTTRANSFER'
                        }
                    ]
                    };
                }
                if (data.status.value == "Closed (written off)") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.recoverypayment",
                            icon: "fa fa-briefcase",
                            taskPermissionName: 'RECOVERYPAYMENT_LOAN'
                        }
                    ]
                    };
                }

                resourceFactory.standingInstructionTemplateResource.get({fromClientId: scope.loandetails.clientId,fromAccountType: 1,fromAccountId: routeParams.id},function (response) {
                    scope.standinginstruction = response;
                    scope.searchTransaction();
                });
            });

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.fromAccountId = routeParams.id;
                params.fromAccountType = 1;
                params.clientId = scope.loandetails.clientId;
                params.clientName = scope.loandetails.clientName;
                params.dateFormat = scope.df;

                resourceFactory.standingInstructionResource.search(params, callback);
            };

            scope.searchTransaction = function () {
                scope.displayResults = true;
                scope.instructions = paginatorService.paginate(fetchFunction, 14);
                scope.isCollapsed = false;
            };

            scope.deletestandinginstruction = function (id) {
                $uibModal.open({
                    templateUrl: 'delInstruction.html',
                    controller: DelInstructionCtrl,
                    resolve: {
                        ids: function () {
                            return id;
                        }
                    }
                });
            };

            var DelInstructionCtrl = function ($scope, $uibModalInstance, ids) {
                $scope.delete = function () {
                    resourceFactory.standingInstructionResource.cancel({standingInstructionId: ids}, function (data) {
                        scope.searchTransaction();
                        $uibModalInstance.close('delete');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            resourceFactory.loanResource.getAllNotes({loanId: routeParams.id,resourceType:'notes'}, function (data) {
                scope.loanNotes = data;
            });



            scope.saveNote = function () {
                resourceFactory.loanResource.save({loanId: routeParams.id, resourceType: 'notes'}, this.formData, function (data) {
                    var today = new Date();
                    temp = { id: data.resourceId, note: scope.formData.note, createdByUsername: "test", createdOn: today };
                    scope.loanNotes.push(temp);
                    scope.formData.note = "";
                    scope.predicate = '-id';
                });
            };

            scope.getLoanDocuments = function () {
                resourceFactory.LoanDocumentResource.getLoanDocuments({loanId: routeParams.id}, function (data) {
                    for (var i in data) {
                        var loandocs = {};
                        loandocs = API_VERSION + '/loans/' + data[i].parentEntityId + '/documents/' + data[i].id + '/attachment?tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[i].docUrl = loandocs;
                        if (data[i].fileName)
                            if (data[i].fileName.toLowerCase().indexOf('.jpg') != -1 || data[i].fileName.toLowerCase().indexOf('.jpeg') != -1 || data[i].fileName.toLowerCase().indexOf('.png') != -1)
                                data[i].fileIsImage = true;
                        if (data[i].type)
                             if (data[i].type.toLowerCase().indexOf('image') != -1)
                                data[i].fileIsImage = true;
                    }
                    scope.loandocuments = data;
                });

            };

            resourceFactory.DataTablesResource.getAllDataTables({apptable: 'm_loan'}, function (data) {
                scope.loandatatables = data;
            });

            scope.dataTableChange = function (datatable) {
                resourceFactory.DataTablesResource.getTableDetails({datatablename: datatable.registeredTableName,
                    entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                    scope.datatabledetails = data;
                    console.log(data);
                    scope.datatabledetails.isData = data.data.length > 0 ? true : false;
                    scope.datatabledetails.isMultirow = data.columnHeaders[0].columnName == "id" ? true : false;
                    scope.showDataTableAddButton = !scope.datatabledetails.isData || scope.datatabledetails.isMultirow;
                    scope.showDataTableEditButton = scope.datatabledetails.isData && !scope.datatabledetails.isMultirow;
                    scope.singleRow = [];
                    for (var i in data.columnHeaders) {
                        if (scope.datatabledetails.columnHeaders[i].columnCode) {
                            for (var j in scope.datatabledetails.columnHeaders[i].columnValues) {
                                for (var k in data.data) {
                                    if (data.data[k].row[i] == scope.datatabledetails.columnHeaders[i].columnValues[j].id) {
                                        data.data[k].row[i] = scope.datatabledetails.columnHeaders[i].columnValues[j].value;
                                    }
                                }
                            }
                        }
                    }
                    if (scope.datatabledetails.isData) {
                        for (var i in data.columnHeaders) {
                            if (!scope.datatabledetails.isMultirow) {
                                var row = {};
                                row.key = data.columnHeaders[i].columnName;
                                row.value = data.data[0].row[i];
                                scope.singleRow.push(row);
                            }
                        }
                    }

                });
            };

            scope.export = function () {
                scope.report = true;
                scope.printbtn = false;
                scope.viewReport = false;
                scope.viewLoanReport = true;
                scope.viewTransactionReport = false;
            };

            scope.viewJournalEntries = function(){
                location.path("/searchtransaction/").search({loanId: scope.loandetails.id});
            };

            scope.viewLoanDetails = function () {
                scope.report = false;
                scope.hidePentahoReport = true;
                scope.viewReport = false;
            };

            scope.viewLoanCollateral = function (collateralId){
                location.path('/loan/'+scope.loandetails.id+'/viewcollateral/'+collateralId).search({status:scope.loandetails.status.value});
            };

            scope.viewDataTable = function (registeredTableName,data){
                if (scope.datatabledetails.isMultirow) {
                    location.path("/viewdatatableentry/"+registeredTableName+"/"+scope.loandetails.id+"/"+data.row[0]);
                }else{
                    location.path("/viewsingledatatableentry/"+registeredTableName+"/"+scope.loandetails.id);
                }
            };

            scope.viewLoanChargeDetails = function (chargeId) {
                location.path('/loan/'+scope.loandetails.id+'/viewcharge/'+chargeId).search({loanstatus:scope.loandetails.status.value});
            };

            scope.viewprintdetails = function () {
                //scope.printbtn = true;
                scope.report = true;
                scope.viewTransactionReport = false;
                scope.viewReport = true;
                scope.hidePentahoReport = true;
                scope.formData.outputType = 'PDF';
                scope.baseURL = $rootScope.hostUrl + API_VERSION + "/runreports/" + encodeURIComponent("Client Loan Account Schedule");
                scope.baseURL += "?output-type=" + encodeURIComponent(scope.formData.outputType) + "&tenantIdentifier=" + $rootScope.tenantIdentifier+"&locale="+scope.optlang.code;

                var reportParams = "";
                scope.startDate = dateFilter(scope.date.fromDate, 'yyyy-MM-dd');
                scope.endDate = dateFilter(scope.date.toDate, 'yyyy-MM-dd');
                var paramName = "R_startDate";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.startDate)+ "&";
                paramName = "R_endDate";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.endDate)+ "&";
                paramName = "R_selectLoan";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.loandetails.accountNo);
                if (reportParams > "") {
                    scope.baseURL += "&" + reportParams;
                }
                // allow untrusted urls for iframe http://docs.angularjs.org/error/$sce/insecurl
                scope.viewReportDetails = $sce.trustAsResourceUrl(scope.baseURL);

            };

            scope.viewloantransactionreceipts = function (transactionId) {
                //scope.printbtn = true;
                scope.report = true;
                scope.viewTransactionReport = true;
                scope.viewLoanReport = false;
                scope.viewReport = true;
                scope.hidePentahoReport = true;
                scope.formData.outputType = 'PDF';
                scope.baseURL = $rootScope.hostUrl + API_VERSION + "/runreports/" + encodeURIComponent("Loan Transaction Receipt");
                scope.baseURL += "?output-type=" + encodeURIComponent(scope.formData.outputType) + "&tenantIdentifier=" + $rootScope.tenantIdentifier+"&locale="+scope.optlang.code;

                var reportParams = "";
                var paramName = "R_transactionId";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(transactionId);
                if (reportParams > "") {
                    scope.baseURL += "&" + reportParams;
                }
                // allow untrusted urls for iframe http://docs.angularjs.org/error/$sce/insecurl
                scope.viewReportDetails = $sce.trustAsResourceUrl(scope.baseURL);

            };
            scope.viewloantransactionjournalentries = function(transactionId){
                var transactionId = "L" + transactionId;
                if(scope.loandetails.clientId != null && scope.loandetails.clientId != ""){
                    location.path('/viewtransactions/' + transactionId).search({productName: scope.loandetails.loanProductName,loanId:scope.loandetails.id,clientId: scope.loandetails.clientId,
                        accountNo: scope.loandetails.accountNo,clientName: scope.loandetails.clientName});
                }else{
                    location.path('/viewtransactions/' + transactionId).search({productName: scope.loandetails.loanProductName,loanId:scope.loandetails.id,accountNo: scope.loandetails.accountNo,
                        groupId :scope.loandetails.group.id,groupName :scope.loandetails.group.name});

                }

            };

            scope.printReport = function () {
                window.print();
                window.close();
            }

            scope.deleteAll = function (apptableName, entityId) {
                resourceFactory.DataTablesResource.delete({datatablename: apptableName, entityId: entityId, genericResultSet: 'true'}, {}, function (data) {
                    route.reload();
                });
            };

            scope.deleteDocument = function (documentId, index) {
                resourceFactory.LoanDocumentResource.delete({loanId: scope.loandetails.id, documentId: documentId}, '', function (data) {
                    scope.loandocuments.splice(index, 1);
                });
            };

            scope.previewDocument = function (url, fileName) {
                scope.preview =  true;
                scope.fileUrl = scope.hostUrl + url;
                if(fileName.toLowerCase().indexOf('.png') != -1)
                    scope.fileType = 'image/png';
                else if((fileName.toLowerCase().indexOf('.jpg') != -1) || (fileName.toLowerCase().indexOf('.jpeg') != -1))
                    scope.fileType = 'image/jpg';
            };

            scope.downloadDocument = function (documentId) {

            };

            scope.transactionSort = {
                column: 'date',
                descending: true
            };
            scope.changeTransactionSort = function(column) {
                var sort = scope.transactionSort;
                if (sort.column == column) {
                    sort.descending = !sort.descending;
                } else {
                    sort.column = column;
                    sort.descending = true;
                }
            };

            scope.showEdit = function(disbursementDetail){
                if((!disbursementDetail.actualDisbursementDate || disbursementDetail.actualDisbursementDate == null)
                    && scope.status =='Approved'){
                    return true;
                }
                return false;
            };

            scope.showApprovedAmountBasedOnStatus = function () {
                if (scope.status == 'Submitted and pending approval' || scope.status == 'Withdrawn by applicant' || scope.status == 'Rejected') {
                    return false;
                }
                return true;
            };
            scope.showDisbursedAmountBasedOnStatus = function(){
                if(scope.status == 'Submitted and pending approval' ||scope.status == 'Withdrawn by applicant' || scope.status == 'Rejected' ||
                    scope.status == 'Approved'){
                    return false;
                }
                return true;
            };

            scope.checkStatus = function(){
                if(scope.status == 'Active' || scope.status == 'Closed (obligations met)' || scope.status == 'Overpaid' ||
                    scope.status == 'Closed (rescheduled)' || scope.status == 'Closed (written off)'){
                    return true;
                }
                return false;
            };

            scope.showAddDeleteTrancheButtons = function(action){
                scope.return = true;
                if(scope.status == 'Closed (obligations met)' || scope.status == 'Overpaid' ||
                    scope.status == 'Closed (rescheduled)' || scope.status == 'Closed (written off)' ||
                    scope.status =='Submitted and pending approval'){
                    scope.return = false;
                }
                scope.totalDisbursedAmount = 0;
                scope.count = 0;
                for(var i in scope.loandetails.disbursementDetails){
                    if(scope.loandetails.disbursementDetails[i].actualDisbursementDate != null){
                        scope.totalDisbursedAmount += scope.loandetails.disbursementDetails[i].principal;
                    }
                    else{
                        scope.count +=  1;
                    }
                }
                if(scope.totalDisbursedAmount == scope.loandetails.approvedPrincipal || scope.return == false){
                    return false;
                }
                if(scope.count == 0 && action == 'deletedisbursedetails'){
                    return false;
                }

                return true;
            };
        }
    });
    mifosX.ng.application.controller('ViewLoanDetailsController', ['$scope', '$routeParams', 'ResourceFactory','PaginatorService', '$location', '$route', '$http', '$uibModal', 'dateFilter', 'API_VERSION', '$sce', '$rootScope', mifosX.controllers.ViewLoanDetailsController]).run(function ($log) {
        $log.info("ViewLoanDetailsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewLoanTransactionController: function (scope, resourceFactory, location, routeParams, dateFilter, $uibModal, $rootScope) {
            scope.details = [];
            //Get loan rates to be defined in transaction details
            scope.rates = $rootScope.rates;
            //Obtain total rate percentage
            scope.totalRatePercentage = 0;
            if (scope.rates){
              scope.rates.forEach(function (rate) {
                scope.totalRatePercentage += (rate.percentage/100);
              });
            }
            //get Tax from configuration
            scope.tax = 0;
            resourceFactory.configurationResource.get(function (data) {
                for (var i in data.globalConfiguration) {
                    if('vat-tax' === data.globalConfiguration[i].name){
                        scope.tax = (data.globalConfiguration[i].value/100);
                        break;
                    }
                }
              for (var i in data.globalConfiguration) {
                if('sub-rates' === data.globalConfiguration[i].name){
                  scope.ratesEnabled = (data.globalConfiguration[i].value);
                  break;
                }
              }
            });

            resourceFactory.loanTrxnsResource.get({loanId: routeParams.accountId, transactionId: routeParams.id}, function (data) {
                scope.transaction = data;
                scope.transaction.accountId = routeParams.accountId;
                scope.generateDetailTable();
            });

            scope.undo = function (accountId, transactionId) {
                $uibModal.open({
                    templateUrl: 'undotransaction.html',
                    controller: UndoTransactionModel,
                    resolve: {
                        accountId: function () {
                          return accountId;
                        },
                        transactionId: function () {
                          return transactionId;
                        }
                    }
                });
            };
            
            var UndoTransactionModel = function ($scope, $uibModalInstance, accountId, transactionId) {
                $scope.undoTransaction = function () {
                    var params = {loanId: accountId, transactionId: transactionId, command: 'undo'};
                    var formData = {dateFormat: scope.df, locale: scope.optlang.code, transactionAmount: 0};
                    formData.transactionDate = dateFilter(new Date(), scope.df);
                    resourceFactory.loanTrxnsResource.save(params, formData, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/viewloanaccount/' + data.loanId);
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
          scope.generateDetailTable = function () {
            //add principal amount
            var principalDetail = {
              description: 'label.view.principalpaymentdetail',
              containsAmount: true,
              boldTitle: true,
              align: 'left',
              amount: scope.transaction.principalPortion.toFixed(3)
            };
            scope.details.push(principalDetail);
            //Check for interest details

            var rateHeader = {
              description: 'label.view.interestspayment',
              containsAmount: scope.rates? false : true,
              boldTitle: true,
              amount: scope.rates? undefined : scope.transaction.interestPortion.toFixed(3)
            };
            scope.details.push(rateHeader);
            if (scope.ratesEnabled && scope.rates) {
              scope.rates.forEach(function (rate) {
                var rateDetail = {
                  description: rate.name,
                  containsAmount: true,
                  boldTitle: false,
                  amount: (((scope.transaction.interestPortion * (rate.percentage / 100)) / (scope.totalRatePercentage))
                      / (1 + (scope.tax ? scope.tax : 0))).toFixed(3)
                };
                scope.details.push(rateDetail);
                if (scope.tax) {
                  var rateTaxDetail = {
                    description: 'IVA',
                    containsAmount: true,
                    boldTitle: false,
                    amount: (rateDetail.amount * scope.tax).toFixed(3)
                  };
                  scope.details.push(rateTaxDetail);
                }
              });
              //Set total amount for rates
              var totalRateDetail = {
                description: 'label.view.interestspaymentTotal',
                containsAmount: true,
                boldTitle: true,
                isTotal: true,
                align: 'right',
                amount: scope.transaction.interestPortion.toFixed(3)
              };
              scope.details.push(totalRateDetail);
            }
            //Calculate total amount por charges
            scope.availableCharges = {};
            if (scope.transaction.loanChargePaidByList) {
              scope.transaction.loanChargePaidByList.forEach(function (data) {
                var chargePaidBy = {
                  id: data['id'],
                  amount: data['amount'],
                  type: data['name']
                };
                if (scope.availableCharges.hasOwnProperty(chargePaidBy.type)) {
                  scope.availableCharges[chargePaidBy.type] = (scope.availableCharges[chargePaidBy.type]
                      + chargePaidBy.amount);
                } else {
                  scope.availableCharges[chargePaidBy.type] = chargePaidBy.amount;
                }
              });
            }

            //Add charge header
            if (Object.keys(scope.availableCharges).length >= 1) {
              var chargeHeaderDetail = {
                description: 'label.input.charges',
                containsAmount: false,
                boldTitle: true
              };
              scope.details.push(chargeHeaderDetail);
            }

            for (var key in scope.availableCharges) {
              var chargeDetail = {
                description: key,
                containsAmount: true,
                boldTitle: false,
                amount: (scope.availableCharges[key].toFixed(3) / (1
                    + scope.tax ? scope.tax :0)).toFixed(3)
              };
              scope.details.push(chargeDetail);
              if (scope.tax) {
                var chargeTaxDetail = {
                  description: 'IVA',
                  containsAmount: true,
                  boldTitle: false,
                  amount: (chargeDetail.amount * scope.tax).toFixed(3)
                };
                scope.details.push(chargeTaxDetail);
              }
            }

            if (Object.keys(scope.availableCharges).length >= 1) {
              var chargeTotalDetail = {
                description: 'Total',
                containsAmount: true,
                boldTitle: true,
                align: 'right',
                amount: scope.transaction.penaltyChargesPortion.toFixed(3)
              };
              scope.details.push(chargeTotalDetail);
            }
          };
        }
    });
    mifosX.ng.application.controller('ViewLoanTransactionController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', '$uibModal', '$rootScope', mifosX.controllers.ViewLoanTransactionController]).run(function ($log) {
        $log.info("ViewLoanTransactionController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewRescheduleRequestController: function (scope, resourceFactory, routeParams, location, dateFilter) {
            scope.requestId = routeParams.requestId;
            scope.loanId = routeParams.loanId;

            resourceFactory.loanRescheduleResource.get({scheduleId:scope.requestId}, function (data) {
                scope.loanRescheduleDetails = data;
                scope.loanTermVariationsData = data.loanTermVariationsData;
                scope.rescheduleFromDate = new Date(scope.loanRescheduleDetails.rescheduleFromDate);
                scope.rescheduleFromDate = dateFilter(scope.rescheduleFromDate,"dd MMMM yyyy");
                scope.submittedOnDate = new Date(scope.loanRescheduleDetails.timeline.submittedOnDate);
                scope.submittedOnDate = dateFilter(scope.submittedOnDate,"dd MMMM yyyy");
                scope.loanRescheduleDetails.emichange = [];
                for(var i in scope.loanTermVariationsData) {
                    if(scope.loanTermVariationsData[i].termType.value == "dueDate") {
                        scope.loanRescheduleDetails.adjustedDueDate = new Date(scope.loanTermVariationsData[i].dateValue);
                        scope.loanRescheduleDetails.adjustedDueDate = dateFilter(scope.loanTermVariationsData[i].dateValue,"dd MMMM yyyy");
                        scope.changeRepaymentDate = true;
                    }

                    if(scope.loanTermVariationsData[i].termType.value == "graceOnPrincipal") {
                        scope.loanRescheduleDetails.graceOnPrincipal = scope.loanTermVariationsData[i].decimalValue;
                        scope.introduceGracePeriods = true;
                    }

                    if(scope.loanTermVariationsData[i].termType.value == "graceOnInterest") {
                        scope.loanRescheduleDetails.graceOnInterest = scope.loanTermVariationsData[i].decimalValue;
                        scope.introduceGracePeriods = true;
                    }

                    if(scope.loanTermVariationsData[i].termType.value == "extendRepaymentPeriod") {
                        scope.loanRescheduleDetails.extraTerms = scope.loanTermVariationsData[i].decimalValue;
                        scope.extendRepaymentPeriod = true;
                    }

                    if(scope.loanTermVariationsData[i].termType.value == "interestRateForInstallment") {
                        scope.loanRescheduleDetails.interestRate = scope.loanTermVariationsData[i].decimalValue;
                        scope.adjustinterestrates = true;
                    }

                    if(scope.loanTermVariationsData[i].termType.value == "emiAmount") {
                        var emi = {};
                        emi.emi = scope.loanTermVariationsData[i].decimalValue;
                        emi.instDate = dateFilter(scope.loanTermVariationsData[i].dateValue,"dd MMMM yyyy");
                        scope.loanRescheduleDetails.emichange.push(emi);
                        scope.changeEMI = true;
                    }
                }
            });

            scope.reject = function(){
                location.path('/loans/' + scope.loanId + '/rejectreschedulerequest/'+scope.requestId);
            };
            scope.approve = function(){
                location.path('/loans/' + scope.loanId + '/approvereschedulerequest/'+scope.requestId);
            };

            scope.cancel = function () {
                location.path('/loans/' + scope.loanId + '/reschedule/');
            };

            scope.submit = function () {
                location.path('/loans/' + scope.loanId + '/previewloanrepaymentschedule/'+scope.requestId);
            };

        }
    });
    mifosX.ng.application.controller('ViewRescheduleRequestController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.ViewRescheduleRequestController]).run(function ($log) {
        $log.info("ViewRescheduleRequestController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AdHocQuerySearchController: function (scope, routeParams, dateFilter, resourceFactory) {
            scope.formData = {};
            scope.showResults = false;
            scope.showClientResults = false;
            scope.totalPrincipalOutstanding = 0;
            scope.totaldisburementAmount = 0;
            scope.totalPrincipalRepaid = 0;
            scope.totalArrearsAmount = 0;
            scope.totalInterestOutstanding = 0;
            scope.totalInterestRepaid = 0;
            scope.csvData = [];
            var adHocQuery;

            resourceFactory.globalSearchTemplateResource.get(function (data) {
                scope.searchTemplate = data;
                scope.formData.loanfromdate = new Date();
                scope.formData.loantodate = new Date();
                scope.formData.loandatetype = "approvalDate";
                scope.showDateFields = true;
                scope.formData.loans = "loans";
                scope.formData.includeOutStandingAmountPercentage = true;
                scope.formData.outStandingAmountPercentageCondition = 'between';
                scope.formData.includeOutstandingAmount = true;
                scope.formData.outstandingAmountCondition = 'between';
            });

            scope.updatePercentageType = function () {
                if (scope.formData.percentagetype == 'between') {
                    scope.formData.percentage = undefined;
                } else {
                    scope.formData.minpercentage = undefined;
                    scope.formData.maxpercentage = undefined;
                }
            };

            scope.updateOutstandingType = function () {
                if (scope.formData.outstandingType == 'between') {
                    scope.formData.outstandingamt = undefined;
                } else {
                    scope.formData.minoutstandingamt = undefined;
                    scope.formData.maxoutstandingamt = undefined;
                }
            };

            scope.updateLoanDateType = function () {
                if (scope.formData.loandatetype == "approvalDate" || scope.formData.loandatetype == "createdDate" || scope.formData.loandatetype == "disbursalDate") {
                    scope.showDateFields = true;
                } else {
                    scope.showDateFields = false;
                }
            };

            scope.submit = function () {
                adHocQuery = { "locale": scope.optlang.code, "dateFormat": "yyyy-MM-dd"};
                if (scope.formData.loans) {
                    adHocQuery.entities = adHocQuery.entities || [];
                    adHocQuery.entities.push(scope.formData.loans);
                }
                ;
                if (scope.formData.allloans) {
                    adHocQuery.loanStatus = adHocQuery.loanStatus || [];
                    adHocQuery.loanStatus.push(scope.formData.allloans);
                }
                ;
                if (scope.formData.activeloans) {
                    adHocQuery.loanStatus = adHocQuery.loanStatus || [];
                    adHocQuery.loanStatus.push(scope.formData.activeloans);
                }
                ;
                if (scope.formData.overpaidloans) {
                    adHocQuery.loanStatus = adHocQuery.loanStatus || [];
                    adHocQuery.loanStatus.push(scope.formData.overpaidloans);
                }
                ;
                if (scope.formData.arrearloans) {
                    adHocQuery.loanStatus = adHocQuery.loanStatus || [];
                    adHocQuery.loanStatus.push(scope.formData.arrearloans);
                }
                ;
                if (scope.formData.closedloans) {
                    adHocQuery.loanStatus = adHocQuery.loanStatus || [];
                    adHocQuery.loanStatus.push(scope.formData.closedloans);
                }
                ;
                if (scope.formData.writeoffloans) {
                    adHocQuery.loanStatus = adHocQuery.loanStatus || [];
                    adHocQuery.loanStatus.push(scope.formData.writeoffloans);
                }
                ;
                if (scope.formData.loanProducts) {
                    adHocQuery.loanProducts = scope.formData.loanProducts;
                }
                ;
                if (scope.formData.offices) {
                    adHocQuery.offices = scope.formData.offices;
                }
                ;
                if (scope.formData.loandatetype) {
                    adHocQuery.loanDateOption = scope.formData.loandatetype;
                    adHocQuery.loanFromDate = dateFilter(scope.formData.loanfromdate, adHocQuery.dateFormat);
                    adHocQuery.loanToDate = dateFilter(scope.formData.loantodate, adHocQuery.dateFormat);
                }
                ;
                if (scope.formData.includeOutStandingAmountPercentage) {
                    adHocQuery.includeOutStandingAmountPercentage = scope.formData.includeOutStandingAmountPercentage;
                    if (scope.formData.outStandingAmountPercentageCondition) {
                        adHocQuery.outStandingAmountPercentageCondition = scope.formData.outStandingAmountPercentageCondition;
                        if (adHocQuery.outStandingAmountPercentageCondition == 'between') {
                            adHocQuery.minOutStandingAmountPercentage = scope.formData.minOutStandingAmountPercentage;
                            adHocQuery.maxOutStandingAmountPercentage = scope.formData.maxOutStandingAmountPercentage;
                        } else {
                            adHocQuery.outStandingAmountPercentage = scope.formData.outStandingAmountPercentage;
                        }
                        ;
                    }
                    ;
                }
                ;

                if (scope.formData.includeOutstandingAmount) {
                    adHocQuery.includeOutstandingAmount = scope.formData.includeOutstandingAmount;
                    if (scope.formData.outstandingAmountCondition) {
                        adHocQuery.outstandingAmountCondition = scope.formData.outstandingAmountCondition;
                        if (adHocQuery.outstandingAmountCondition == 'between') {
                            adHocQuery.minOutstandingAmount = scope.formData.minOutstandingAmount;
                            adHocQuery.maxOutstandingAmount = scope.formData.maxOutstandingAmount;
                        } else {
                            adHocQuery.outstandingAmount = scope.formData.outstandingAmount;
                        }
                        ;
                    }
                    ;
                }
                ;
                resourceFactory.globalAdHocSearchResource.search(adHocQuery, function (data) {
                    scope.searchResults = data;
                    scope.showResults = true;
                });
            };

            scope.routeTo = function(){
               resourceFactory.globalAdHocSearchResource.getClientDetails(adHocQuery,function (data) {
                    scope.clientResults = data;
                    scope.showResults = false;
                    scope.showClientResults = true;
                    scope.csvData = [];
                    scope.formatteddisbursedDate;
                    scope.formattedmaturedDate;
                    scope.csvData.push({"accountNo":"Client AccountNo","client":"Client","productId":"Loan ProductId","product":"Product","disbursedDate":"Disbursed Date","disbursementAmount":"Disbursement Amount","maturedDate":"Matured Date","principalOutstanding":"Principal Outstanding","principalRepaid":"Principal Repaid","arrearsAmount":"Arrears Amount","interestOutstanding":"Interest Outstanding","interestRepaid":"Interest Repaid"});
                    for(var l=0;l<scope.clientResults.length;l++) {
                      if(scope.clientResults[l].disbursedDate != null){
                          scope.formatteddisbursedDate = scope.clientResults[l].disbursedDate;
                          scope.clientResults[l].disbursedDate = dateFilter(new Date(scope.clientResults[l].disbursedDate), 'dd MMM  yyyy');

                       }
                       if(scope.clientResults[l].maturedDate != null){
                           scope.formattedmaturedDate = scope.clientResults[l].maturedDate;
                           scope.clientResults[l].maturedDate = dateFilter(new Date(scope.clientResults[l].maturedDate), 'dd MMM  yyyy');
                       }

                       if (scope.clientResults[l].principalOutstanding != null && scope.clientResults[l].principalOutstanding != "") {
                           scope.totalPrincipalOutstanding = scope.totalPrincipalOutstanding + scope.clientResults[l].principalOutstanding;
                       }
                       if(scope.clientResults[l].disbursementAmount != null && scope.clientResults[l].disbursementAmount != ""){
                           scope.totaldisburementAmount = scope.totaldisburementAmount + scope.clientResults[l].disbursementAmount;
                       }
                       if(scope.clientResults[l].principalRepaid != null && scope.clientResults[l].principalRepaid != ""){
                           scope.totalPrincipalRepaid = scope.totalPrincipalRepaid +scope.clientResults[l].principalRepaid;

                       }
                       if(scope.clientResults[l].arrearsAmount != null && scope.clientResults[l].arrearsAmount != ""){
                           scope.totalArrearsAmount = scope.totalArrearsAmount + scope.clientResults[l].arrearsAmount;
                       }
                       if(scope.clientResults[l].interestOutstanding != null && scope.clientResults[l].interestOutstanding != ""){
                           scope.totalInterestOutstanding = scope.totalInterestOutstanding + scope.clientResults[l].interestOutstanding;
                       }
                       if(scope.clientResults[l].interestRepaid != null && scope.clientResults[l].interestRepaid != ""){
                           scope.totalInterestRepaid = scope.totalInterestRepaid + scope.clientResults[l].interestRepaid;
                       }
                       scope.csvData.push(scope.clientResults[l]);
                   }
                   scope.csvData.push({"total":"Total","client":"","productId":"","product":"","disbursedDate":"","disbursementAmount":scope.totaldisburementAmount,"maturedDate":"","principalOutstanding":scope.totalPrincipalOutstanding,"principalRepaid":scope.totalPrincipalRepaid,"arrearsAmount":scope.totalArrearsAmount,"interestOutstanding":scope.totalInterestOutstanding,"interestRepaid":scope.totalInterestRepaid});

               });
            };

            scope.cancel = function(){
                scope.showResults = true;
                scope.showClientResults = false;
            }

        }
    });
    mifosX.ng.application.controller('AdHocQuerySearchController', ['$scope', '$routeParams', 'dateFilter', 'ResourceFactory', mifosX.controllers.AdHocQuerySearchController]).run(function ($log) {
        $log.info("AdHocQuerySearchController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ExpertSearchController: function (scope, resourceFactory, location) {
        	scope.dashModel = 'dashboard';
            scope.switch = function() {
	        	location.path('/richdashboard');
			}
            
            scope.searchParams = ['create client', 'clients', 'create group', 'groups', 'centers', 'create center', 'configuration', 'tasks', 'templates', 'system users',
                                  'create template', 'create loan product', 'create saving product', 'roles', 'add role', 'configure maker checker tasks',
                                  'users', 'loan products', 'charges', 'saving products', 'offices', 'create office', 'currency configurations', 'user settings',
                                  'create user', 'employees', 'create employee', 'manage funds', 'offices', 'chart of accounts', 'frequent postings', 'Journal entry',
                                  'search transaction', 'account closure', 'accounting rules', 'add accounting rule', 'data tables', 'create data table', 'add code',
                                  'jobs', 'codes', 'reports', 'create report', 'holidays', 'create holiday', 'create charge', 'product mix', 'add member', 'add product mix',
                                  'bulk loan reassignment', 'audit', 'create accounting closure', 'enter collection sheet', 'navigation', 'accounting', 'organization', 'system'];
            scope.search = function () {
		      switch (this.formData.search) {
		          case 'create client':
		              location.path('/createclient');
		              break;
		          case 'clients':
		              location.path('/clients');
		              break;
		          case 'create group':
		              location.path('/creategroup');
		              break;
		          case 'groups':
		              location.path('/groups');
		              break;
		          case 'create center':
		              location.path('/createcenter');
		              break;
		          case 'centers':
		              location.path('/centers');
		              break;
		          case 'configuration':
		              location.path('/global');
		              break;
		          case 'tasks':
		              location.path('/tasks');
		              break;
		          case 'templates':
		              location.path('/templates');
		              break;
		          case 'create template':
		              location.path('/createtemplate');
		              break;
		          case 'create loan product':
		              location.path('/createloanproduct');
		              break;
		          case 'create saving product':
		              location.path('/createsavingproduct');
		              break;
		          case 'roles':
		              location.path('/admin/roles');
		              break;
		          case 'add role':
		              location.path('/admin/addrole');
		              break;
		          case 'configure maker checker tasks':
		              location.path('/admin/viewmctasks');
		              break;
		          case 'loan products':
		              location.path('/loanproducts');
		              break;
		          case 'charges':
		              location.path('/charges');
		              break;
		          case 'saving products':
		              location.path('/savingproducts');
		              break;
		          case 'offices':
		              location.path('/offices');
		              break;
		          case 'create office':
		              location.path('/createoffice');
		              break;
		          case 'currency configurations':
		              location.path('/currconfig');
		              break;
		          case 'user settings':
		              location.path('/usersetting');
		              break;
		          case 'employees':
		              location.path('/employees');
		              break;
		          case 'create employee':
		              location.path('/createemployee');
		              break;
		          case 'manage funds':
		              location.path('/managefunds');
		              break;
		          case 'chart of accounts':
		              location.path('/accounting_coa');
		              break;
		          case 'frequent postings':
		              location.path('/freqposting');
		              break;
		          case 'journal entry':
		              location.path('/journalentry');
		              break;
		          case 'search transaction':
		              location.path('/searchtransaction');
		              break;
		          case 'account closure':
		              location.path('/accounts_closure');
		              break;
		          case 'accounting rules':
		              location.path('/accounting_rules');
		              break;
		          case 'add accounting rule':
		              location.path('/add_accrule');
		              break;
		          case 'data tables':
		              location.path('/datatables');
		              break;
		          case 'create data table':
		              location.path('/createdatatable');
		              break;
		          case 'add code':
		              location.path('/addcode');
		              break;
		          case 'jobs':
		              location.path('/jobs');
		              break;
		          case 'codes':
		              location.path('/codes');
		              break;
		          case 'reports':
		              location.path('/reports');
		              break;
		          case 'create report':
		              location.path('/createreport');
		              break;
		          case 'holidays':
		              location.path('/holidays');
		              break;
		          case 'create holiday':
		              location.path('/createholiday');
		              break;
		          case 'add member':
		              location.path('/addmember');
		              break;
		          case 'create charge':
		              location.path('/createcharge');
		              break;
		          case 'enter collection sheet':
		              location.path('/entercollectionsheet');
		              break;
		          case 'product mix':
		              location.path('/productmix');
		              break;
		          case 'add product mix':
		              location.path('/addproductmix');
		              break;
		          case 'bulk loan reassignment':
		              location.path('/bulkloan');
		              break;
		          case 'audit':
		              location.path('/audit');
		              break;
		          case 'create accounting closure':
		              location.path('/createclosure');
		              break;
		          case 'navigation':
		              location.path('/nav/offices');
		              break;
		          case 'accounting':
		              location.path('/accounting');
		              break;
		          case 'organization':
		              location.path('/organization');
		              break;
		          case 'system':
		              location.path('/system');
		              break;
		          case 'system users':
		              location.path('/admin/users');
		              break;
		          default:
		              location.path('/home');
		      }
            }

        }

    });
    mifosX.ng.application.controller('ExpertSearchController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.ExpertSearchController]).run(function ($log) {
        $log.info("ExpertSearchController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        LoginFormController: function (scope, authenticationService, resourceFactory, httpService, $timeout) {
            scope.loginCredentials = {};
            scope.passwordDetails = {};
            scope.authenticationFailed = false;
            scope.load = false;

            scope.twoFactorRequired = false;
            scope.twoFactorDeliveryMethods = {};
            scope.selectedDeliveryMethodName = null;
            scope.otpRequestData = {};
            scope.otpToken = null;
            scope.selectedDeliveryMethodName = null;
            scope.twofactorRememberMe = false;

            scope.login = function () {
                scope.authenticationFailed = false;
                scope.load = true;
                authenticationService.authenticateWithUsernamePassword(scope.loginCredentials);
               // delete scope.loginCredentials.password;
            };

            scope.$on("UserAuthenticationFailureEvent", function (event, data, status) {
                delete scope.loginCredentials.password;
                scope.authenticationFailed = true;
                if(status != 401) {
                    scope.authenticationErrorMessage = 'error.connection.failed';
                    scope.load = false;
                } else {
                   scope.authenticationErrorMessage = 'error.login.failed';
                   scope.load = false;
                }
            });

            scope.$on("UserAuthenticationSuccessEvent", function (event, data) {
                scope.load = false;
                scope.authenticationFailed = false;
                scope.twoFactorRequired = false;
                scope.otpRequested = false;
                timer = $timeout(function(){
                    delete scope.loginCredentials.password;
                },2000);

                delete scope.otpToken;
                scope.otpTokenError = false;
                scope.twofactorRememberMe = false;
             });

            scope.$on("UserAuthenticationTwoFactorRequired", function (event, data) {
                scope.load = false;
                scope.twoFactorRequired = true;
                resourceFactory.twoFactorResource.getDeliveryMethods(function (data) {
                    scope.twoFactorDeliveryMethods = data;
                });
            });

            /*This logic is no longer required as enter button is binded with text field for submit.
            $('#pwd').keypress(function (e) {
                if (e.which == 13) {
                    scope.login();
                }
            });*/

            /*$('#repeatPassword').keypress(function (e) {
                if (e.which == 13) {
                    scope.updatePassword();
                }
            });*/

            scope.updatePassword = function (){
                resourceFactory.userListResource.update({'userId': scope.loggedInUserId}, scope.passwordDetails, function (data) {
                    //clear the old authorization token
                    httpService.cancelAuthorization();
                    scope.authenticationFailed = false;
                    scope.loginCredentials.password = scope.passwordDetails.password;
                    authenticationService.authenticateWithUsernamePassword(scope.loginCredentials);
                });
            };

            // Move to auth service probably
            scope.requestOTP = function () {
                if(scope.selectedDeliveryMethodName != null) {
                    scope.load = true;
                    resourceFactory.twoFactorResource.requestOTP({deliveryMethod: scope.selectedDeliveryMethodName, extendedToken: scope.twofactorRememberMe}, function (data) {
                        scope.load = false;
                        if(data.deliveryMethod !== null) {
                            scope.otpRequestData.deliveryMethod = data.deliveryMethod;
                            scope.otpRequestData.expireDate = new Date(data.reqestTime + data.tokenLiveTimeInSec * 1000);
                            scope.otpRequested = true;
                        }
                    });
                    scope.selectedDeliveryMethodName = null;
                }
            };

            scope.validateOTP = function () {
                if(scope.otpToken !== null) {
                    scope.load = true;
                    authenticationService.validateOTP(scope.otpToken, scope.twofactorRememberMe);
                }
            };

            scope.$on("TwoFactorAuthenticationFailureEvent", function (event, data, status) {
                scope.load = false;
                scope.otpToken = null;
                if(status == 403) {
                    scope.otpErrorMessage = 'error.otp.validate.invalid';
                } else {
                    scope.otpErrorMessage = 'error.otp.validate.other';
                }
                scope.otpTokenError = true;
            });


        }
    });
    mifosX.ng.application.controller('LoginFormController', ['$scope', 'AuthenticationService', 'ResourceFactory', 'HttpService','$timeout', mifosX.controllers.LoginFormController]).run(function ($log) {
        $log.info("LoginFormController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        MainController: function (scope, location, sessionManager, translate, $rootScope, localStorageService, keyboardManager, $idle, tmhDynamicLocale,
                  uiConfigService, $http) {
            $http.get('release.json').then(function onSuccess(response) {
                var data = response.data;
                scope.version = data.version;
                scope.releasedate = data.releasedate;
            });

            scope.islogofoldernamefetched = false;
            scope.islogofoldernameconfig = false;
            scope.isFaviconPath = false;
            scope.isHeaderLogoPath = false;
            scope.isBigLogoPath = false;
            scope.isLargeLogoPath = false;

            if(!scope.islogofoldernamefetched && $rootScope.tenantIdentifier && $rootScope.tenantIdentifier != "default"){
                scope.islogofoldernamefetched = true;
                $http.get('scripts/config/LogoConfig.json').then(function onSuccess(response) {
                    var datas = response.data;
                    for(var i in datas){
                        var data = datas[i];
                        if(data.tenantIdentifier != undefined && data.tenantIdentifier == $rootScope.tenantIdentifier){
                            if(data.logofoldername != undefined && data.logofoldername != ""){
                                scope.islogofoldernameconfig = true;
                                scope.logofoldername = data.logofoldername;
                                if(data.faviconPath){
                                    scope.isFaviconPath = true;
                                    scope.faviconPath = data.faviconPath;
                                }
                                if(data.bigLogoPath){
                                    scope.isBigLogoPath = true;
                                    scope.bigLogoPath = data.bigLogoPath;
                                }
                                if(data.headerLogoPath){
                                    scope.isHeaderLogoPath = true;
                                    scope.headerLogoPath = data.headerLogoPath;
                                }
                                if(data.largeLogoPath){
                                    scope.isLargeLogoPath = true;
                                    scope.largeLogoPath = data.largeLogoPath;
                                }
                            }
                        }
                    }
                }).catch(function onError(response) {
                    console.warn("Error: ", response.data)
                });
            }
            
            scope.$on('scrollbar.show', function(){
                  console.log('Scrollbar show');
                });
            scope.$on('scrollbar.hide', function(){
                  console.log('Scrollbar hide');
                });

            uiConfigService.init(scope);
            
            
            scope.$on('configJsonObj',function(e,response){
                scope.response = response;
            });
            //hides loader
            scope.domReady = true;
            scope.activity = {};
            scope.activityQueue = [];
            if (localStorageService.getFromLocalStorage('Location')) {
                scope.activityQueue = localStorageService.getFromLocalStorage('Location');
            }
            scope.loadSC = function () {
                if (!localStorageService.getFromLocalStorage('searchCriteria'))
                    localStorageService.addToLocalStorage('searchCriteria', {})
                scope.searchCriteria = localStorageService.getFromLocalStorage('searchCriteria');
            };
            scope.saveSC = function () {
                localStorageService.addToLocalStorage('searchCriteria', scope.searchCriteria);
            };
            scope.loadSC();
            scope.setDf = function () {
                if (localStorageService.getFromLocalStorage('dateformat')) {
                    scope.dateformat = localStorageService.getFromLocalStorage('dateformat');
                } else {
                    localStorageService.addToLocalStorage('dateformat', 'dd MMMM yyyy');
                    scope.dateformat = 'dd MMMM yyyy';
                }
                scope.df = scope.dateformat;
                scope.dft = scope.dateformat + ' ' + 'HH:mm:ss'
            };

            scope.updateDf = function(dateFormat){
                localStorageService.addToLocalStorage('dateformat', dateFormat);
                scope.dateformat = dateFormat;
                scope.setDf();
            };
            scope.setDf();
            $rootScope.setPermissions = function (permissions) {
                $rootScope.permissionList = permissions;
                localStorageService.addToLocalStorage('userPermissions', permissions);
                $rootScope.$broadcast('permissionsChanged')
            };

            $rootScope.hasPermission = function (permission) {
                permission = permission.trim();
                //FYI: getting all permissions from localstorage, because if scope changes permissions array will become undefined
                $rootScope.permissionList = localStorageService.getFromLocalStorage('userPermissions');
                //If user is a Super user return true
                if ($rootScope.permissionList && _.contains($rootScope.permissionList, "ALL_FUNCTIONS")) {
                    return true;
                } else if ($rootScope.permissionList && permission && permission != "") {
                    //If user have all read permission return true
                    if (permission.substring(0, 5) == "READ_" && _.contains($rootScope.permissionList, "ALL_FUNCTIONS_READ")) {
                        return true;
                    } else if (_.contains($rootScope.permissionList, permission)) {
                        //check for the permission if user doesn't have any special permissions
                        return true;
                    } else {
                        //return false if user doesn't have permission
                        return false;
                    }
                } else {
                    //return false if no value assigned to has-permission directive
                    return false;
                }
                ;
            };

            scope.$watch(function () {
                return location.path();
            }, function () {
                scope.activity = location.path();
                scope.activityQueue.push(scope.activity);
                localStorageService.addToLocalStorage('Location', scope.activityQueue);
            });

            //Logout the user if Idle
            scope.started = false;
            scope.$on('$idleTimeout', function () {
                scope.logout();
                $idle.unwatch();
                scope.started = false;
            });

            // Log out the user when the window/tab is closed.
            window.onunload = function () {
                scope.logout();
                $idle.unwatch();
                scope.started = false;
            };

            scope.start = function (session) {
                if (session) {
                    $idle.watch();
                    scope.started = true;
                }
            };

            scope.leftnav = false;
            scope.$on("UserAuthenticationTwoFactorRequired", function (event, data) {
                if (sessionManager.get(data)) {
                    scope.start(scope.currentSession);
                }
            });

            scope.$on("UserAuthenticationSuccessEvent", function (event, data) {
                scope.authenticationFailed = false;
                scope.resetPassword = data.shouldRenewPassword;
                if (sessionManager.get(data)) {
                    scope.currentSession = sessionManager.get(data);
                    scope.start(scope.currentSession);
                    if (scope.currentSession.user && scope.currentSession.user.userPermissions) {
                        $rootScope.setPermissions(scope.currentSession.user.userPermissions);
                    }
                    location.path('/home').replace();
                } else {
                    scope.loggedInUserId = data.userId;
                }
                ;
            });

            var setSearchScopes = function () {
                var all = {name: "label.search.scope.all", value: "clients,clientIdentifiers,groups,savings,shares,loans"};
                var clients = {
                    name: "label.search.scope.clients.and.clientIdentifiers",
                    value: "clients,clientIdentifiers"
                };
                var groups = {
                    name: "label.search.scope.groups.and.centers",
                    value: "groups"
                };
                var savings = {name: "label.input.adhoc.search.loans", value: "loans"};
                var shares = {name: "label.search.scope.shares", value: "shares"};
                var loans = {name: "label.search.scope.savings", value: "savings"};
                scope.searchScopes = [all,clients,groups,loans,savings,shares];
                scope.currentScope = all;
            }

            setSearchScopes();

            scope.changeScope = function (searchScope) {
                scope.currentScope = searchScope ;
            }

            scope.search = function () {
                var resource;
                var searchString=scope.search.query;
                var exactMatch=false;
                if(searchString != null){
                    searchString = searchString.replace(/(^"|"$)/g, '');
                    var n = searchString.localeCompare(scope.search.query);
                    if(n!=0)
                    {
                        exactMatch=true;
                    }
                }
                location.path('/search/' + searchString).search({exactMatch: exactMatch, resource: scope.currentScope.value});

            };
            scope.text = '<span>Mifos X is designed by the <a href="http://www.openmf.org/">Mifos Initiative</a>.' +
            '<a href="http://mifos.org/resources/community/"> A global community </a> that aims to speed the elimination of poverty by enabling Organizations to more effectively and efficiently deliver responsible financial services to the world’s poor and unbanked </span><br/>' +
            '<span>Sounds interesting?<a href="http://mifos.org/take-action/volunteer/"> Get involved!</a></span>';

            scope.logout = function () {
                $rootScope.$broadcast("OnUserPreLogout");
                scope.currentSession = sessionManager.clear();
                scope.resetPassword = false;
                location.path('/').replace();
            };

            scope.langs = mifosX.models.Langs;
            if (localStorageService.getFromLocalStorage('Language')) {
                var temp = localStorageService.getFromLocalStorage('Language');
                for (var i in mifosX.models.Langs) {
                    if (mifosX.models.Langs[i].code == temp.code) {
                        scope.optlang = mifosX.models.Langs[i];
                        tmhDynamicLocale.set(mifosX.models.Langs[i].code);
                        }
                }
            } else {
                scope.optlang = scope.langs[0];
                tmhDynamicLocale.set(scope.langs[0].code);
                }
            translate.use(scope.optlang.code);

            scope.isActive = function (route) {
                if (route == 'clients') {
                    var temp = ['/clients', '/groups', '/centers'];
                    for (var i in temp) {
                        if (temp[i] == location.path()) {
                            return true;
                        }
                    }
                }
                else if (route == 'acc') {
                    var temp1 = ['/accounting', '/freqposting', '/accounting_coa', '/journalentry', '/accounts_closure', '/Searchtransaction', '/accounting_rules'];
                    for (var i in temp1) {
                        if (temp1[i] == location.path()) {
                            return true;
                        }
                    }
                }
                else if (route == 'rep') {
                    var temp2 = ['/reports/all', '/reports/clients', '/reports/loans', '/reports/funds', '/reports/accounting', 'reports/savings'];
                    for (var i in temp2) {
                        if (temp2[i] == location.path()) {
                            return true;
                        }
                    }
                }
                else if (route == 'admin') {
                    var temp3 = ['/users/', '/organization', '/system', '/products', '/global'];
                    for (var i in temp3) {
                        if (temp3[i] == location.path()) {
                            return true;
                        }
                    }
                }
                else {
                    var active = route === location.path();
                    return active;
                }
            };

            keyboardManager.bind('ctrl+shift+n', function () {
                location.path('/nav/offices');
            });
            keyboardManager.bind('ctrl+shift+i', function () {
                location.path('/tasks');
            });
            keyboardManager.bind('ctrl+shift+o', function () {
                location.path('/entercollectionsheet');
            });
            keyboardManager.bind('ctrl+shift+c', function () {
                location.path('/createclient');
            });
            keyboardManager.bind('ctrl+shift+g', function () {
                location.path('/creategroup');
            });
            keyboardManager.bind('ctrl+shift+q', function () {
                location.path('/createcenter');
            });
            keyboardManager.bind('ctrl+shift+f', function () {
                location.path('/freqposting');
            });
            keyboardManager.bind('ctrl+shift+e', function () {
                location.path('/accounts_closure');
            });
            keyboardManager.bind('ctrl+shift+j', function () {
                location.path('/journalentry');
            });
            keyboardManager.bind('ctrl+shift+a', function () {
                location.path('/accounting');
            });
            keyboardManager.bind('ctrl+shift+r', function () {
                location.path('/reports/all');
            });
            keyboardManager.bind('ctrl+s', function () {
                document.getElementById('save').click();
            });
            keyboardManager.bind('ctrl+r', function () {
                document.getElementById('run').click();
            });
            keyboardManager.bind('ctrl+shift+x', function () {
                document.getElementById('cancel').click();
            });
            keyboardManager.bind('ctrl+shift+l', function () {
                document.getElementById('logout').click();
            });
            keyboardManager.bind('alt+x', function () {
                document.getElementById('search').focus();
            });
            keyboardManager.bind('ctrl+shift+h', function () {
                document.getElementById('help').click();
            });
            keyboardManager.bind('ctrl+n', function () {
                document.getElementById('next').click();
            });
            keyboardManager.bind('ctrl+p', function () {
                document.getElementById('prev').click();
            });
            scope.changeLang = function (lang, $event) {
                translate.use(lang.code);
                localStorageService.addToLocalStorage('Language', lang);
                tmhDynamicLocale.set(lang.code);
                scope.optlang = lang;
                };
            scope.helpf = function()
            {
                // first, create addresses array
            var addresses = ["https://mifosforge.jira.com/wiki/display/docs/User+Setup","https://mifosforge.jira.com/wiki/display/docs/Organization",
                "https://mifosforge.jira.com/wiki/display/docs/System", "https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=products&startIndex=0&where=docs",
                "https://mifosforge.jira.com/wiki/pages/viewpage.action?pageId=67141762","https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=report&startIndex=0&where=docs",
                "https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=accounting&startIndex=0&where=docs",  "https://mifosforge.jira.com/wiki/display/docs/Manage+Clients",
                "https://mifosforge.jira.com/wiki/display/docs/Manage+Groups","https://mifosforge.jira.com/wiki/display/docs/Manage+Centers",
                "https://mifosforge.jira.com/wiki/display/docs/User+Manual","https://mifosforge.jira.com/wiki/display/docs/Manage+Offices",
                "https://mifosforge.jira.com/wiki/display/docs/Manage+Holidays","https://mifosforge.jira.com/wiki/display/docs/Manage+Employees",
                "https://mifosforge.jira.com/wiki/display/docs/Manage+Funds","https://mifosforge.jira.com/wiki/display/docs/Bulk+Loan+Reassignment",
                "https://mifosforge.jira.com/wiki/display/docs/Currency+Configuration","https://mifosforge.jira.com/wiki/display/docs/Standing+Instructions+History",
                "https://mifosforge.jira.com/wiki/display/docs/Manage+Data+Tables","https://mifosforge.jira.com/wiki/pages/viewpage.action?pageId=67895350",
                "https://mifosforge.jira.com/wiki/display/docs/Manage+Roles+and+Permissions","https://mifosforge.jira.com/wiki/display/docs/Maker-Checker",
                "https://mifosforge.jira.com/wiki/display/docs/Manage+Hooks","https://mifosforge.jira.com/wiki/display/docs/Audit+Trails",
                "https://mifosforge.jira.com/wiki/display/docs/Manage+Reports","https://mifosforge.jira.com/wiki/display/docs/Manage+Scheduler+Jobs",
                "https://mifosforge.jira.com/wiki/display/docs/Global+Configuration","https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=account%20number%20preferences&startIndex=0&where=docs",
                "https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=loan%20products&startIndex=0&where=docs","https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=saving%20products&startIndex=0&where=docs",
                "https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=charges&startIndex=0&where=docs","https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=products%20mix&startIndex=0&where=docs",
                "https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=fixed%20deposit%20products&startIndex=0&where=docs","https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=recurring%20deposit%20products&startIndex=0&where=docs",
                "https://mifosforge.jira.com/wiki/pages/viewpage.action?pageId=67895308","https://mifosforge.jira.com/wiki/display/docs/Add+Journal+Entries",
                "https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=search%20journal%20entries&startIndex=0&where=docs",  "https://mifosforge.jira.com/wiki/dosearchsite.action?queryString=accounts%20linked&startIndex=0&where=docs",
                "https://mifosforge.jira.com/wiki/display/docs/Chart+of+Accounts+and+General+Ledger+Setup", "https://mifosforge.jira.com/wiki/display/docs/Closing+Entries",
                "https://mifosforge.jira.com/wiki/pages/viewpage.action?pageId=67895308","https://mifosforge.jira.com/wiki/display/docs/Accruals"];
            // array is huge, but working good
            // create second array with address models
            var addrmodels = ['/users/','/organization','/system','/products','/templates', '', '/accounting',
                                '/clients', '/groups','/centers','','/offices', '/holidays','/employees','/managefunds/',
                                '/bulkloan','/currconfig','/standinginstructions/history','/datatables','/codes','/admin/roles',
                                '/admin/viewmctasks','/hooks','/audit', '/reports','/jobs','/global','/accountnumberpreferences','/loanproducts',
                                '/savingproducts','/charges','/productmix', '/fixeddepositproducts','/recurringdepositproducts','/freqposting',
                                '/journalentry','/searchtransaction','/financialactivityaccountmappings','/accounting_coa', '/accounts_closure','/accounting_rules','/run_periodic_accrual'];
            // * text-based address-recognize system *
            var actualadr = location.absUrl();  // get full URL
            var lastchar = 0;
            for( var i = 0; i<actualadr.length;i++)
                {

                    if(actualadr.charAt(i) == '#')
                    {
                        lastchar = i+1;
                        break;
                        // found '#' and save position of it
                    }
                }//for

            var whereweare = actualadr.substring(lastchar); // cut full URL to after-'#' part

            // string after '#' is compared with model
            var addrfound = false;
            if(whereweare == '/reports/all' || whereweare == '/reports/clients' || whereweare == '/reports/loans' || whereweare == '/reports/savings' || whereweare == '/reports/funds' || whereweare == '/reports/accounting' || whereweare == '/xbrl'  )
                     {
                        window.open(addresses[5]);
                        addrfound = true;
                     }// '/reports/...' are exception -> link to Search in Documentation word 'report'
                     else{
                            for(var i = 0; i< addrmodels.length; i++)
                            {
                                if(i != 5 && i != 10)
                                    {
                                        if(whereweare == addrmodels[i])
                                        {
                                                addrfound = true;
                                                window.open(addresses[i]);
                                                break;
                                                // model found -> open address and break
                                        }
                                    }
                            }//for
                          }//else
                if(addrfound == false) window.open(addresses[10]); // substring not matching to any model -> open start user manual page

            };//helpf

            sessionManager.restore(function (session) {
                scope.currentSession = session;
                scope.start(scope.currentSession);
                if (session.user != null && session.user.userPermissions) {
                    $rootScope.setPermissions(session.user.userPermissions);
                    localStorageService.addToLocalStorage('userPermissions', session.user.userPermissions);
                }
                ;
            });
        }
    });
    mifosX.ng.application.controller('MainController', [
        '$scope',
        '$location',
        'SessionManager',
        '$translate',
        '$rootScope',
        'localStorageService',
        'keyboardManager', '$idle',
        'tmhDynamicLocale',
        'UIConfigService',
        '$http',
        mifosX.controllers.MainController
    ]).run(function ($log) {
        $log.info("MainController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        NavigationController: function (scope, resourceFactory) {

            scope.offices = [];
            scope.isCollapsed = false;
            scope.officerCollapsed = true;
            scope.groupCollapsed = true;
            scope.centerCollapsed = true;
            scope.clientCollapsed = true;
            resourceFactory.officeResource.get({officeId: 0}, function (data) {
                scope.office = data;
                scope.officeName = data.name;
            });
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });

            scope.collapseOthers = function () {
                scope.filterText = '';
                scope.isCollapsed = !scope.isCollapsed;
                if (scope.isCollapsed == false) {
                    scope.officerCollapsed = true;
                    scope.groupCollapsed = true;
                    scope.centerCollapsed = true;
                    scope.clientCollapsed = true;
                }
            };
            scope.collapseOfficerOthers = function () {
                scope.filterText = '';
                scope.officerCollapsed = !scope.officerCollapsed;
                if (scope.officerCollapsed == false) {
                    scope.isCollapsed = true;
                    scope.groupCollapsed = true;
                    scope.centerCollapsed = true;
                    scope.clientCollapsed = true;
                }
            };
            scope.collapseCenterOthers = function () {
                scope.filterText = '';
                scope.centerCollapsed = !scope.centerCollapsed;
                if (scope.centerCollapsed == false) {
                    scope.isCollapsed = true;
                    scope.groupCollapsed = true;
                    scope.officerCollapsed = true;
                    scope.clientCollapsed = true;
                }
            };
            scope.collapseGroupOthers = function () {
                scope.filterText = '';
                scope.groupCollapsed = !scope.groupCollapsed;
                if (scope.groupCollapsed == false) {
                    scope.isCollapsed = true;
                    scope.centerCollapsed = true;
                    scope.officerCollapsed = true;
                    scope.clientCollapsed = true;
                }
            };
            scope.collapseClientOthers = function () {
                scope.filterText = '';
                scope.clientCollapsed = !scope.clientCollapsed;
                if (scope.clientCollapsed == false) {
                    scope.isCollapsed = true;
                    scope.groupCollapsed = true;
                    scope.officerCollapsed = true;
                    scope.centerCollapsed = true;
                }
            };

            scope.officeSelected = function (officeId, office) {
                scope.officeName = office;
                scope.selectedOffice = officeId;
                scope.filterText = '';
                scope.staffs = '';
                scope.staff = '';
                scope.group = '';
                scope.center = '';
                scope.client = '';
                scope.centers = '';
                scope.clients = '';
                scope.groups = '';
                scope.groupsOrCenters = '';
                scope.isCollapsed = true;
                scope.officerCollapsed = false;
                scope.centerCollapsed = true;
                scope.clientCollapsed = true;
                scope.groupCollapsed = true;
                scope.loanOfficer = '';
                scope.centerName = '';
                scope.groupName = '';
                scope.clientName = '';
                if (scope.staff == '' && scope.group == '' && scope.center == '' && scope.client == '') {
                    resourceFactory.officeResource.get({officeId: officeId}, function (data) {
                        scope.office = data;
                    });
                    resourceFactory.employeeResource.getAllEmployees({'officeId': officeId}, function (data) {
                        scope.staffs = data;
                    });
                }
            };

            scope.staffSelected = function (staffId, staffName) {
                scope.office = '';
                scope.group = '';
                scope.client = '';
                scope.filterText = '';
                scope.center = '';
                scope.centerName = '';
                scope.groupName = '';
                scope.clientName = '';
                scope.isCollapsed = true;
                scope.officerCollapsed = true;
                scope.centerCollapsed = false;
                scope.clientCollapsed = true;
                scope.groupCollapsed = true;
                scope.clients = '';
                scope.groups = '';
                if (scope.office == '' && scope.group == '' && scope.center == '' && scope.client == '') {
                    resourceFactory.employeeResource.get({staffId: staffId}, function (data) {
                        scope.staff = data;
                    });
                    scope.loanOfficer = staffName;
                    scope.selectedStaff = staffId;
                    resourceFactory.runReportsResource.get({reportSource: 'GroupNamesByStaff', 'R_staffId': staffId, genericResultSet: 'false'}, function (data) {
                        scope.centers = data;
                    });
                }
            };
            scope.centerSelected = function (centerId, centerName) {
                scope.office = '';
                scope.staff = '';
                scope.client = '';
                scope.group = '';
                scope.filterText = '';
                scope.groupName = '';
                scope.clientName = '';
                scope.clients = '';
                scope.centerName = centerName;
                scope.isCollapsed = true;
                scope.officerCollapsed = true;
                scope.centerCollapsed = true;
                scope.clientCollapsed = true;
                scope.groupCollapsed = false;
                if (scope.office == '' && scope.group == '' && scope.staff == '' && scope.client == '') {
                    resourceFactory.centerResource.get({centerId: centerId, associations: 'groupMembers'}, function (data) {
                        scope.groups = data.groupMembers;
                        scope.center = data;
                    });
                    resourceFactory.centerAccountResource.get({centerId: centerId}, function (data) {
                        scope.centerAccounts = data;
                    });
                    resourceFactory.runReportsResource.get({reportSource: 'GroupSummaryCounts', genericResultSet: 'false', R_groupId: centerId}, function (data) {
                        scope.summary = data[0];
                    });
                }
            };
            scope.groupSelected = function (groupId, groupName) {
                scope.office = '';
                scope.filterText = '';
                scope.staff = '';
                scope.center = '';
                scope.client = '';
                scope.clientName = '';
                scope.groupName = groupName;
                scope.isCollapsed = true;
                scope.officerCollapsed = true;
                scope.centerCollapsed = true;
                scope.clientCollapsed = false;
                scope.groupCollapsed = true;
                if (scope.office == '' && scope.center == '' && scope.staff == '' && scope.client == '') {
                    resourceFactory.groupResource.get({groupId: groupId, associations: 'all'}, function (data) {
                        scope.group = data;
                        scope.clients = data.clientMembers;
                    });
                    resourceFactory.groupAccountResource.get({groupId: groupId}, function (data) {
                        scope.groupAccounts = data;
                    });
                }
            };
            scope.clientSelected = function (clientId, clientName) {
                scope.office = '';
                scope.filterText = '';
                scope.staff = '';
                scope.center = '';
                scope.group = '';
                scope.clientName = clientName;
                scope.isCollapsed = true;
                scope.officerCollapsed = true;
                scope.centerCollapsed = true;
                scope.clientCollapsed = false;
                scope.groupCollapsed = true;
                if (scope.office == '' && scope.center == '' && scope.staff == '' && scope.group == '') {
                    resourceFactory.clientResource.get({clientId: clientId}, function (data) {
                        scope.client = data;
                    });
                    resourceFactory.clientAccountResource.get({clientId: clientId}, function (data) {
                        scope.clientAccounts = data;
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('NavigationController', ['$scope', 'ResourceFactory', mifosX.controllers.NavigationController]).run(function ($log) {
        $log.info("NavigationController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ProfileController: function (scope, localStorageService, resourceFactory, $uibModal) {
            scope.userDetails = localStorageService.getFromLocalStorage('userData');
            resourceFactory.userListResource.get({userId: scope.userDetails.userId}, function (data) {
                scope.user = data;
            });
            scope.status = 'Not Authenticated';
            if (scope.userDetails.authenticated == true) {
                scope.status = 'Authenticated';
            }
            scope.updatePassword = function () {
                $uibModal.open({
                    templateUrl: 'password.html',
                    controller: UpdatePasswordCtrl,
                    resolve: {
                        userId: function () {
                            return scope.userDetails.userId;
                        }
                    }
                });
            };
            var UpdatePasswordCtrl = function ($scope, $uibModalInstance, userId) {
                $scope.save = function () {
                    resourceFactory.userListResource.update({'userId': userId}, this.formData, function (data) {
                        $uibModalInstance.close('modal');
                        if (data.resourceId == userId) {
                            scope.logout();
                        };
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ProfileController', ['$scope', 'localStorageService', 'ResourceFactory', '$uibModal', mifosX.controllers.ProfileController]).run(function ($log) {
        $log.info("ProfileController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        RichDashboard: function (scope, resourceFactory, localStorageService, $rootScope, location) {

        	scope.recent = [];
            scope.recent = localStorageService.getFromLocalStorage('Location');
            scope.recentEight = [];
            scope.frequent = [];
            scope.recentArray = [];
            scope.uniqueArray = [];
            scope.searchParams = [];
            scope.recents = [];
            scope.dashModel = 'rich-dashboard';

            scope.officeIdDisbursed = 1;
            scope.officeId = 1;
            scope.officeIdCollection = 1;

            scope.switch = function() {
	        	location.path('/richdashboard');
			}

            scope.$on("UserAuthenticationSuccessEvent", function (event, data) {
	            if (sessionManager.get(data)) {
	                scope.currentSession = sessionManager.get(data);
	            }
            });

            //to retrieve last 8 recent activities
            for (var rev = scope.recent.length - 1; rev > 0; rev--) {
                scope.recentArray.push(scope.recent[rev]);
            }
            scope.unique = function (array) {
                array.forEach(function (value) {
                    if (scope.uniqueArray.indexOf(value) === -1) {
                    	if (value) {
                            if (value != '/' && value != '/home' && value != '/richdashboard') {
                            	scope.uniqueArray.push(value);
                            }
                    	}
                    }
                });
            }
            scope.unique(scope.recentArray);
            //recent activities retrieved

            //retrieve last 8 recent activities
            for (var l = 0; l < 8; l++) {
                scope.recents.push(scope.uniqueArray[l]);
            }
            // 8 recent activities retrieved

            //count duplicates
            var i = scope.recent.length;
            var obj = {};
            while (i) {
                obj[scope.recent[--i]] = (obj[scope.recent[i]] || 0) + 1;
            }
            //count ends here

            //to sort based on counts
            var sortable = [];
            for (var i in obj) {
                sortable.push([i, obj[i]]);
            }
            sortable.sort(function (a, b) {
                return a[1] - b[1]
            });
            //sort end here

            //to retrieve the locations from sorted array
            var sortedArray = [];
            for (var key in sortable) {
                sortedArray.push(sortable[key][0]);
            }
            //retrieving ends here

            //retrieve last 8 frequent actions
            for (var freq = sortedArray.length - 1; freq > sortedArray.length - 11; freq--) {
                if (sortedArray[freq]) {
                    if (sortedArray[freq] != '/') {
                        if (sortedArray[freq] != '/home') {
                            scope.frequent.push(sortedArray[freq]);
                        }
                    }
                }
            }
            // retrieved 8 frequent actions

            scope.client = [];
            scope.offices = [];
            scope.cOfficeName = 'Head Office';
            scope.dOfficeName = 'Head Office';
            scope.bOfficeName = 'Head Office';
            scope.chartType = 'Days';
            scope.collectionPieData = [];

            scope.switch = function() {
	        	location.path('/home');
			}

            scope.formatdate = function () {
                var bardate = new Date();
                scope.formattedDate = [];
                for (var i = 0; i < 12; i++) {
                    var temp_date = bardate.getDate();
                    bardate.setDate(temp_date - 1);
                    var curr_date = bardate.getDate();
                    var curr_month = bardate.getMonth() + 1;
                    scope.formattedDate[i] = curr_date + "/" + curr_month;
                }
            };
            scope.formatdate();

            scope.getWeek = function () {
                scope.formattedWeek = [];
                var checkDate = new Date();
                checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
                var time = checkDate.getTime();
                checkDate.setMonth(0);
                checkDate.setDate(1);
                var week = Math.floor(Math.round((time - checkDate) / 86400000) / 7);
                for (var i = 0; i < 12; i++) {
                    if (week == 0) {
                        week = 52;
                    }
                    scope.formattedWeek[i] = week - i;

                }
            };
            scope.getWeek();

            scope.getMonth = function () {
                var today = new Date();
                var aMonth = today.getMonth();
                scope.formattedMonth = [];
                var month = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
                for (var i = 0; i < 12; i++) {
                    scope.formattedMonth.push(month[aMonth]);
                    aMonth--;
                    if (aMonth < 0) {
                        aMonth = 11;
                    }
                }
            };
            scope.getMonth();

            scope.getBarData = function (firstData, secondClientData, secondLoanData) {
                scope.BarData = [

                    {
                        "key": "New Client Joining",
                        "values": [
                            [ firstData[11] , secondClientData[11]] ,
                            [ firstData[10] , secondClientData[10]] ,
                            [ firstData[9] , secondClientData[9]] ,
                            [ firstData[8] , secondClientData[8]] ,
                            [ firstData[7] , secondClientData[7]] ,
                            [ firstData[6] , secondClientData[6]] ,
                            [ firstData[5] , secondClientData[5]] ,
                            [ firstData[4] , secondClientData[4]] ,
                            [ firstData[3] , secondClientData[3]] ,
                            [ firstData[2] , secondClientData[2]] ,
                            [ firstData[1] , secondClientData[1]] ,
                            [ firstData[0] , secondClientData[0]]
                        ]
                    },
                    {
                        "key": "Loans Disbursed",
                        "values": [
                            [ firstData[11] , secondLoanData[11]] ,
                            [ firstData[10] , secondLoanData[10]] ,
                            [ firstData[9] , secondLoanData[9]] ,
                            [ firstData[8] , secondLoanData[8]] ,
                            [ firstData[7] , secondLoanData[7]] ,
                            [ firstData[6] , secondLoanData[6]] ,
                            [ firstData[5] , secondLoanData[5]] ,
                            [ firstData[4] , secondLoanData[4]] ,
                            [ firstData[3] , secondLoanData[3]] ,
                            [ firstData[2] , secondLoanData[2]] ,
                            [ firstData[1] , secondLoanData[1]] ,
                            [ firstData[0] , secondLoanData[0]]
                        ]
                    }
                ];
            };

            scope.getFcount = function (dateData, retrievedDateData, responseData) {
                for (var i in dateData) {
                    scope.fcount[i] = 0;
                    for (var j in retrievedDateData) {
                        if (dateData[i] == retrievedDateData[j]) {
                            scope.fcount[i] = responseData[j].count;

                        }
                    }
                }
            };
            scope.getLcount = function (dateData, retrievedDateData, responseData) {
                for (var i in dateData) {
                    scope.lcount[i] = 0;
                    for (var j in retrievedDateData) {
                        if (dateData[i] == retrievedDateData[j]) {
                            scope.lcount[i] = responseData[j].lcount;

                        }
                    }
                }
            };

            resourceFactory.runReportsResource.get({reportSource: 'ClientTrendsByDay', R_officeId: 1, genericResultSet: false}, function (clientData) {
                scope.client = clientData;
                scope.days = [];
                scope.tempDate = [];
                scope.fcount = [];
                for (var i in scope.client) {
                    scope.days[i] = scope.client[i].days;
                }
                for (var i in scope.days) {
                    if (scope.days[i] && scope.days[i].length > 2) {
                        var tday = scope.days[i][2];
                        var tmonth = scope.days[i][1];
                        var tyear = scope.days[i][0];
                        scope.tempDate[i] = tday + "/" + tmonth;
                    }
                }
                scope.getFcount(scope.formattedDate, scope.tempDate, scope.client);
                resourceFactory.runReportsResource.get({reportSource: 'LoanTrendsByDay', R_officeId: 1, genericResultSet: false}, function (loanData) {
                    scope.ldays = [];
                    scope.ltempDate = [];
                    scope.lcount = [];
                    for (var i in loanData) {
                        scope.ldays[i] = loanData[i].days;
                    }
                    for (var i in scope.ldays) {
                        if (scope.ldays[i] && scope.ldays[i].length > 2) {
                            var tday = scope.ldays[i][2];
                            var tmonth = scope.ldays[i][1];
                            var tyear = scope.ldays[i][0];
                            scope.ltempDate[i] = tday + "/" + tmonth;
                        }
                    };
                    scope.getLcount(scope.formattedDate, scope.ltempDate, loanData);
                    scope.getBarData(scope.formattedDate, scope.fcount, scope.lcount);
                });
            });

            resourceFactory.groupTemplateResource.get(function (data) {
                scope.offices = data.officeOptions;
            });

            resourceFactory.runReportsResource.get({reportSource: 'Demand_Vs_Collection', R_officeId: 1, genericResultSet: false}, function (data) {
                if (data && data.length > 0) {
                    scope.collectionPieData = data[0];
                    scope.showCollectionerror = false;
                    if (data[0].AmountPaid == 0 && data[0].AmountDue == 0) {
                        scope.showCollectionerror = true;
                    }
                    scope.collectedData = [
                        {key: "Collected", y: scope.collectionPieData.AmountPaid},
                        {key: "Pending", y: scope.collectionPieData.AmountDue}
                    ];
                } else{
                    scope.showCollectionerror = true;
                };
            });
            resourceFactory.runReportsResource.get({reportSource: 'Disbursal_Vs_Awaitingdisbursal', R_officeId: 1, genericResultSet: false}, function (data) {
                if (data && data.length > 0) {
                    scope.disbursedPieData = data[0];
                    scope.showDisbursementerror = false;
                    if (data[0].disbursedAmount == 0 && data[0].amountToBeDisburse == 0) {
                        scope.showDisbursementerror = true;
                    }
                    scope.disbursedData = [
                        {key: "Disbursed", y: scope.disbursedPieData.disbursedAmount},
                        {key: "Pending", y: scope.disbursedPieData.amountToBeDisburse}
                    ];
                } else{
                    scope.showDisbursementerror = true;
                };
            });

            scope.getDailyData = function () {
                scope.chartType = 'Days';
                scope.id = this.officeId || 1;
                resourceFactory.runReportsResource.get({reportSource: 'ClientTrendsByDay', R_officeId: scope.id, genericResultSet: false}, function (data) {
                    scope.client = data;
                    scope.days = [];
                    scope.tempDate = [];
                    scope.fcount = [];
                    for (var i in scope.offices) {
                        if (scope.offices[i].id == scope.id) {
                            scope.bOfficeName = scope.offices[i].name;
                        }
                    }
                    for (var i in scope.client) {
                        scope.days[i] = scope.client[i].days;
                    }
                    for (var i in scope.days) {
                        if (scope.days[i] && scope.days[i].length > 2) {
                            var tday = scope.days[i][2];
                            var tmonth = scope.days[i][1];
                            var tyear = scope.days[i][0];
                            scope.tempDate[i] = tday + "/" + tmonth;
                        }
                    }
                    scope.getFcount(scope.formattedDate, scope.tempDate, scope.client);
                    resourceFactory.runReportsResource.get({reportSource: 'LoanTrendsByDay', R_officeId: scope.id, genericResultSet: false}, function (data) {
                        scope.ldays = [];
                        scope.ltempDate = [];
                        scope.lcount = [];
                        for (var i in data) {
                            scope.ldays[i] = data[i].days;
                        }
                        for (var i in scope.ldays) {
                            if (scope.ldays[i] && scope.ldays[i].length > 2) {
                                var tday = scope.ldays[i][2];
                                var tmonth = scope.ldays[i][1];
                                var tyear = scope.ldays[i][0];
                                scope.ltempDate[i] = tday + "/" + tmonth;
                            }
                        }
                        scope.getLcount(scope.formattedDate, scope.ltempDate, data);
                        scope.getBarData(scope.formattedDate, scope.fcount, scope.lcount);
                    });
                });
            };

            scope.getWeeklyData = function () {
                scope.chartType = 'Weeks';
                scope.id = this.officeId || 1;
                resourceFactory.runReportsResource.get({reportSource: 'ClientTrendsByWeek', R_officeId: scope.id, genericResultSet: false}, function (data) {
                    scope.client = data;
                    scope.weeks = [];
                    scope.fcount = [];

                    for (var i in scope.offices) {
                        if (scope.offices[i].id == scope.id) {
                            scope.bOfficeName = scope.offices[i].name;
                        }
                    }
                    for (var i in scope.client) {
                        scope.weeks[i] = scope.client[i].Weeks;
                    }

                    scope.getFcount(scope.formattedWeek, scope.weeks, scope.client);
                    resourceFactory.runReportsResource.get({reportSource: 'LoanTrendsByWeek', R_officeId: scope.id, genericResultSet: false}, function (data) {
                        scope.lweeks = [];
                        scope.lcount = [];
                        for (var i in data) {
                            scope.lweeks[i] = data[i].Weeks;
                        }
                        scope.getLcount(scope.formattedWeek, scope.lweeks, data);
                        scope.getBarData(scope.formattedWeek, scope.fcount, scope.lcount);
                    });
                });
            };

            scope.getMonthlyData = function () {
                scope.chartType = 'Months';
                scope.id = this.officeId || 1;
                scope.formattedSMonth = [];
                var monthArray = new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
                var today = new Date();
                var aMonth = today.getMonth();
                for (var i = 0; i < 12; i++) {
                    scope.formattedSMonth.push(monthArray[aMonth]);
                    aMonth--;
                    if (aMonth < 0) {
                        aMonth = 11;
                    }
                }
                resourceFactory.runReportsResource.get({reportSource: 'ClientTrendsByMonth', R_officeId: scope.id, genericResultSet: false}, function (data) {
                    scope.client = data;
                    scope.months = [];
                    scope.fcount = [];

                    for (var i in scope.offices) {
                        if (scope.offices[i].id == scope.id) {
                            scope.bOfficeName = scope.offices[i].name;
                        }
                    }
                    for (var i in scope.client) {
                        scope.months[i] = scope.client[i].Months;
                    }
                    scope.getFcount(scope.formattedMonth, scope.months, scope.client);
                    resourceFactory.runReportsResource.get({reportSource: 'LoanTrendsByMonth', R_officeId: scope.id, genericResultSet: false}, function (data) {
                        scope.lmonths = [];
                        scope.lcount = [];

                        for (var i in data) {
                            scope.lmonths[i] = data[i].Months;
                        }
                        scope.getLcount(scope.formattedMonth, scope.lmonths, data);
                        scope.getBarData(scope.formattedSMonth, scope.fcount, scope.lcount);
                    });
                });
            };
            scope.getCollectionOffice = function () {
                var id = this.officeIdCollection || 1;
                for (var i in scope.offices) {
                    if (scope.offices[i].id == id) {
                        scope.cOfficeName = scope.offices[i].name;
                    }
                }
                resourceFactory.runReportsResource.get({reportSource: 'Demand_Vs_Collection', R_officeId: this.officeIdCollection, genericResultSet: false}, function (data) {
                    scope.showCollectionerror = false;
                    scope.collectionPieData = data[0];
                    if (data[0].AmountPaid == 0 && data[0].AmountDue == 0) {
                        scope.showCollectionerror = true;
                    }
                    scope.collectedData = [
                        {key: "Disbursed", y: scope.collectionPieData.AmountPaid},
                        {key: "Pending", y: scope.collectionPieData.AmountDue}
                    ];

                });

            };
            scope.getDisbursementOffice = function () {
                var id = this.officeIdDisbursed || 1;
                for (var i in scope.offices) {
                    if (scope.offices[i].id == id) {
                        scope.dOfficeName = scope.offices[i].name;
                    }
                }

                resourceFactory.runReportsResource.get({reportSource: 'Disbursal_Vs_Awaitingdisbursal', R_officeId: this.officeIdDisbursed, genericResultSet: false}, function (data) {
                    scope.disbursedPieData = data[0];
                    scope.showDisbursementerror = false;
                    if (data[0].disbursedAmount == 0 && data[0].amountToBeDisburse == 0) {
                        scope.showDisbursementerror = true;
                    }
                    scope.disbursedData = [
                        {key: "Disbursed", y: scope.disbursedPieData.disbursedAmount},
                        {key: "Pending", y: scope.disbursedPieData.amountToBeDisburse}
                    ];
                });
            };

            scope.xFunction = function () {
                return function (d) {
                    return d.key;
                };
            };
            scope.yFunction = function () {
                return function (d) {
                    return d.y;
                };
            };
            var colorArray = ['#0f82f5', '#008000', '#808080', '#000000', '#FFE6E6'];
            var colorArrayPie = ['#008000', '#ff4500'];
            scope.colorFunction = function () {
                return function (d, i) {
                    return colorArray[i];
                };
            };
            scope.colorFunctionPie = function () {
                return function (d, i) {
                    return colorArrayPie[i];
                };
            };

        }
    });
    mifosX.ng.application.controller('RichDashboard', ['$scope', 'ResourceFactory', 'localStorageService', '$rootScope', '$location', mifosX.controllers.RichDashboard]).run(function ($log) {
        $log.info("RichDashboard initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        SearchController: function (scope, routeParams, resourceFactory) {

            scope.searchResults = [];
            if (routeParams.query == 'undefined') {
                routeParams.query = '';
            }
            resourceFactory.globalSearch.search({query: routeParams.query, resource: routeParams.resource, exactMatch: routeParams.exactMatch}, function (data) {
                if (data.length > 200) {
                    scope.searchResults = data.slice(0, 201);
                    scope.showMsg = true;
                } else {
                    scope.searchResults = data;
                }
                ;

                if (scope.searchResults.length <= 0) {
                    scope.flag = true;
                }
            });
            scope.getClientDetails = function (clientId) {

                scope.selected = clientId;
                resourceFactory.clientResource.get({clientId: clientId}, function (data) {
                    scope.group = '';
                    scope.client = data;
                    scope.center = '';
                });
                resourceFactory.clientAccountResource.get({clientId: clientId}, function (data) {
                    scope.clientAccounts = data;
                });
            };

           scope.getGroupDetails = function (groupId) {

                scope.selected = groupId;

                resourceFactory.groupResource.get({groupId: groupId}, function (data) {
                    scope.client = '';
                    scope.center = '';
                    scope.group = data;
                });
                resourceFactory.groupAccountResource.get({groupId: groupId}, function (data) {
                    scope.groupAccounts = data;
                });
            };

            scope.getCenterDetails = function (centerId) {

                scope.selected = centerId;

                resourceFactory.centerResource.get({centerId: centerId, associations: 'groupMembers'}, function (data) {
                    scope.client = '';
                    scope.group = '';
                    scope.center = data;
                });
                resourceFactory.centerAccountResource.get({centerId: centerId}, function (data) {
                    scope.centerAccounts = data;
                });
            };

        }
    });
    mifosX.ng.application.controller('SearchController', ['$scope', '$routeParams', 'ResourceFactory', mifosX.controllers.SearchController]).run(function ($log) {
        $log.info("SearchController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        TaskController: function (scope, resourceFactory, route, dateFilter, $uibModal, location) {
            scope.clients = [];
            scope.loans = [];
            scope.offices = [];
            var idToNodeMap = {};
            scope.formData = {};
            scope.loanTemplate = {};
            scope.loanDisbursalTemplate = {};
            scope.date = {};
            scope.checkData = [];
            scope.isCollapsed = true;
            scope.approveData = {};
            scope.restrictDate = new Date();
            //this value will be changed within each specific tab
            scope.requestIdentifier = "loanId";

            scope.itemsPerPage = 15;

            scope.loanRescheduleData = [];
            scope.checkForBulkLoanRescheduleApprovalData = [];
            scope.rescheduleData = function(){
              resourceFactory.loanRescheduleResource.getAll({command:'pending'}, function (data) {
                scope.loanRescheduleData = data;
              });
            };
            scope.rescheduleData();

            resourceFactory.checkerInboxResource.get({templateResource: 'searchtemplate'}, function (data) {
                scope.checkerTemplate = data;
            });
            resourceFactory.checkerInboxResource.search(function (data) {
                scope.searchData = data;
            });
            scope.viewUser = function (item) {
                scope.userTypeahead = true;
                scope.formData.user = item.id;
            };
            scope.checkerInboxAllCheckBoxesClicked = function() {
                var newValue = !scope.checkerInboxAllCheckBoxesMet();
                if(!angular.isUndefined(scope.searchData)) {
                    for (var i = scope.searchData.length - 1; i >= 0; i--) {
                        scope.checkData[scope.searchData[i].id] = newValue;
                    };
                }
            }
            scope.checkerInboxAllCheckBoxesMet = function() {
                var checkBoxesMet = 0;
                if(!angular.isUndefined(scope.searchData)) {
                    _.each(scope.searchData, function(data) {
                        if(_.has(scope.checkData, data.id)) {
                            if(scope.checkData[data.id] == true) {
                                checkBoxesMet++;
                            }
                        }
                    });
                    return (checkBoxesMet===scope.searchData.length);
                }
            }
            scope.clientApprovalAllCheckBoxesClicked = function(officeName) {
                var newValue = !scope.clientApprovalAllCheckBoxesMet(officeName);
                if(!angular.isUndefined(scope.groupedClients[officeName])) {
                    for (var i = scope.groupedClients[officeName].length - 1; i >= 0; i--) {
                        scope.approveData[scope.groupedClients[officeName][i].id] = newValue;
                    };
                }
            }
            scope.clientApprovalAllCheckBoxesMet = function(officeName) {
                var checkBoxesMet = 0;
                if(!angular.isUndefined(scope.groupedClients[officeName])) {
                    _.each(scope.groupedClients[officeName], function(data) {
                        if(_.has(scope.approveData, data.id)) {
                            if(scope.approveData[data.id] == true) {
                                checkBoxesMet++;
                            }
                        }
                    });
                    return (checkBoxesMet===scope.groupedClients[officeName].length);
                }
            }
            scope.loanApprovalAllCheckBoxesClicked = function(office) {
                var newValue = !scope.loanApprovalAllCheckBoxesMet(office);
                if(!angular.isUndefined(scope.offices)) {
                    for (var i = office.loans.length - 1; i >= 0; i--) {
                        scope.loanTemplate[office.loans[i].id] = newValue;
                    };
                }
            }
            scope.loanApprovalAllCheckBoxesMet = function(office) {
                var checkBoxesMet = 0;
                if(!angular.isUndefined(scope.offices)) {
                    _.each(office.loans, function(data) {
                        if(_.has(scope.loanTemplate, data.id)) {
                            if(scope.loanTemplate[data.id] == true) {
                                checkBoxesMet++;
                            }
                        }
                    });
                    return (checkBoxesMet===office.loans.length);
                }
            }
            scope.loanDisbursalAllCheckBoxesClicked = function() {
                var newValue = !scope.loanDisbursalAllCheckBoxesMet();
                if(!angular.isUndefined(scope.loans)) {
                    for (var i = scope.loans.length - 1; i >= 0; i--) {
                        scope.loanDisbursalTemplate[scope.loans[i].id] = newValue;
                    };
                }
            }
            scope.loanDisbursalAllCheckBoxesMet = function() {
                var checkBoxesMet = 0;
                if(!angular.isUndefined(scope.loans)) {
                    _.each(scope.loans, function(data) {
                        if(_.has(scope.loanDisbursalTemplate, data.id)) {
                            if(scope.loanDisbursalTemplate[data.id] == true) {
                                checkBoxesMet++;
                            }
                        }
                    });
                    return (checkBoxesMet===scope.loans.length);
                }
            }
            scope.approveOrRejectChecker = function (action) {
                if (scope.checkData) {
                    $uibModal.open({
                        templateUrl: 'approvechecker.html',
                        controller: CheckerApproveCtrl,
                        resolve: {
                            action: function () {
                                return action;
                            }
                        }
                    });
                }
            };
            var CheckerApproveCtrl = function ($scope, $uibModalInstance, action) {
                $scope.approve = function () {
                    var totalApprove = 0;
                    var approveCount = 0;
                    _.each(scope.checkData, function (value, key) {
                        if (value == true) {
                            totalApprove++;
                        }
                    });
                    _.each(scope.checkData, function (value, key) {
                        if (value == true) {

                            resourceFactory.checkerInboxResource.save({templateResource: key, command: action}, {}, function (data) {
                                approveCount++;
                                if (approveCount == totalApprove) {
                                    scope.search();
                                }
                            }, function (data) {
                                approveCount++;
                                if (approveCount == totalApprove) {
                                    scope.search();
                                }
                            });
                        }
                    });
                    scope.checkData = {};
                    $uibModalInstance.close('approve');

                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.deleteChecker = function () {
                if (scope.checkData) {
                    $uibModal.open({
                        templateUrl: 'deletechecker.html',
                        controller: CheckerDeleteCtrl
                    });
                }
            };
            var CheckerDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    var totalDelete = 0;
                    var deleteCount = 0
                    _.each(scope.checkData, function (value, key) {
                        if (value == true) {
                            totalDelete++;
                        }
                    });
                    _.each(scope.checkData, function (value, key) {
                        if (value == true) {

                            resourceFactory.checkerInboxResource.delete({templateResource: key}, {}, function (data) {
                                deleteCount++;
                                if (deleteCount == totalDelete) {
                                    scope.search();
                                }
                            }, function (data) {
                                deleteCount++;
                                if (deleteCount == totalDelete) {
                                    scope.search();
                                }
                            });
                        }
                    });
                    scope.checkData = {};
                    $uibModalInstance.close('delete');
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.approveClient = function () {
                if (scope.approveData) {
                    $uibModal.open({
                        templateUrl: 'approveclient.html',
                        controller: ApproveClientCtrl,
                        resolve: {
                            items: function () {
                                return scope.approveData;
                            }
                        }
                    });
                }
            };

            $('#mifos-reskin-ui-container').on('scroll',function () {
                if ($(this).scrollTop() > 100) {
                    $('.head-affix').css({
                        position: "fixed",
                        top: "50px",
                        width: "80%"
                    });

                } else {
                    $('.head-affix').css({
                        position: 'static',
                        width: "100%"
                    });
                }
            });

            var ApproveClientCtrl = function ($scope, $uibModalInstance, items) {
                $scope.restrictDate = new Date();
                $scope.date = {};
                $scope.date.actDate = new Date();
                $scope.approve = function (act) {
                    var activate = {}
                    activate.activationDate = dateFilter(act, scope.df);
                    activate.dateFormat = scope.df;
                    activate.locale = scope.optlang.code;
                    var totalClient = 0;
                    var clientCount = 0
                    _.each(items, function (value, key) {
                        if (value == true) {
                            totalClient++;
                        }
                    });

                    scope.batchRequests = [];
                    scope.requestIdentifier = "clientId";

                    var reqId = 1;
                    _.each(items, function (value, key) {
                        if (value == true) {
                            scope.batchRequests.push({requestId: reqId++, relativeUrl: "clients/"+key+"?command=activate",
                            method: "POST", body: JSON.stringify(activate)});
                        }
                    });

                    resourceFactory.batchResource.post(scope.batchRequests, function (data) {
                        for(var i = 0; i < data.length; i++) {
                            if(data[i].statusCode = '200') {
                                clientCount++;
                                if (clientCount == totalClient) {
                                    route.reload();
                                }
                            }

                        }
                    });

                    scope.approveData = {};
                    $uibModalInstance.close('delete');
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.routeTo = function (id) {
                location.path('viewcheckerinbox/' + id);
            };

            scope.routeToClient = function (id) {
                location.path('viewclient/' + id);
            };

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
                for (var i in data) {
                    data[i].loans = [];
                    idToNodeMap[data[i].id] = data[i];
                }
                scope.loanResource = function () {
                    resourceFactory.loanResource.getAllLoans({limit: '1000', sqlSearch: 'l.loan_status_id in (100,200)'}, function (loanData) {
                        scope.loans = loanData.pageItems;
                        for (var i in scope.loans) {
                            if (scope.loans[i].status.pendingApproval) {
                                var tempOffice = undefined;
                                if (scope.loans[i].clientOfficeId) {
                                    tempOffice = idToNodeMap[scope.loans[i].clientOfficeId];
                                    tempOffice.loans.push(scope.loans[i]);
                                } else {
                                    if (scope.loans[i].group) {
                                        tempOffice = idToNodeMap[scope.loans[i].group.officeId];
                                        tempOffice.loans.push(scope.loans[i]);
                                    }
                                }
                            }
                        }

                        var finalArray = [];
                        for (var i in scope.offices) {
                            if (scope.offices[i].loans && scope.offices[i].loans.length > 0) {
                                finalArray.push(scope.offices[i]);
                            }
                        }
                        scope.offices = finalArray;
                    });
                };
                scope.loanResource();
            });


            resourceFactory.clientResource.getAllClients({status: 'pending'}, function (data) {
                scope.groupedClients = _.groupBy(data.pageItems, "officeName");
            });

            scope.search = function () {
                scope.isCollapsed = true;
                var reqFromDate = dateFilter(scope.date.from, 'yyyy-MM-dd');
                var reqToDate = dateFilter(scope.date.to, 'yyyy-MM-dd');
                var params = {};
                if (scope.formData.action) {
                    params.actionName = scope.formData.action;
                }
                ;

                if (scope.formData.entity) {
                    params.entityName = scope.formData.entity;
                }
                ;

                if (scope.formData.resourceId) {
                    params.resourceId = scope.formData.resourceId;
                }
                ;

                if (scope.formData.user) {
                    params.makerId = scope.formData.user;
                }
                ;

                if (scope.date.from) {
                    params.makerDateTimeFrom = reqFromDate;
                }
                ;

                if (scope.date.to) {
                    params.makerDateTimeto = reqToDate;
                }
                ;
                resourceFactory.checkerInboxResource.search(params, function (data) {
                    scope.searchData = data;
                    if (scope.userTypeahead) {
                        scope.formData.user = '';
                        scope.userTypeahead = false;
                        scope.user = '';
                    }
                });
            };

            scope.approveLoan = function () {
                if (scope.loanTemplate) {
                    $uibModal.open({
                        templateUrl: 'approveloan.html',
                        controller: ApproveLoanCtrl
                    });
                }
            };

            var ApproveLoanCtrl = function ($scope, $uibModalInstance) {
                $scope.approve = function () {
                    scope.bulkApproval();
                    route.reload();
                    $uibModalInstance.close('approve');
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            }

            scope.bulkApproval = function () {
                scope.formData.approvedOnDate = dateFilter(new Date(), scope.df);
                scope.formData.dateFormat = scope.df;
                scope.formData.locale = scope.optlang.code;
                var selectedAccounts = 0;
                var approvedAccounts = 0;
                _.each(scope.loanTemplate, function (value, key) {
                    if (value == true) {
                        selectedAccounts++;
                    }
                });

                scope.batchRequests = [];
                scope.requestIdentifier = "loanId";

                var reqId = 1;
                _.each(scope.loanTemplate, function (value, key) {
                    if (value == true) {
                        scope.batchRequests.push({requestId: reqId++, relativeUrl: "loans/"+key+"?command=approve",
                        method: "POST", body: JSON.stringify(scope.formData)});
                    }
                });

                resourceFactory.batchResource.post(scope.batchRequests, function (data) {
                    for(var i = 0; i < data.length; i++) {
                        if(data[i].statusCode = '200') {
                            approvedAccounts++;
                            data[i].body = JSON.parse(data[i].body);
                            scope.loanTemplate[data[i].body.loanId] = false;
                            if (selectedAccounts == approvedAccounts) {
                                scope.loanResource();
                            }
                        }

                    }
                });
            };

            scope.disburseLoan = function () {
                if (scope.loanDisbursalTemplate) {
                    $uibModal.open({
                        templateUrl: 'disburseloan.html',
                        controller: DisburseLoanCtrl
                    });
                }
            };

            var DisburseLoanCtrl = function ($scope, $uibModalInstance) {
                $scope.disburse = function () {
                    scope.bulkDisbursal();
                    route.reload();
                    $uibModalInstance.close('disburse');
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            }

            scope.bulkDisbursal = function () {
                scope.formData.actualDisbursementDate = dateFilter(new Date(), scope.df);
                scope.formData.dateFormat = scope.df;
                scope.formData.locale = scope.optlang.code;

                var selectedAccounts = 0;
                var approvedAccounts = 0;
                _.each(scope.loanDisbursalTemplate, function (value, key) {
                    if (value == true) {
                        selectedAccounts++;
                    }
                });

                scope.batchRequests = [];
                scope.requestIdentifier = "loanId";

                var reqId = 1;
                _.each(scope.loanDisbursalTemplate, function (value, key) {
                    if (value == true) {
                        scope.batchRequests.push({requestId: reqId++, relativeUrl: "loans/"+key+"?command=disburse",
                        method: "POST", body: JSON.stringify(scope.formData)});
                    }
                });

                resourceFactory.batchResource.post(scope.batchRequests, function (data) {
                    for(var i = 0; i < data.length; i++) {
                        if(data[i].statusCode = '200') {
                            approvedAccounts++;
                            data[i].body = JSON.parse(data[i].body);
                            scope.loanDisbursalTemplate[data[i].body.loanId] = false;
                            if (selectedAccounts == approvedAccounts) {
                                scope.loanResource();
                            }
                        }

                    }
                });
            };
            scope.approveBulkLoanReschedule = function () {
              if (scope.checkForBulkLoanRescheduleApprovalData) {
                $uibModal.open({
                  templateUrl: 'loanreschedule.html',
                  controller: ApproveBulkLoanRescheduleCtrl
                });
              }
            };

              var ApproveBulkLoanRescheduleCtrl = function ($scope, $uibModalInstance) {
                $scope.approveLoanReschedule = function () {
                  scope.bulkLoanRescheduleApproval();
                  route.reload();
                  $uibModalInstance.close('approveLoanReschedule');
                };
                $scope.cancel = function () {
                  $uibModalInstance.dismiss('cancel');
                };
              }
              scope.checkerInboxAllCheckBoxesClickedForBulkLoanRescheduleApproval = function() {                var newValue = !scope.checkerInboxAllCheckBoxesMetForBulkLoanRescheduleApproval();
                scope.checkForBulkLoanRescheduleApprovalData = [];
                if(!angular.isUndefined(scope.loanRescheduleData)) {
                  for (var i = scope.loanRescheduleData.length - 1; i >= 0; i--) {        scope.checkForBulkLoanRescheduleApprovalData[scope.loanRescheduleData[i].id] = newValue;
                  };
                }
              }
              scope.checkerInboxAllCheckBoxesMetForBulkLoanRescheduleApproval = function() {
                var checkBoxesMet = 0;
                if(!angular.isUndefined(scope.loanRescheduleData)) {
                  _.each(scope.loanRescheduleData, function(data) {
                    if(_.has(scope.checkForBulkLoanRescheduleApprovalData, data.id)) {
                      if(scope.checkForBulkLoanRescheduleApprovalData[data.id] == true) {
                        checkBoxesMet++;
                      }
                    }
                  });
                  return (checkBoxesMet===scope.loanRescheduleData.length);
                }
              }
              scope.bulkLoanRescheduleApproval = function () {
                scope.formData.approvedOnDate = dateFilter(new Date(), scope.df);
                scope.formData.dateFormat = scope.df;
                scope.formData.locale = scope.optlang.code;
                var selectedAccounts = 0;
                var approvedAccounts = 0;
                _.each(scope.checkForBulkLoanRescheduleApprovalData, function (value, key) {
                  if (value == true) {
                    selectedAccounts++;
                  }
                });
                scope.batchRequests = [];
                scope.requestIdentifier = "RESCHEDULELOAN";
                var reqId = 1;
                _.each(scope.checkForBulkLoanRescheduleApprovalData, function (value, key) {
                  if (value == true) {
                    var url =  "rescheduleloans/"+key+"?command=approve";
                    var bodyData = JSON.stringify(scope.formData);
                    var batchData = {requestId: reqId++, relativeUrl: url, method: "POST", body: bodyData};
                    scope.batchRequests.push(batchData);
                    }
                  });
                  resourceFactory.batchResource.post(scope.batchRequests, function (data) {
                    for(var i = 0; i < data.length; i++) {
                      if(data[i].statusCode = '200') {
                        approvedAccounts++;
                        data[i].body = JSON.parse(data[i].body);      scope.checkForBulkLoanRescheduleApprovalData[data[i].body.resourceId] = false;
                      }
                    }
                  });
                };
        }
    });
    mifosX.ng.application.controller('TaskController', ['$scope', 'ResourceFactory', '$route', 'dateFilter', '$uibModal', '$location', mifosX.controllers.TaskController]).run(function ($log) {
        $log.info("TaskController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewCheckerinboxController: function (scope, resourceFactory, routeParams, location, $uibModal) {
            scope.details = {};
            resourceFactory.auditResource.get({templateResource: routeParams.id}, function (data) {
                scope.details = data;
                scope.commandAsJson = data.commandAsJson;
                var obj = JSON.parse(scope.commandAsJson);
                scope.jsondata = [];
                _.each(obj, function (value, key) {
                    scope.jsondata.push({name: key, property: value});
                });
            });
            scope.checkerApprove = function (action) {
                $uibModal.open({
                    templateUrl: 'approve.html',
                    controller: ApproveCtrl,
                    resolve: {
                        action: function () {
                            return action;
                        }
                    }
                });
            };
            var ApproveCtrl = function ($scope, $uibModalInstance, action) {
                $scope.approve = function () {
                    resourceFactory.checkerInboxResource.save({templateResource: routeParams.id, command: action}, {}, function (data) {
                        $uibModalInstance.close('approve');
                        location.path('/checkeractionperformed');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

			scope.checkerReject = function (action) {
                $uibModal.open({
                    templateUrl: 'reject.html',
                    controller: RejectCtrl,
                    resolve: {
                        action: function () {
                            return action;
                        }
                    }
                });
            };
			var RejectCtrl = function ($scope, $uibModalInstance, action) {
                $scope.reject = function () {
                    resourceFactory.checkerInboxResource.save({templateResource: routeParams.id, command: action}, {}, function (data) {
                        $uibModalInstance.close('reject');
                        location.path('/checkeractionperformed');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.checkerDelete = function () {
                $uibModal.open({
                    templateUrl: 'delete.html',
                    controller: DeleteCtrl
                });
            };
            var DeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.checkerInboxResource.delete({templateResource: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/checkeractionperformed');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewCheckerinboxController', ['$scope', 'ResourceFactory', '$routeParams', '$location', '$uibModal', mifosX.controllers.ViewCheckerinboxController]).run(function ($log) {
        $log.info("ViewCheckerinboxController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewMakerCheckerTaskController: function (scope, routeParams) {
            scope.commandId = routeParams.commandId;
        }
    });
    mifosX.ng.application.controller('ViewMakerCheckerTaskController', ['$scope', '$routeParams', mifosX.controllers.ViewMakerCheckerTaskController]).run(function ($log) {
        $log.info("ViewMakerCheckerTaskController initialized");
    });
}(mifosX.controllers || {}));


;(function (module) {
    mifosX.controllers = _.extend(module, {
        NotificationsController: function (scope, rootScope, resourceFactory, location, timeout,
                                           notificationResponseHeaderFactory, localStorageService) {
            var objTypeUrlMap = {
                'client' : '/viewclient/',
                'group' : '/viewgroup/',
                'loan' : '/viewloanaccount/',
                'shareAccount' : '/viewshareaccount/',
                'fixedDeposit' : 'viewfixeddepositaccount/',
                'recurringDepositAccount': '/viewrecurringdepositaccount/',
                'shareProduct': '/viewshareproduct/',
                'savingsAccount' : '/viewsavingaccount/',
                'center' : '/viewcenter/',
                'loanProduct' : '/viewloanproduct/'
            };
            scope.notifications = [];
            scope.notificationsPerPage = 15;
            scope.notificationsItmesInATray = 5;
            scope.isNotificationIconRed = false;
            scope.numberOfUnreadNotifications = 0;
            scope.counter = 0;
            scope.initNotificationTray = function() {
                var readNotifications = localStorageService.getFromLocalStorage("notifications");
                if (readNotifications == null) {
                    scope.initNotificationsPage();
                } else {
                    scope.notifications = readNotifications;
                }

                if (scope.numberOfUnreadNotifications > 0 ) {
                    resourceFactory.notificationsResource.update();
                    scope.numberOfUnreadNotifications = 0;
                }
            };
            scope.initNotificationsPage = function () {
                var items = resourceFactory.notificationsResource.getAllNotifications({
                    offset: 0,
                    limit: scope.notificationsPerPage || 10
                }, function (data) {
                    scope.totalNotifications = data.totalFilteredRecords;
                    scope.notifications = data.pageItems;
                    localStorageService.addToLocalStorage("notifications", JSON.stringify(scope.notifications));
                });
            };
            scope.getResultsPage = function (pageNumber) {
                var items = resourceFactory.notificationsResource.getAllNotifications({
                    offset : ((pageNumber-1) * scope.notificationsPerPage),
                    limit: scope.notificationsPerPage
                }, function (data) {
                    scope.notifications = data.pageItems;
                });
            };
            scope.fetchUnreadNotifications = function() {
                var items = resourceFactory.notificationsResource.getAllUnreadNotifications({
                    offset: 0,
                    limit: scope.notificationsPerPage || 10
                }, function(data) {
                    scope.numberOfUnreadNotifications = data.pageItems.length;
                    scope.counter = 0;
                    var readNotifications = localStorageService.getFromLocalStorage("notifications");
                    if (readNotifications == null) {
                        scope.initNotificationsPage();
                    } else {
                        for (j = 0; j < data.pageItems.length; j++) {
                            for (i = 0; i < readNotifications.length; i++) {
                                if (JSON.stringify(readNotifications[i]) === JSON.stringify(data.pageItems[j])) {
                                    readNotifications.splice(i, 1);
                                }
                            }
                        }
                        scope.notifications = data.pageItems.concat
                        (readNotifications
                            .slice(0, Math.abs(readNotifications.length - data.pageItems.length + 1)));
                    }
                    localStorageService.addToLocalStorage("notifications", JSON.stringify(scope.notifications));
                });
             };
            scope.navigateToAction = function(notification) {
                if(!notification.objectType || typeof(notification.objectType) !=='string'){
                    console.error('no object type found');
                    return;
                }
                if(!objTypeUrlMap[notification.objectType] ){
                    return;
                }
                location.path(objTypeUrlMap[notification.objectType] + notification.objectId);
            };
            scope.countFromLastResponse = function() {
                scope.counter++;
                if (scope.counter == 60) {
                    scope.counter = 0;
                    scope.fetchUnreadNotifications();
                }
                scope.timer = timeout(scope.countFromLastResponse, 1000);
            };
            scope.fetchItemsInNotificationTray = function() {
                  scope.initNotificationTray();
            };
            scope.$on('eventFired', function(event, data) {
                scope.counter = 0;
                if (data.notificationStatus === "true") {
                    scope.fetchUnreadNotifications();
                }
            });
            scope.$on("UserAuthenticationSuccessEvent", function (event, data) {
                timeout.cancel(scope.timer);
                localStorageService.removeFromLocalStorage("notifications"); //remove all local notifications
                timeout(scope.countFromLastResponse(), 1000);
                scope.fetchUnreadNotifications();
            });
        }
    });
    mifosX.ng.application.controller('NotificationsController', ['$scope', '$rootScope', 'ResourceFactory', '$location',
        '$timeout', 'NotificationResponseHeaderFactory' , 'localStorageService', mifosX.controllers.NotificationsController])
        .run(function ($log) {
        $log.info("NotificationsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddHolController: function (scope, resourceFactory, location, dateFilter) {
            scope.offices = [];
            scope.holidays = [];
            scope.date = {};
            scope.date.first = new Date();
            scope.date.second = new Date();
            scope.date.third = new Date();
            var idToNodeMap = {};
            var holidayOfficeIdArray = [];
            scope.firstError = false
            scope.secondError = false
            scope.thirdError = false
            scope.specificRescheduleType = 2;

            scope.deepCopy = function (obj) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    var out = [], i = 0, len = obj.length;
                    for (; i < len; i++) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                if (typeof obj === 'object') {
                    var out = {}, i;
                    for (i in obj) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                return obj;
            }

            scope.selectRescheduleType = function(data){
                if(data && data.id == scope.specificRescheduleType){
                    scope.date.third = new Date();
                }else{
                     scope.date.third = undefined;
                }
            };

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = scope.deepCopy(data);
                 resourceFactory.holidayTemplateResource.get(function(repaymentSchedulingRulesData){
                    scope.repaymentSchedulingRules = repaymentSchedulingRulesData; 
                    for(var i in scope.repaymentSchedulingRules){
                        if(scope.repaymentSchedulingRules[i].id ==2){
                            scope.reschedulingType = scope.repaymentSchedulingRules[i]; 
                            scope.date.third = new Date();
                        }
                    }
                                 
                });
                for (var i in data) {
                    data[i].children = [];
                    idToNodeMap[data[i].id] = data[i];
                }
                function sortByParentId(a, b) {
                    return a.parentId - b.parentId;
                }

                data.sort(sortByParentId);

                var root = [];
                for (var i = 0; i < data.length; i++) {
                    var currentObj = data[i];
                    if (currentObj.children) {
                        currentObj.collapsed = "true";
                    }
                    if (typeof currentObj.parentId === "undefined") {
                        root.push(currentObj);
                    } else {
                        parentNode = idToNodeMap[currentObj.parentId];
                        parentNode.children.push(currentObj);
                    }
                }
                scope.treedata = root;
            });

            scope.holidayApplyToOffice = function (node) {
                if (node.selectedCheckBox) {
                    recurHolidayApplyToOffice(node);
                    holidayOfficeIdArray = _.uniq(holidayOfficeIdArray);
                } else {
                    node.selectedCheckBox = false;
                    recurRemoveHolidayAppliedOOffice(node);

                }
            };

            function recurHolidayApplyToOffice(node) {
                node.selectedCheckBox = true;
                holidayOfficeIdArray.push(node.id);
                if (node.children.length > 0) {
                    for (var i = 0; i < node.children.length; i++) {
                        node.children[i].selectedCheckBox = true;
                        holidayOfficeIdArray.push(node.children[i].id);
                        if (node.children[i].children.length > 0) {
                            recurHolidayApplyToOffice(node.children[i]);
                        }
                    }
                }
            }

            function recurRemoveHolidayAppliedOOffice(node) {
                holidayOfficeIdArray = _.without(holidayOfficeIdArray, node.id);
                if (node.children.length > 0) {
                    for (var i = 0; i < node.children.length; i++) {
                        node.children[i].selectedCheckBox = false;
                        holidayOfficeIdArray = _.without(holidayOfficeIdArray, node.children[i].id);
                        if (node.children[i].children.length > 0) {
                            recurRemoveHolidayAppliedOOffice(node.children[i]);
                        }
                    }
                }
            }

            scope.minDat = new Date();
            scope.submit = function () {
                var testDate = new Date();
                testDate.setDate(testDate.getDate() - 1);

                if(scope.date.first < testDate || scope.date.second < testDate || (scope.reschedulingType.id == scope.specificRescheduleType && scope.date.third < testDate) ){
                    if(scope.date.first < testDate) {
                        scope.firstError = true;
                    } else {
                        scope.firstError = false;
                    }
                    if (scope.date.second < testDate) {
                        scope.secondError = true;
                    } else {
                        scope.secondError = false;
                    }
                    if (scope.date.third < testDate) {
                        scope.thirdError = true;
                    } else {
                       scope.thirdError = false;
                    }
                }
                else {
                    scope.firstError = false;
                    scope.secondError = false;
                    scope.thirdError = false;
                    var reqFirstDate = dateFilter(scope.date.first, scope.df);
                    var reqSecondDate = dateFilter(scope.date.second, scope.df);
                    var reqThirdDate = undefined;
                    var newholiday = new Object();
                    newholiday.locale = scope.optlang.code;
                    newholiday.dateFormat = scope.df;
                    newholiday.name = this.formData.name;
                    newholiday.fromDate = reqFirstDate;
                    newholiday.toDate = reqSecondDate;                    
                    newholiday.reschedulingType = scope.reschedulingType.id;
                    if(scope.reschedulingType.id == scope.specificRescheduleType){
                        reqThirdDate = dateFilter(scope.date.third, scope.df);
                        newholiday.repaymentsRescheduledTo = reqThirdDate;
                    }
                    newholiday.description = this.formData.description;
                    newholiday.offices = [];
                    for (var i in holidayOfficeIdArray) {
                        var temp = new Object();
                        temp.officeId = holidayOfficeIdArray[i];
                        newholiday.offices.push(temp);
                    }
                    resourceFactory.holValueResource.save(newholiday, function (data) {
                        location.path('/holidays');
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('AddHolController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.AddHolController]).run(function ($log) {
        $log.info("AddHolController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportEmployeeController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/staff/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices=data;
                console.log("Office ID :"+scope.offices);
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        scope.first.queryParams += 'officeId=' + scope.formData.officeId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }
            };

            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "staff"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };

            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/staff/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportEmployeeController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportEmployeeController]).run(function ($log) {
        $log.info("BulkImportEmployeeController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportOfficesController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {
        	
        	scope.first = {};
        	scope.first.templateUrl =  API_VERSION + '/offices/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
        	+ '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
             
        	scope.formData = {};
        	 scope.onFileSelect = function (files) {
                 scope.formData.file = files[0];
             };

             scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "offices"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };
          
         
             scope.upload = function () {
                 Upload.upload({
                     url: $rootScope.hostUrl + API_VERSION + '/offices/uploadtemplate',
                     data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                 }).then(function (data) {
                         // to fix IE not refreshing the model
                         if (!scope.$$phase) {
                             scope.$apply();
                         }
                     });
             };
        }
    });
    mifosX.ng.application.controller('BulkImportOfficesController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportOfficesController]).run(function ($log) {
        $log.info("BulkImportOfficesController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkLoanReassignmentController: function (scope, resourceFactory, route, dateFilter) {
            scope.offices = [];
            scope.accounts = {};
            scope.officeIdTemp = {};
            scope.first = {};
            scope.toOfficers = [];
            scope.first.date = new Date();
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });
            scope.getOfficers = function () {
                scope.officerChoice = true;
                resourceFactory.loanReassignmentResource.get({templateSource: 'template', officeId: scope.officeIdTemp}, function (data) {
                    scope.officers = data.loanOfficerOptions;

                });
            };

            scope.getOfficerClients = function () {
                var toOfficers = angular.copy(scope.officers);

                for (var i in toOfficers) {
                    if (toOfficers[i].id == this.formData.fromLoanOfficerId) {
                        var index = i;
                    }
                }
                toOfficers.splice(index, 1);
                scope.toOfficers = toOfficers;
                resourceFactory.loanReassignmentResource.get({templateSource: 'template', officeId: scope.officeIdTemp, fromLoanOfficerId: scope.formData.fromLoanOfficerId}, function (data) {
                    scope.clients = data.accountSummaryCollection.clients;
                    scope.groups = data.accountSummaryCollection.groups;
                });
            };

            scope.submit = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                var loans = [];
                _.each(scope.accounts, function (value, key) {
                    if (value == true) {
                        loans.push(key)
                    }
                });
                this.formData.assignmentDate = reqDate;
                this.formData.dateFormat = scope.df;
                this.formData.locale = scope.optlang.code;
                this.formData.loans = loans;
                resourceFactory.loanReassignmentResource.save(this.formData, function (data) {
                    route.reload();
                });

            };
        }
    });
    mifosX.ng.application.controller('BulkLoanReassignmentController', ['$scope', 'ResourceFactory', '$route', 'dateFilter', mifosX.controllers.BulkLoanReassignmentController]).run(function ($log) {
        $log.info("BulkLoanReassignmentController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CashierFundsAllocationSettlementController: function (scope, routeParams, route, location, dateFilter, resourceFactory) {
            scope.formData = {};
            scope.formData.txnDate = new Date();
            scope.settle = routeParams.settle;
            resourceFactory.cashierTxnTemplateResource.get({tellerId: routeParams.tellerId, cashierId: routeParams.cashierId}, function (data) {
                scope.cashierTxnTemplate = data;
                scope.formData.currencyCode = data.currencyOptions[0].code;
            });
            scope.tellersId=routeParams.tellerId;
            scope.ifAllocate = function(){
                if ( routeParams.action == 'allocate') {
                    return true;
                }
            };

            scope.ifSettle = function(){
                if ( routeParams.action == 'settle') {
                    return true;
                }
            };

           /* scope.cancel="#tellers";*/
            scope.allocate = function () {
                this.formData.locale = scope.optlang.code;
                var tDate = dateFilter(scope.formData.txnDate, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.txnDate = tDate;
                resourceFactory.tellerCashierTxnsAllocateResource.allocate(
                    {'tellerId': routeParams.tellerId, 'cashierId': routeParams.cashierId}, 
                    this.formData, function (data) {
                        location.path('tellers/' + routeParams.tellerId + '/cashiers/' + routeParams.cashierId + '/txns/' + scope.formData.currencyCode);
                });
            }; 

            scope.settle = function () {
                this.formData.locale = scope.optlang.code;
                var tDate = dateFilter(scope.formData.txnDate, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.txnDate = tDate;
                resourceFactory.tellerCashierTxnsSettleResource.settle(
                    {'tellerId': routeParams.tellerId, 'cashierId': routeParams.cashierId}, 
                    this.formData, function (data) {
                        location.path('tellers/' + routeParams.tellerId + '/cashiers/' + routeParams.cashierId + '/txns/' + scope.formData.currencyCode);
                });
            }; 
        }
    });
    mifosX.ng.application.controller('CashierFundsAllocationSettlementController', ['$scope', '$routeParams', '$route', '$location', 'dateFilter', 'ResourceFactory', mifosX.controllers.CashierFundsAllocationSettlementController]).run(function ($log) {
        $log.info("CashierFundsAllocationSettlementController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CashierTransactionsController: function (scope, routeParams, route, location, resourceFactory) {

            scope.cashiertxns = [];
            scope.txnPerPage = 15;
            scope.formData = [];
            scope.cashierTransactions = [];

            scope.routeTo = function (id) {
                location.path('/viewcashiertxns/' + id);
            };

            scope.routeToAllocate = function () {
                location.path('tellers/' + routeParams.tellerId + '/cashiers/' + routeParams.cashierId + '/actions/allocate');
            };

            scope.routeToSettle = function () {
                location.path('tellers/' + routeParams.tellerId + '/cashiers/' + routeParams.cashierId + '/actions/settle');
            };

            scope.routeToTxn = function(){
                route.reload();
                location.path('/tellers/' + routeParams.tellerId + "/cashiers/" + routeParams.cashierId  +"/txns/" +  scope.formData.currencyCode);

            };

            resourceFactory.currencyConfigResource.get({fields: 'selectedCurrencyOptions'}, function (data) {
                scope.currencyOptions = data.selectedCurrencyOptions;
                scope.formData.currencyCode = routeParams.currencyCode;
            });

            scope.deepCopy = function (obj) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    var out = [], i = 0, len = obj.length;
                    for (; i < len; i++) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                if (typeof obj === 'object') {
                    var out = {}, i;
                    for (i in obj) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                return obj;
            }

            scope.getResultsPage = function (pageNumber) {
                resourceFactory.tellerCashierSummaryAndTxnsResource.getCashierSummaryAndTransactions({
                    tellerId: routeParams.tellerId,
                    cashierId: routeParams.cashierId,
                    currencyCode: routeParams.currencyCode,
                    offset:((pageNumber - 1) * scope.txnPerPage),
                    limit:scope.txnPerPage
                }, function (data) {
                    scope.cashierSummaryAndTxns = data;
                    scope.totaltxn = data.cashierTransactions.totalFilteredRecords;
                    scope.cashierTransactions = data.cashierTransactions.pageItems;
                });
            }

            scope.initPage = function () {
                var items = resourceFactory.tellerCashierSummaryAndTxnsResource.getCashierSummaryAndTransactions({
                    tellerId: routeParams.tellerId,
                    cashierId: routeParams.cashierId,
                    currencyCode: routeParams.currencyCode,
                    offset:0,
                    limit: scope.txnPerPage
                }, function (data) {
                    scope.cashierSummaryAndTxns = data;
                    scope.totaltxn = data.cashierTransactions.totalFilteredRecords;
                    scope.cashierTransactions = data.cashierTransactions.pageItems;
                });
            }
            scope.initPage();
        }
    });
    mifosX.ng.application.controller('CashierTransactionsController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', mifosX.controllers.CashierTransactionsController]).run(function ($log) {
        $log.info("CashierTransactionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateCashierForTellerController: function (scope, routeParams, route, location, dateFilter, resourceFactory) {

            var requestParams = {};
            scope.formData = {};
            scope.formData.isFullDay = true;
            scope.tellerId = routeParams.tellerId;
            if (routeParams.tellerId) {
                requestParams.tellerId = routeParams.tellerId;
            }

            resourceFactory.tellerCashierTemplateResource.get({tellerId: routeParams.tellerId}, function (data) {
                scope.cashier = data;
            });

            scope.setChoice = function () {
                if (this.formData.isFullDay) {
                    scope.choice = 1;
                }
                else if (!this.formData.isFullDay) {
                    scope.choice = 0;
                }
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                var reqDate = dateFilter(scope.first.date, scope.df);
                var endDate = dateFilter(scope.formData.endDate, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.startDate = reqDate;
                this.formData.endDate = endDate;
                this.formData.hourStartTime;
                this.formData.minStartTime;
                this.formData.hourEndTime;
                this.formData.minEndTime;
                resourceFactory.tellerCashierResource.save(
                    {'tellerId': routeParams.tellerId, 'cashierId': routeParams.cashierId}, 
                    this.formData, function (data) {
                        location.path('tellers/' + routeParams.tellerId + '/cashiers');
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateCashierForTellerController', ['$scope', '$routeParams', '$route', '$location', 'dateFilter', 'ResourceFactory', mifosX.controllers.CreateCashierForTellerController]).run(function ($log) {
        $log.info("CreateCashierForTellerController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateTellerController: function (scope, resourceFactory, location, dateFilter) {
            scope.offices = [];
            scope.tellerStatuses = [ {"id":300, "code":"300", "value":"Active"}, {"id":400, "code":"400", "value":"Inactive"}];
            scope.first = {};
            scope.first.date = new Date();
            scope.restrictDate = new Date();
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
                scope.formData = {
                    officeId: scope.offices[0].id
                }
            });

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                var reqDate = dateFilter(scope.first.date, scope.df);
                var endDate = dateFilter(scope.formData.endDate, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.startDate = reqDate;
                this.formData.endDate = endDate;
                resourceFactory.tellerResource.save(this.formData, function (data) {
                    location.path('/viewtellers/' + data.resourceId);

                });
            };
        }
    });
    mifosX.ng.application.controller('CreateTellerController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.CreateTellerController]).run(function ($log) {
        $log.info("CreateTellerController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditCashierController: function (scope, routeParams, resourceFactory, location, dateFilter) {

            scope.formData = {};
            scope.cashierOption = [];
            resourceFactory.tellerCashierResource.getCashier({tellerId: routeParams.tellerId, cashierId:routeParams.id}, function (data) {
                scope.cashier = data;
                var startTime = scope.cashier.startTime;
                var endTime = scope.cashier.endTime;

                scope.formData.description= scope.cashier.description;
                scope.formData.startDate = scope.cashier.startDate;
                scope.formData.endDate = scope.cashier.endDate;
                var startDate = dateFilter(scope.cashier.startDate, scope.df);
                scope.formData.startDate  = new Date(startDate);
                var endDate = dateFilter(scope.cashier.endDate, scope.df);
                scope.formData.endDate  = new Date(endDate);
                scope.formData.staffId = scope.cashier.staffId;
                scope.formData.isFullDay = scope.cashier.isFullDay;
                if(!scope.formData.isFullDay) {
                    var startTime = scope.cashier.startTime;
                    var endTime = scope.cashier.endTime;
                    var timeStampForStartTime = startTime.split(":");
                    var timeStampForEndTime = endTime.split(":");
                    scope.formData.hourStartTime = Number(timeStampForStartTime[0]);
                    scope.formData.minStartTime = Number(timeStampForStartTime[1]);
                    scope.formData.hourEndTime = Number(timeStampForEndTime[0]);
                    scope.formData.minEndTime = Number(timeStampForEndTime[1]);
                }

            });

            scope.setChoice = function () {
                if (this.formData.isFullDay) {
                    scope.choice = 1;
                }
                else if (!this.formData.isFullDay) {
                    scope.choice = 0;

                }
            };

            resourceFactory.tellerCashierTemplateResource.get({tellerId: routeParams.tellerId}, function (data) {
                scope.office= data.officeName;
                scope.staffs = data.staffOptions;
                /*scope.formData.staffId = scope.staffs.id;*/
            });

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                var reqDate = dateFilter(scope.formData.startDate, scope.df);
                var endDate = dateFilter(scope.formData.endDate, scope.df);
                this.formData.staffId;
                this.formData.dateFormat = scope.df;
                this.formData.startDate = reqDate;
                this.formData.endDate = endDate;
                resourceFactory.tellerCashierResource.update({'tellerId': routeParams.tellerId,'cashierId':routeParams.id}, this.formData, function (data) {
                    location.path('/tellers/' + scope.cashier.tellerId+'/cashiers');

                });
            };
        }
    });
    mifosX.ng.application.controller('EditCashierController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.EditCashierController]).run(function ($log) {
        $log.info("EditCashierController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditTellerController: function (scope, routeParams, resourceFactory, location, dateFilter) {
            scope.offices = [];
            scope.tellerStatuses = [ {"id":300, "code":"300", "value":"Active"}, {"id":400, "code":"400", "value":"Inactive"}];

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });

            resourceFactory.tellerResource.get({tellerId: routeParams.id, template: 'true'}, function (data) {
                scope.tellerId = data.id;
                scope.officeName = data.officeName;
                if (data.endDate) {
                    var editEndDate = dateFilter(data.endDate, scope.df);
                    data.endDate = new Date(editEndDate);
                }
                if (data.startDate) {
                    var editStartDate = dateFilter(data.startDate, scope.df);
                    data.startDate = new Date(editStartDate);
                }
                if (data.status) {
                    if (data.status == 'ACTIVE') {
                        data.status = 300;
                    } else {
                        data.status = 400;
                    }
                }
                scope.formData = {
                    name: data.name,
                    officeId: data.officeId,
                    description: data.description,
                    status: data.status,
                    endDate: data.endDate,
                    startDate: data.startDate
                }
            });


            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                var reqDate = dateFilter(scope.formData.startDate, scope.df);
                var endDate = dateFilter(scope.formData.endDate, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.startDate = reqDate;
                this.formData.endDate = endDate;
                resourceFactory.tellerResource.update({'tellerId': routeParams.id}, this.formData, function (data) {
                    location.path('/viewtellers/' + data.resourceId);

                });
            };
        }
    });
    mifosX.ng.application.controller('EditTellerController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.EditTellerController]).run(function ($log) {
        $log.info("EditTellerController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        TellersController: function (scope, resourceFactory, location) {

            scope.tellers = [];
            var idToNodeMap = {};

            scope.TellersPerPage = 15;
            resourceFactory.tellerResource.getAllTellers(function (data) {
                scope.tellers = data;
            });

            scope.routeTo = function (id) {
                location.path('/viewtellers/' + id);
            };

            scope.routeToEdit = function (id) {
                location.path('/viewtellers/' + id);
            };

            scope.routeToCashiers = function (id) {
                location.path('/tellers/' + id + '/cashiers/');
            };

            scope.routeToDelete = function(id){
                    resourceFactory.tellerResource.delete({
                        tellerId: id},function(data){
                        resourceFactory.tellerResource.getAllTellers(function (data) {
                            scope.tellers = data;
                        });
                        location.path('/tellers');
                    });
            };
            /*scope.delete = function (tellerId, cashierId) {
                resourceFactory.tellerCashierResource.delete({tellerId: tellerId, cashierId: cashierId}, function (data) {
                    location.path('/tellers/' + tellerId + "/cashiers/");
                });

            };*/

            scope.deepCopy = function (obj) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    var out = [], i = 0, len = obj.length;
                    for (; i < len; i++) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                if (typeof obj === 'object') {
                    var out = {}, i;
                    for (i in obj) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                return obj;
            }



        }
    });
    mifosX.ng.application.controller('TellersController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.TellersController]).run(function ($log) {
        $log.info("TellersController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewCashierController: function (scope, routeParams, route, location, resourceFactory) {
            resourceFactory.tellerCashierResource.getCashier({tellerId: routeParams.tellerId, cashierId:routeParams.cashierId}, function (data) {
                scope.cashier = data;
            });
        }

    });

    mifosX.ng.application.controller('ViewCashierController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', mifosX.controllers.ViewCashierController]).run(function ($log) {
        $log.info("ViewCashierController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewCashiersForTellerController: function (scope, routeParams, route, location, resourceFactory) {

            var requestParams = {};

            if (routeParams.tellerId) {
                requestParams.tellerId = routeParams.tellerId;
            }

            resourceFactory.tellerCashierResource.getAllCashiersForTeller({tellerId: routeParams.tellerId}, function (data) {
                scope.cashiersForTeller = data;
            });

            resourceFactory.currencyConfigResource.get({fields: 'selectedCurrencyOptions'}, function (data) {
                scope.currencyCode = data.selectedCurrencyOptions[0].code;
            });

            var idToNodeMap = {};
            scope.routeTo = function (tellerId, cashierId) {
                location.path('/tellers/' + tellerId + '/cashiers/' + cashierId);
            };

            scope.delete = function (tellerId, cashierId) {
                resourceFactory.tellerCashierResource.delete({tellerId: tellerId, cashierId: cashierId}, function (data) {
                    location.path('/tellers/' + tellerId + '/cashiers/');
                });
            };

            scope.routeToView = function (tellerId, cashierId) {
                    location.path('/tellers/' + tellerId + "/cashiers/" + cashierId);
            };

            scope.allocate = function (tellerId, cashierId) {
                location.path('/tellers/' + tellerId + "/cashiers/" + cashierId + "/actions/allocate/");
            };
            scope.settle = function (tellerId, cashierId) {
                location.path('/tellers/' + tellerId + "/cashiers/" + cashierId + "/actions/settle/");
            };
            scope.transactions = function (tellerId, cashierId) {
                location.path('/tellers/' + tellerId + "/cashiers/" + cashierId + "/txns/" + scope.currencyCode );
            };

            scope.compare = function (x, y) {
                    var objectsAreSame = true;
                    for(var propertyName in x) {
                    if(x[propertyName] !== y[propertyName]) {
                        objectsAreSame = false;
                        break;
                    }
                }
                return objectsAreSame;
            };

            scope.deepCopy = function (obj) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    var out = [], i = 0, len = obj.length;
                    for (; i < len; i++) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                if (typeof obj === 'object') {
                    var out = {}, i;
                    for (i in obj) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                return obj;
            }
        }
    });
    mifosX.ng.application.controller('ViewCashiersForTellerController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', mifosX.controllers.ViewCashiersForTellerController]).run(function ($log) {
        $log.info("ViewCashiersForTellerController initialized");
    });
} (mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewTellerController: function (scope, routeParams, route, location, resourceFactory) {
            resourceFactory.tellerResource.get({tellerId: routeParams.id}, function (data) {
                scope.teller = data;
            })
        }

    });
    mifosX.ng.application.controller('ViewTellerController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', mifosX.controllers.ViewTellerController]).run(function ($log) {
        $log.info("ViewTellerController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateEmployeeController: function (scope, resourceFactory, location, dateFilter) {
            scope.offices = [];
            scope.restrictDate = new Date();
            resourceFactory.officeResource.getAllOfficesInAlphabeticalOrder(function (data) {
                scope.offices = data;
                scope.formData = {
                    isLoanOfficer: true,
                    officeId: scope.offices[0].id,
                };
            });

             scope.minDat = function() {
                 for(var i=0;i<scope.offices.length;i++) {
                     if ((scope.offices[i].id) === (scope.formData.officeId)) {
                         return scope.offices[i].openingDate;
                     }
                 }
                };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                var joiningDate = dateFilter(scope.formData.joiningDate, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.joiningDate = joiningDate;
                resourceFactory.employeeResource.save(this.formData, function (data) {
                    location.path('/viewemployee/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateEmployeeController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.CreateEmployeeController]).run(function ($log) {
        $log.info("CreateEmployeeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateOfficeController: function (scope, resourceFactory, location, dateFilter) {
            scope.offices = [];
            scope.first = {};
            scope.first.date = new Date();
            scope.restrictDate = new Date();
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
                scope.formData = {
                    parentId: scope.offices[0].id
                }
            });

             scope.minDat = function() {
                 for(var i=0;i<scope.offices.length;i++) {
                     if ((scope.offices[i].id) === (scope.formData.parentId)) {
                         return scope.offices[i].openingDate;
                     }
                 }
                };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.openingDate = reqDate;
                resourceFactory.officeResource.save(this.formData, function (data) {
                    location.path('/viewoffice/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateOfficeController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.CreateOfficeController]).run(function ($log) {
        $log.info("CreateOfficeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreatePaymentTypeController: function (scope, routeParams, resourceFactory, location, $uibModal, route) {

            scope.formData = {};
            scope.isCashPayment =true;


            scope.submit = function () {
                this.formData.isCashPayment = this.formData.isCashPayment || false;
                resourceFactory.paymentTypeResource.save(this.formData, function (data) {
                    location.path('/viewpaymenttype/');
                });
            };

        }
    });
    mifosX.ng.application.controller('CreatePaymentTypeController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', '$route', mifosX.controllers.CreatePaymentTypeController]).run(function ($log) {
        $log.info("CreatePaymentTypeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateRoleController: function (scope, location, resourceFactory) {
            scope.formData = {};
            scope.submit = function () {
                resourceFactory.roleResource.save(this.formData, function (data) {
                    location.path("/admin/viewrole/" + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateRoleController', ['$scope', '$location', 'ResourceFactory', mifosX.controllers.CreateRoleController]).run(function ($log) {
        $log.info("CreateRoleController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateUserController: function (scope, resourceFactory, location) {
            scope.offices = [];
            scope.available = [];
            scope.selected = [];
            scope.selectedRoles = [] ;
            scope.availableRoles = [];
            scope.formData = {
                sendPasswordToEmail: true,
                roles: []
            };
            resourceFactory.userTemplateResource.get(function (data) {
                scope.offices = data.allowedOffices;
                scope.availableRoles = data.availableRoles;
            });

            scope.addRole = function () {
                for (var i in this.available) {
                    for (var j in scope.availableRoles) {
                        if (scope.availableRoles[j].id == this.available[i]) {
                            var temp = {};
                            temp.id = this.available[i];
                            temp.name = scope.availableRoles[j].name;
                            scope.selectedRoles.push(temp);
                            scope.availableRoles.splice(j, 1);
                        }
                    }
                }
                //We need to remove selected items outside of above loop. If we don't remove, we can see empty item appearing
                //If we remove available items in above loop, all items will not be moved to selectedRoles
                for (var i in this.available) {
                    for (var j in scope.selectedRoles) {
                        if (scope.selectedRoles[j].id == this.available[i]) {
                            scope.available.splice(i, 1);
                        }
                    }
                }
            };
            scope.removeRole = function () {
                for (var i in this.selected) {
                    for (var j in scope.selectedRoles) {
                        if (scope.selectedRoles[j].id == this.selected[i]) {
                            var temp = {};
                            temp.id = this.selected[i];
                            temp.name = scope.selectedRoles[j].name;
                            scope.availableRoles.push(temp);
                            scope.selectedRoles.splice(j, 1);
                        }
                    }
                }
                //We need to remove selected items outside of above loop. If we don't remove, we can see empty item appearing
                //If we remove selected items in above loop, all items will not be moved to availableRoles
                for (var i in this.selected) {
                    for (var j in scope.availableRoles) {
                        if (scope.availableRoles[j].id == this.selected[i]) {
                            scope.selected.splice(i, 1);
                        }
                    }
                }
            };

            scope.getOfficeStaff = function(){
                resourceFactory.employeeResource.getAllEmployees({officeId:scope.formData.officeId},function (data) {
                    scope.staffs = data;
                });
            };

            scope.submit = function () {
                for (var i in scope.selectedRoles) {
                    scope.formData.roles.push(scope.selectedRoles[i].id) ;
                }
                resourceFactory.userListResource.save(this.formData, function (data) {
                    location.path('/viewuser/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateUserController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.CreateUserController]).run(function ($log) {
        $log.info("CreateUserController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CurrencyConfigController: function (scope, resourceFactory, route) {

            scope.selectedCurrOptions = [];
            scope.allCurrOptions = [];
            scope.hideview = false;
            scope.selected = undefined;

            resourceFactory.currencyConfigResource.get(function (data) {
                scope.selectedCurrOptions = data.selectedCurrencyOptions;
                scope.allCurrOptions = data.currencyOptions;

            });

            scope.deleteCur = function (code) {
                for (var i = 0; i < scope.selectedCurrOptions.length; i++) {
                    if (scope.selectedCurrOptions[i].code == code) {
                        scope.selectedCurrOptions.splice(i, 1);  //removes 1 element at position i
                        break;
                    }
                }
            };

            scope.addCur = function () {
                if (scope.selected != undefined && scope.selected.hasOwnProperty('code')) {
                    scope.selectedCurrOptions.push(scope.selected);
                    for (var i = 0; i < scope.allCurrOptions.length; i++) {
                        if (scope.allCurrOptions[i].code == scope.selected.code) {
                            scope.allCurrOptions.splice(i, 1);  //removes 1 element at position i
                            break;
                        }
                    }
                }
                scope.selected = undefined;
            };

            scope.submit = function () {
                var currencies = [];
                var curr = {};
                for (var i = 0; i < scope.selectedCurrOptions.length; i++) {
                    currencies.push(scope.selectedCurrOptions[i].code);
                }
                curr["currencies"] = currencies;
                resourceFactory.currencyConfigResource.upd(curr, function (data) {
                    route.reload();
                });

            };

            scope.cancel = function () {
                route.reload();
            }

        }
    });
    mifosX.ng.application.controller('CurrencyConfigController', ['$scope', 'ResourceFactory', '$route', mifosX.controllers.CurrencyConfigController]).run(function ($log) {
        $log.info("CurrencyConfigController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditEmployeeController: function (scope, routeParams, resourceFactory, location, dateFilter) {
            scope.offices = [];
            scope.restrictDate = new Date();

            resourceFactory.employeeResource.get({staffId: routeParams.id, template: 'true'}, function (data) {
                scope.offices = data.allowedOffices;
                scope.staffId = data.id;
                if (data.joiningDate) {
                    var editDate = dateFilter(data.joiningDate, scope.df);
                    data.joiningDate = new Date(editDate);
                }
                scope.formData = {
                    firstname: data.firstname,
                    lastname: data.lastname,
                    isLoanOfficer: data.isLoanOfficer,
                    officeId: data.officeId,
                    mobileNo: data.mobileNo,
                    isActive: data.isActive,
                    joiningDate: data.joiningDate
                };

            });

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                var joiningDate = dateFilter(scope.formData.joiningDate, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.joiningDate = joiningDate;
                resourceFactory.employeeResource.update({'staffId': routeParams.id}, this.formData, function (data) {
                    location.path('/viewemployee/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditEmployeeController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.EditEmployeeController]).run(function ($log) {
        $log.info("EditEmployeeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditHolidayController: function (scope, routeParams, resourceFactory, location, dateFilter) {
            scope.formData = {};
            scope.date = {};
            scope.restrictDate = new Date();
            scope.specificRescheduleType = 2;

            resourceFactory.holValueResource.getholvalues({holId: routeParams.id}, function (data) {
                scope.holiday = data;
                 resourceFactory.holidayTemplateResource.get(function(repaymentSchedulingRulesData){
                    scope.repaymentSchedulingRules = repaymentSchedulingRulesData;
                    for(var i in scope.repaymentSchedulingRules){
                        if(scope.repaymentSchedulingRules[i].id == data.reschedulingType){
                            scope.reschedulingType = scope.repaymentSchedulingRules[i]; 
                        }
                    }
                    
                });
                scope.formData = {
                    name: data.name,
                    description: data.description,
                };
                scope.formData.reschedulingType = data.reschedulingType;

                scope.holidayStatusActive = false;
                if (data.status.value === "Active") {
                    scope.holidayStatusActive = true;
                }

                var fromDate = dateFilter(data.fromDate, scope.df);
                scope.date.fromDate = new Date(fromDate);

                var toDate = dateFilter(data.toDate, scope.df);
                scope.date.toDate = new Date(toDate);

                if(data.reschedulingType == scope.specificRescheduleType){
                    var repaymentsRescheduledTo = dateFilter(data.repaymentsRescheduledTo, scope.df);
                    scope.date.repaymentsRescheduledTo = new Date(repaymentsRescheduledTo);
                }  

            });

            scope.selectRescheduleType = function(data){
                if(data && data.id == scope.specificRescheduleType){
                    scope.date.repaymentsRescheduledTo = new Date();
                }else{
                    scope.date.repaymentsRescheduledTo = undefined;
                }
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                if (!scope.holidayStatusActive) {
                    this.formData.fromDate = dateFilter(scope.date.fromDate, scope.df);
                    this.formData.toDate = dateFilter(scope.date.toDate, scope.df);
                }

                if(scope.reschedulingType.id == scope.specificRescheduleType){
                    this.formData.repaymentsRescheduledTo = dateFilter(scope.date.repaymentsRescheduledTo, scope.df);
                }
                var rescheduleId = scope.reschedulingType.id
                this.formData.reschedulingType = rescheduleId;

                resourceFactory.holValueResource.update({holId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewholiday/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditHolidayController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.EditHolidayController]).run(function ($log) {
        $log.info("EditHolidayController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditOfficeController: function (scope, routeParams, resourceFactory, location, dateFilter) {
            scope.formData = {};
            scope.first = {};
            scope.restrictDate = new Date();
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.parentId = data[0].id;
            });
            resourceFactory.officeResource.get({officeId: routeParams.id, template: 'true'}, function (data) {
                scope.offices = data.allowedParents;
                scope.id = data.id;
                if (data.openingDate) {
                    var editDate = dateFilter(data.openingDate, scope.df);
                    scope.first.date = new Date(editDate);
                }
                scope.formData =
                {
                    name: data.name,
                    externalId: data.externalId,
                    parentId: data.parentId
                }
            });

            scope.submit = function () {
                var reqDate = dateFilter(scope.first.date, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.openingDate = reqDate;
                resourceFactory.officeResource.update({'officeId': routeParams.id}, this.formData, function (data) {
                    location.path('/viewoffice/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditOfficeController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.EditOfficeController]).run(function ($log) {
        $log.info("EditOfficeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditPasswordPreferencesController: function (scope, routeParams, resourceFactory, location, dateFilter) {
            scope.formData = {};
            resourceFactory.passwordPrefTemplateResource.get(function(data){
                scope.dataOptions = data;
                for(var i in data){
                    if(data[i].active == true){
                        scope.formData.validationPolicyId = data[i].id;
                    }
                }
            });

            scope.submit = function(){
                resourceFactory.passwordPrefResource.put(scope.formData, function(data){
                    location.path('/organization/');
                });
            }
        }
        });
    mifosX.ng.application.controller('EditPasswordPreferencesController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.EditPasswordPreferencesController]).run(function ($log) {
        $log.info("EditPasswordPreferencesController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditPaymentTypeController: function (scope, routeParams, resourceFactory, location, $uibModal, route) {
            /*scope.formData = {};*/
            resourceFactory.paymentTypeResource.get({paymentTypeId: routeParams.id}, function (data) {
                scope.formData = {
                    name: data.name,
                    description: data.description,
                    isCashPayment: data.isCashPayment,
                    position : data.position
                };
            });

            scope.submit = function () {
                this.formData.isCashPayment = this.formData.isCashPayment || false;
                resourceFactory.paymentTypeResource.update({paymentTypeId: routeParams.id},this.formData, function (data) {
                    location.path('/viewpaymenttype/');
                });
            };

        }
    });
    mifosX.ng.application.controller('EditPaymentTypeController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', '$route', mifosX.controllers.EditPaymentTypeController]).run(function ($log) {
        $log.info("EditPaymentTypeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditUserController: function (scope, routeParams, resourceFactory, location) {

            scope.formData = {};
            scope.offices = [];
            scope.available = [];
            scope.selected = [];
            scope.selectedRoles = [] ;
            scope.availableRoles = [];

            scope.user = [];
            scope.formData.roles = [] ;

            resourceFactory.userListResource.get({userId: routeParams.id, template: 'true'}, function (data) {
                scope.formData.username = data.username;
                scope.formData.firstname = data.firstname;
                scope.formData.lastname = data.lastname;
                scope.formData.email = data.email;
                scope.formData.officeId = data.officeId;
                scope.getOfficeStaff();
                if(data.staff){
                    scope.formData.staffId = data.staff.id;
                }
                scope.selectedRoles=data.selectedRoles;
                scope.availableRoles = data.availableRoles ;


                scope.userId = data.id;
                scope.offices = data.allowedOffices;
                //scope.availableRoles = data.availableRoles.concat(data.selectedRoles);
                scope.formData.passwordNeverExpires = data.passwordNeverExpires;
            });
            scope.getOfficeStaff = function(){
                resourceFactory.employeeResource.getAllEmployees({officeId:scope.formData.officeId},function (staffs) {
                    scope.staffs = staffs;
                });
            };

            scope.addRole = function () {
                for (var i in this.available) {
                    for (var j in scope.availableRoles) {
                        if (scope.availableRoles[j].id == this.available[i]) {
                            var temp = {};
                            temp.id = this.available[i];
                            temp.name = scope.availableRoles[j].name;
                            scope.selectedRoles.push(temp);
                            scope.availableRoles.splice(j, 1);
                        }
                    }
                }
                //We need to remove selected items outside of above loop. If we don't remove, we can see empty item appearing
                //If we remove available items in above loop, all items will not be moved to selectedRoles
                for (var i in this.available) {
                    for (var j in scope.selectedRoles) {
                        if (scope.selectedRoles[j].id == this.available[i]) {
                            scope.available.splice(i, 1);
                        }
                    }
                }
            };
            scope.removeRole = function () {
                for (var i in this.selected) {
                    for (var j in scope.selectedRoles) {
                        if (scope.selectedRoles[j].id == this.selected[i]) {
                            var temp = {};
                            temp.id = this.selected[i];
                            temp.name = scope.selectedRoles[j].name;
                            scope.availableRoles.push(temp);
                            scope.selectedRoles.splice(j, 1);
                        }
                    }
                }
                //We need to remove selected items outside of above loop. If we don't remove, we can see empty item appearing
                //If we remove selected items in above loop, all items will not be moved to availableRoles
                for (var i in this.selected) {
                    for (var j in scope.availableRoles) {
                        if (scope.availableRoles[j].id == this.selected[i]) {
                            scope.selected.splice(i, 1);
                        }
                    }
                }
            };

            scope.submit = function () {
                for (var i in scope.selectedRoles) {
                    scope.formData.roles.push(scope.selectedRoles[i].id) ;
                }
                resourceFactory.userListResource.update({'userId': scope.userId}, this.formData, function (data) {
                    location.path('/viewuser/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditUserController', ['$scope', '$routeParams', 'ResourceFactory', '$location', mifosX.controllers.EditUserController]).run(function ($log) {
        $log.info("EditUserController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditWorkingDaysController: function (scope, routeParams, resourceFactory, location, dateFilter, $filter) {
            scope.workingDays = [];
            scope.selectedRepaymentType = "";
            scope.compareWith = [
                {name: "MO", value: "Monday", code: "day.monday"},
                {name: "TU", value: "Tuesday", code: "day.tuesday"},
                {name: "WE", value: "Wednesday", code: "day.wednesday"},
                {name: "TH", value: "Thursday", code: "day.thursday"},
                {name: "FR", value: "Friday", code: "day.friday"},
                {name: "SA", value: "Saturday", code: "day.saturday"},
                {name: "SU", value: "Sunday", code: "day.sunday"}
            ];
            resourceFactory.workingDaysResource.get(function (data) {
                scope.selectedRepaymentType = data.repaymentRescheduleType.id;
                scope.repaymentRescheduleOptions = data.repaymentRescheduleOptions ; //Good have template options as part of a single REST call
                scope.extendTermForDailyRepayments = data.extendTermForDailyRepayments;
                var temp = data.recurrence.split("=");
                var days = temp[3].split(",");

                for (var i in scope.compareWith) {
                    if (days.indexOf(scope.compareWith[i].name.toString()) > -1) {
                        scope.workingDays.push({
                            day: scope.compareWith[i].value,
                            code: scope.compareWith[i].code,
                            value: true
                        });
                    }
                    else {
                        scope.workingDays.push({
                            day: scope.compareWith[i].value,
                            code: scope.compareWith[i].code,
                            value: false
                        });
                    }
                }
            });

            scope.showLabel = function(day){
                if(day != "Monday"){
                    return true;
                }
                return false;
            };
            scope.submit = function () {
                this.formData = {};
                var stringFormat = "FREQ=WEEKLY;INTERVAL=1;BYDAY=";
                var selectedDays = "";
                for(var i in scope.workingDays) {
                    if (scope.workingDays[i].value == true &&
                        scope.workingDays[i].day.indexOf(scope.compareWith[i].value.toString()) > -1) {
                        if (selectedDays != "") {
                            selectedDays = selectedDays + ",";
                        }
                        selectedDays = selectedDays.concat(scope.compareWith[i].name);
                    }
                }
                if(selectedDays == ""){
                    selectedDays = ",";
                }
                this.formData.repaymentRescheduleType = scope.selectedRepaymentType ;
                this.formData.recurrence = 	stringFormat.concat(selectedDays);
                this.formData.locale = scope.optlang.code;
                this.formData.extendTermForDailyRepayments = scope.extendTermForDailyRepayments;
                resourceFactory.workingDaysResource.put(this.formData, function(data){
                    location.path('/organization/');
                })

            }

        }
    });
    mifosX.ng.application.controller('EditWorkingDaysController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', '$filter',  mifosX.controllers.EditWorkingDaysController]).run(function ($log) {
        $log.info("EditWorkingDaysController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EmployeeController: function (scope, resourceFactory, location) {
            scope.employees = [];
            scope.routeTo = function (id) {
                location.path('/viewemployee/' + id);
            };

            if (!scope.searchCriteria.employees) {
                scope.searchCriteria.employees = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.employees || '';

            scope.onFilter = function () {
                scope.searchCriteria.employees = scope.filterText;
                scope.saveSC();
            };

            scope.EmployeesPerPage = 15;
            scope.showActive = true;
            resourceFactory.employeeResource.getAllEmployees(function (data) {
                scope.employees = data;
            });
        }
    });
    mifosX.ng.application.controller('EmployeeController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.EmployeeController]).run(function ($log) {
        $log.info("EmployeeController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        EntityDatatableChecksController: function (scope, resourceFactory, location, dateFilter, translate, $uibModal, route) {
            scope.template = [];
            scope.formData = {};
            scope.first = {};
            scope.isCollapsed = true;
            scope.showdatefield = false;
            scope.repeatEvery = false;
            scope.first.date = new Date();
            scope.translate = translate;
            scope.criterias = [];
            scope.entityDatatableChecksPerPage = 15;
            scope.entityDatatableChecks = [];
            scope.formParams = {};
            scope.formParams.offset = 0;
            scope.formParams.limit = scope.entityDatatableChecksPerPage;

            scope.routeTo = function (id) {
                location.path('/viewentitydatatablecheck/' + id);
            };

            if (!scope.searchCriteria.criterias) {
                scope.searchCriteria.criterias = null;
                scope.saveSC();
            }

            scope.getResultsPage = function (pageNumber) {
                scope.formParams.offset = ((pageNumber - 1) * scope.entityDatatableChecksPerPage);
                scope.formParams.limit = scope.entityDatatableChecksPerPage;
                resourceFactory.entityDatatableChecksResource.getAll(scope.formParams, function (data) {
                    scope.entityDatatableChecks = data.pageItems;
                    scope.totalEntityDatatableChecks = data.totalFilteredRecords;
                });
            }

            scope.initPage = function () {
                resourceFactory.entityDatatableChecksResource.getAll(scope.formParams, function (data) {
                    scope.entityDatatableChecks = data.pageItems;
                    scope.totalEntityDatatableChecks = data.totalFilteredRecords;
                });
            }

            scope.initPage();

            scope.filterText = scope.searchCriteria.criterias || '';

            scope.onFilter = function () {
                scope.searchCriteria.criterias = scope.filterText;
                scope.saveSC();
            };

            scope.createDatatableCheck = function () {
                $uibModal.open({
                    templateUrl: 'createentitydatatablecheck.html',
                    controller: CreateDataTableCheckCtrl
                });
            };

            var CreateDataTableCheckCtrl = function ($scope, $uibModalInstance) {
                $scope.checkForm = {};
                $scope.templateData = {};
                $scope.entities = [];
                $scope.statusList = [];
                $scope.statusClient = [];
                $scope.statusGroup = [];
                $scope.statusSavings = [];
                $scope.statusLoans = [];
                $scope.datatables = [];
                $scope.products = [];
                $scope.loanProductDatas = [];
                $scope.savingsProductDatas = [];
                $scope.filteredDatatables = [];

                resourceFactory.entityDatatableChecksResource.get({additionalParam: 'template'}, function (data) {
                    $scope.templateData = data;
                    $scope.entities = data.entities;
                    $scope.statusClient = data.statusClient;
                    $scope.statusGroup = data.statusGroup;
                    $scope.statusSavings = data.statusSavings;
                    $scope.statusLoans = data.statusLoans;
                    $scope.datatables = data.datatables;
                    $scope.loanProductDatas = data.loanProductDatas;
                    $scope.savingsProductDatas = data.savingsProductDatas;
                });

                $scope.create = function () {
                    //$scope.formData = {};
                    resourceFactory.entityDatatableChecksResource.save($scope.checkForm, function (data) {
                        $uibModalInstance.close('create');
                        route.reload();
                    });
                };

                $scope.filterByEntity = function() {
                    $scope.filteredDatatables = [];
                    angular.forEach($scope.datatables, function (datatable) {
                        if (!_.isNull(datatable.entity) && !_.isUndefined(datatable.entity) && datatable.entity === $scope.checkForm.entity) {
                            $scope.filteredDatatables.push(datatable);
                        }
                    });
                };

                $scope.updateDependencies = function () {
                    $scope.filterByEntity();
                    if ($scope.checkForm.entity === 'm_client') {
                        $scope.statusList = $scope.statusClient;
                        $scope.products = [];
                    } else if ($scope.checkForm.entity === 'm_loan') {
                        $scope.statusList = $scope.statusLoans;
                        $scope.products = $scope.loanProductDatas;
                    } else if ($scope.checkForm.entity === 'm_group') {
                        $scope.statusList = $scope.statusGroup;
                        $scope.products = [];
                    } else if ($scope.checkForm.entity === 'm_savings_account') {
                        $scope.statusList = $scope.statusSavings;
                        $scope.products = $scope.savingsProductDatas;
                    } else {
                        $scope.statusList = [];
                        $scope.products = [];
                    }
                }

                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.deleteDataTableCheck = function (id) {
                $uibModal.open({
                    templateUrl: 'deleteentitydatatablecheck.html',
                    controller: DeleteDataTableCheckCtrl,
                    resolve: {
                        entityDatatableCheckId: function () {
                            return id;
                        }
                    }
                });
            };

            var DeleteDataTableCheckCtrl = function ($scope, $uibModalInstance, entityDatatableCheckId) {
                $scope.delete = function () {
                    resourceFactory.entityDatatableChecksResource.delete({entityDatatableCheckId: entityDatatableCheckId}, function (data) {
                        $uibModalInstance.close('delete');
                        route.reload();
                    });
                };

                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            }
        }
    });
    mifosX.ng.application.controller('EntityDatatableChecksController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$translate', '$uibModal', '$route', mifosX.controllers.EntityDatatableChecksController]).run(function ($log) {
        $log.info("EntityDatatableChecksController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        HolController: function (scope, resourceFactory, location) {
            scope.holidays = [];
            scope.offices = [];
            scope.formData = {};

            scope.routeTo = function (id) {
                location.path('/viewholiday/' + id);
            };

            if (!scope.searchCriteria.holidays) {
                scope.searchCriteria.holidays = [null, null];
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.holidays[0] || '';
            scope.formData.officeId = scope.searchCriteria.holidays[1];

            scope.onFilter = function () {
                scope.searchCriteria.holidays[0] = scope.filterText;
                scope.saveSC();
            };

            scope.HolidaysPerPage =15;

            resourceFactory.holResource.getAllHols({officeId: scope.formData.officeId}, function (data) {
                scope.holidays = data;
            });

            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = data;
            });

            scope.getHolidays = function () {
                scope.searchCriteria.holidays[1] = scope.formData.officeId;
                scope.saveSC();
                resourceFactory.holResource.getAllHols({officeId: scope.formData.officeId}, function (data) {
                    scope.holidays = data;
                });
            };
        }
    });
    mifosX.ng.application.controller('HolController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.HolController]).run(function ($log) {
        $log.info("HolController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        MakerCheckerController: function (scope, route, resourceFactory) {

            scope.permissions = [];
            scope.groupings = [];
            scope.formData = {};
            scope.isDisabled = true;
            var tempPermissionUIData = [];

            resourceFactory.permissionResource.get({makerCheckerable: true}, function (data) {

                var currentGrouping = "";
                for (var i in data) {
                    if (data[i].grouping != currentGrouping) {
                        currentGrouping = data[i].grouping;
                        scope.groupings.push(currentGrouping);
                        var newEntry = { permissions: [] };
                        tempPermissionUIData[currentGrouping] = newEntry;
                    }
                    var temp = { code: data[i].code};
                    scope.formData[data[i].code] = data[i].selected;
                    tempPermissionUIData[currentGrouping].permissions.push(temp);
                }
                scope.showPermissions = function (grouping) {
                    if (scope.previousGrouping) {
                        tempPermissionUIData[scope.previousGrouping] = scope.permissions;
                    }
                    scope.permissions = tempPermissionUIData[grouping];
                    scope.previousGrouping = grouping;
                };
                //by default show portfolio setting
                scope.showPermissions('portfolio');

                scope.permissionName = function (name) {
                    name = name || "";
                    //replace '_' with ' '
                    name = name.replace(/_/g, " ");
                    //for reorts replace read with view
                    if (scope.previousGrouping == 'report') {
                        name = name.replace(/READ/g, "View");
                    }
                    return name;
                };

                scope.formatName = function (string) {
                    string = string || "";
                    if (string.indexOf('portfolio_') > -1) {
                        string = string.replace("portfolio_", "");
                    }
                    if (string.indexOf('transaction_') > -1) {
                        var temp = string.split("_");
                        string = temp[1] + " " + temp[0].charAt(0).toUpperCase() + temp[0].slice(1) + "s";
                    }
                    string = string.charAt(0).toUpperCase() + string.slice(1);
                    return string;
                };
            });

            scope.cancel = function () {
                scope.isDisabled = true;
            };

            scope.editMCTasks = function () {
                scope.isDisabled = false;
            };

            scope.submit = function () {
                var permissionData = {};
                permissionData.permissions = this.formData;
                resourceFactory.permissionResource.update({makerCheckerable: true}, permissionData, function (data) {
                    route.reload();
                    scope.isDisabled = true;
                });
            };
        }
    });
    mifosX.ng.application.controller('MakerCheckerController', ['$scope', '$route', 'ResourceFactory', mifosX.controllers.MakerCheckerController]).run(function ($log) {
        $log.info("MakerCheckerController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ManageFundsController: function (scope, location, resourceFactory) {
            scope.funderror = [];
            scope.formData = [];
            scope.addfunderror = false;
            resourceFactory.fundsResource.getAllFunds(function (data) {
                scope.funds = data;
            });
            scope.editFund = function (fund, name, id) {
                fund.edit = !fund.edit;
                scope.formData[id] = name;
            };
            scope.saveFund = function (id) {
              if(this.formData[id])
              {
                scope.funderror[id] = false;
                resourceFactory.fundsResource.update({fundId: id}, {'name': this.formData[id]}, function (data) {
                    location.path('/managefunds');
                });
              } else {
                scope.funderror[id] = true;
              }
            };
            scope.addFund = function () {
                if (scope.newfund != undefined) {
                    scope.addfunderror = false;
                    resourceFactory.fundsResource.save({'name': scope.newfund}, function (data) {
                        location.path('/managefunds');
                    });
                } else {
                    scope.addfunderror = true;
                }

                scope.newfund = undefined;
            };

        }
    });
    mifosX.ng.application.controller('ManageFundsController', ['$scope', '$location', 'ResourceFactory', mifosX.controllers.ManageFundsController]).run(function ($log) {
        $log.info("ManageFundsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        OfficesController: function (scope, resourceFactory, location) {
            scope.offices = [];
            scope.isTreeView = false;
            var idToNodeMap = {};

            scope.routeTo = function (id) {
                location.path('/viewoffice/' + id);
            };

            if (!scope.searchCriteria.offices) {
                scope.searchCriteria.offices = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.offices || '';

            scope.onFilter = function () {
                scope.searchCriteria.offices = scope.filterText;
                scope.saveSC();
            };

            scope.deepCopy = function (obj) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    var out = [], i = 0, len = obj.length;
                    for (; i < len; i++) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                if (typeof obj === 'object') {
                    var out = {}, i;
                    for (i in obj) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                return obj;
            }

            scope.OfficesPerPage =15;
            resourceFactory.officeResource.getAllOffices(function (data) {
                scope.offices = scope.deepCopy(data);
                for (var i in data) {
                    data[i].children = [];
                    idToNodeMap[data[i].id] = data[i];
                }
                function sortByParentId(a, b) {
                    return a.parentId - b.parentId;
                }

                data.sort(sortByParentId);

                var root = [];
                for (var i = 0; i < data.length; i++) {
                    var currentObj = data[i];
                    if (currentObj.children) {
                        currentObj.collapsed = "true";
                    }
                    if (typeof currentObj.parentId === "undefined") {
                        root.push(currentObj);
                    } else {
                        parentNode = idToNodeMap[currentObj.parentId];
                        parentNode.children.push(currentObj);
                    }
                }
                scope.treedata = root;
            });
        }
    });
    mifosX.ng.application.controller('OfficesController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.OfficesController]).run(function ($log) {
        $log.info("OfficesController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateProvisioningCriteriaController: function (scope, resourceFactory, location, dateFilter, translate) {
            scope.available = [];
            scope.selected = [];
            scope.selectedloanproducts = [] ;
            scope.template = [];
            scope.formData = {};
            scope.translate = translate;
            scope.isRequired = false ;

            resourceFactory.provisioningcriteria.template({criteriaId:'template'},function (data) {
                scope.template = data;
                scope.allloanproducts = data.loanProducts ;
                scope.definitions = data.definitions;
                scope.liabilityaccounts = data.glAccounts;
                scope.expenseaccounts = data.glAccounts;
            });

            scope.addLoanProduct = function () {
                for (var i in this.available) {
                    for (var j in scope.allloanproducts) {
                        if (scope.allloanproducts[j].id == this.available[i]) {
                            var temp = {};
                            temp.id = this.available[i];
                            temp.name = scope.allloanproducts[j].name;
                            temp.includeInBorrowerCycle = scope.allloanproducts[j].includeInBorrowerCycle;
                            scope.selectedloanproducts.push(temp);
                            scope.allloanproducts.splice(j, 1);
                        }
                    }
                }
            };
            scope.removeLoanProduct = function () {
                for (var i in this.selected) {
                    for (var j in scope.selectedloanproducts) {
                        if (scope.selectedloanproducts[j].id == this.selected[i]) {
                            var temp = {};
                            temp.id = this.selected[i];
                            temp.name = scope.selectedloanproducts[j].name;
                            temp.includeInBorrowerCycle = scope.selectedloanproducts[j].includeInBorrowerCycle;
                            scope.allloanproducts.push(temp);
                            scope.selectedloanproducts.splice(j, 1);
                        }
                    }
                }
            };

            scope.submit = function () {
                this.isRequired = true ;
                this.formData.locale = scope.optlang.code;
                this.formData.loanProducts = scope.selectedloanproducts ;
                this.formData.definitions = scope.definitions ;
                resourceFactory.provisioningcriteria.post(this.formData, function (data) {
                    location.path('/viewprovisioningcriteria/' + data.resourceId);
                });
            };

            scope.doFocus = function(index) {
                if(index > 0 && !scope.definitions[index].minAge) {
                    scope.definitions[index].minAge = parseInt(scope.definitions[index-1].maxAge)+1 ;
                }
            }

            scope.doBlur = function(index) {
                //console.log("Blur") ;
            }
        }
    });
    mifosX.ng.application.controller('CreateProvisioningCriteriaController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$translate', mifosX.controllers.CreateProvisioningCriteriaController]).run(function ($log) {
        $log.info("CreateProvisioningCriteriaController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditProvisioningCriteriaController: function (scope, resourceFactory, routeParams, location, dateFilter, translate) {
            scope.available = [];
            scope.selected = [];
            scope.template = [];
            scope.formData = {};
            scope.translate = translate;

            resourceFactory.provisioningcriteria.get({criteriaId: routeParams.criteriaId, template:'true'}, function (data) {
                scope.selectedloanproducts = data.selectedLoanProducts;
                scope.allloanproducts = data.loanProducts ;
                scope.definitions = data.definitions;
                scope.criteriaName = data.criteriaName;
                scope.criteriaId = data.criteriaId;
                scope.liabilityaccounts = data.glAccounts;
                scope.expenseaccounts = data.glAccounts;
            });

            scope.addLoanProduct = function () {
                for (var i in this.available) {
                    for (var j in scope.allloanproducts) {
                        if (scope.allloanproducts[j].id == this.available[i]) {
                            var temp = {};
                            temp.id = this.available[i];
                            temp.name = scope.allloanproducts[j].name;
                            temp.includeInBorrowerCycle = scope.allloanproducts[j].includeInBorrowerCycle;
                            scope.selectedloanproducts.push(temp);
                            scope.allloanproducts.splice(j, 1);
                        }
                    }
                }
            };
            scope.removeLoanProduct = function () {
                for (var i in this.selected) {
                    for (var j in scope.selectedloanproducts) {
                        if (scope.selectedloanproducts[j].id == this.selected[i]) {
                            var temp = {};
                            temp.id = this.selected[i];
                            temp.name = scope.selectedloanproducts[j].name;
                            temp.includeInBorrowerCycle = scope.selectedloanproducts[j].includeInBorrowerCycle;
                            scope.allloanproducts.push(temp);
                            scope.selectedloanproducts.splice(j, 1);
                        }
                    }
                }
            };


            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.criteriaId = scope.criteriaId ;
                this.formData.criteriaName = scope.criteriaName ;
                this.formData.loanProducts = scope.selectedloanproducts ;
                this.formData.definitions = scope.definitions;
                resourceFactory.provisioningcriteria.put({criteriaId: routeParams.criteriaId}, this.formData, function (data) {
                    location.path('/viewprovisioningcriteria/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditProvisioningCriteriaController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', '$translate', mifosX.controllers.EditProvisioningCriteriaController]).run(function ($log) {
        $log.info("EditProvisioningCriteriaController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewAllProvisoningCriteriaController: function (scope, resourceFactory, location, dateFilter, translate) {
            scope.template = [];
            scope.formData = {};
            scope.first = {};
            scope.isCollapsed = true;
            scope.showdatefield = false;
            scope.repeatEvery = false;
            scope.first.date = new Date();
            scope.translate = translate;
            scope.criterias = [];

            scope.routeTo = function (id) {
                location.path('/viewprovisioningcriteria/' + id);
            };

            if (!scope.searchCriteria.criterias) {
                scope.searchCriteria.criterias = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.criterias || '';

            scope.onFilter = function () {
                scope.searchCriteria.criterias = scope.filterText;
                scope.saveSC();
            };

            scope.ProvisioningPerPage = 15;
            resourceFactory.provisioningcriteria.getAll(function (data) {
                scope.criterias = data;
            });
        }
    });
    mifosX.ng.application.controller('ViewAllProvisoningCriteriaController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$translate', mifosX.controllers.ViewAllProvisoningCriteriaController]).run(function ($log) {
        $log.info("ViewAllProvisoningCriteriaController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewProvisioningCriteriaController: function (scope, routeParams, resourceFactory, location, $uibModal) {
            scope.charge = [];
            scope.choice = 0;
            var temp = "" ;
            var i = 0 ;
            resourceFactory.provisioningcriteria.get({criteriaId: routeParams.criteriaId}, function (data) {
                scope.loanproducts = data.loanProducts ;
                scope.definitions = data.definitions;
                scope.criterianame = data.criteriaName ;
                scope.criteriaId = data.criteriaId ;
                var length = data.loanProducts.length;
                for(i = 0 ; i < length; i++) {
                    temp = temp.concat(data.loanProducts[i].name) ;
                    if(i < (length-1)) {
                        temp = temp.concat(", ") ;
                    }
                }
            scope.formattedProductNames = temp ;
            });

            scope.deleteProvisionigCriteria = function () {
                $uibModal.open({
                    templateUrl: 'deletech.html',
                    controller: criteriaDeleteCtrl
                });
            };


            var criteriaDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.provisioningcriteria.delete({criteriaId: scope.criteriaId}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/viewallprovisionings/');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ViewProvisioningCriteriaController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', mifosX.controllers.ViewProvisioningCriteriaController]).run(function ($log) {
        $log.info("ViewProvisioningCriteriaController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        RoleController: function (scope, resourceFactory, location) {
            scope.roles = [];
            scope.routeTo = function (id) {
                location.path('/admin/viewrole/' + id);
            };

            scope.RolesPerPage = 15;
            resourceFactory.roleResource.getAllRoles({}, function (data) {
                scope.roles = data;
            });

            scope.isRoleEnable = function(value) {
                return value;
            };

            if (!scope.searchCriteria.rolesFilterText) {
                scope.searchCriteria.rolesFilterText = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.rolesFilterText || '';

            scope.onFilter = function () {
                scope.searchCriteria.rolesFilterText = scope.filterText;
                scope.saveSC();
            };
        }
    });
    mifosX.ng.application.controller('RoleController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.RoleController]).run(function ($log) {
        $log.info("RoleController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateSmsCampaignController: function (scope, WizardHandler, resourceFactory, location, http, dateFilter, API_VERSION, Upload, $rootScope, routeParams) {

            scope.reportParams = new Array();
            scope.reportDateParams = new Array();
            scope.reqFields = new Array();
            scope.reportTextParams = new Array();
            scope.reportData = {};
            scope.reportData.columnHeaders = [];
            scope.reportData.data = [];
            scope.submissionData = {};
            scope.minDate = new Date();
            scope.restrictDate = new Date();
            scope.offices = [];
            scope.staffs = [];
            scope.selectedObjects = {};
            scope.formData = {};
            scope.formData.client = {};
            scope.today = new Date();
            scope.isButtonDisabled = false;
            scope.triggerTypeOptions = [] ;
            scope.campaignTypeOptions = [];
            scope.providerOptions = [] ;
            scope.businessRules = [] ;
            scope.campaignData = {};
            scope.campaignData.campaignMessage = "";
            scope.previewData = {};
            scope.filteredBusinessRules = [];
            var triggeredBusinessRule = [];
            var nonTriggeredBusinessRule = [];
            scope.simpleDate = new Date();
            var simpleTime = new Date(scope.simpleDate.getTime());
            scope.campaignData.time = new Date(0, 0, 0, simpleTime.getHours(), simpleTime.getMinutes(), simpleTime.getSeconds());
            
            scope.campaignData.isNotification = false;
            scope.choice = 0;

            scope.buildMessageTemplate = function (paramName) {
                scope.campaignData.campaignMessage += " " + "{{" + paramName + "}}";
            }

            scope.setChoice = function () {
                if (scope.campaignData.isNotification) {
                    scope.choice = 1;
                }else{
                    scope.choice = 0;
                }
            };

            scope.reportSelected = function (reportName) {
                scope.reqFields = [] ;
                scope.reportParams = [] ;
                scope.reportDateParams = [] ;
                scope.reportTextParams  = [] ;

                resourceFactory.runReportsResource.getReport({reportSource: 'FullParameterList', parameterType: true, R_reportListing: "'" + reportName + "'"}, function (data) {
                    for (var i in data.data) {
                        var temp = {
                            name: data.data[i].row[0],
                            variable: data.data[i].row[1],
                            label: data.data[i].row[2],
                            displayType: data.data[i].row[3],
                            formatType: data.data[i].row[4],
                            defaultVal: data.data[i].row[5],
                            selectOne: data.data[i].row[6],
                            selectAll: data.data[i].row[7],
                            parentParameterName: data.data[i].row[8],
                            inputName: "R_" + data.data[i].row[1] //model name
                        };
                        scope.reqFields.push(temp);
                        if (temp.displayType == 'select' && temp.parentParameterName == null) {
                            intializeParams(temp, {});
                        } else if (temp.displayType == 'date') {
                            scope.reportDateParams.push(temp);
                        } else if (temp.displayType == 'text') {
                            scope.reportTextParams.push(temp);
                        }
                    }
                });

            } ;
            scope.getBusinessRule = function() {
                if (!_.isUndefined(scope.campaignData.triggerType.value) && scope.campaignData.triggerType.value === 'Triggered') {
                    scope.filteredBusinessRules = triggeredBusinessRule;
                } else {
                    scope.filteredBusinessRules =  nonTriggeredBusinessRule;
                }
            };

            scope.filterBusinessRule = function() {
                triggeredBusinessRule = [];
                nonTriggeredBusinessRule = [];
                angular.forEach(scope.businessRuleOptions, function (businessRule) {
                    if (!_.isNull(businessRule.reportSubType) && !_.isUndefined(businessRule.reportSubType) && businessRule.reportSubType === 'Triggered') {
                        triggeredBusinessRule.push(businessRule);
                    } else {
                        nonTriggeredBusinessRule.push(businessRule);
                    }
                });
            };

            function intializeParams(paramData, params) {
                scope.errorStatus = undefined;
                scope.errorDetails = [];
                params.reportSource = paramData.name;
                params.parameterType = true;
                var successFunction = getSuccuessFunction(paramData);
                resourceFactory.runReportsResource.getReport(params, successFunction);
            }

            function getSuccuessFunction(paramData) {
                var tempDataObj = new Object();
                var successFunction = function (data) {
                    var selectData = [];
                    var isExistedRecord = false;
                    for (var i in data.data) {
                        selectData.push({id: data.data[i].row[0], name: data.data[i].row[1]});
                    }
                    for (var j in scope.reportParams) {
                        if (scope.reportParams[j].name == paramData.name) {
                            scope.reportParams[j].selectOptions = selectData;
                            isExistedRecord = true;
                        }
                    }
                    if (!isExistedRecord) {
                        if(paramData.selectAll == 'Y'){
                            selectData.push({id: "-1", name: "All"});
                        }
                        paramData.selectOptions = selectData;
                        scope.reportParams.push(paramData);
                    }
                };
                return successFunction;
            }

            scope.getDependencies = function (paramData) {
                for (var i = 0; i < scope.reqFields.length; i++) {
                    var temp = scope.reqFields[i];
                    if (temp.parentParameterName == paramData.name) {
                        if (temp.displayType == 'select') {
                            var parentParamValue = this.formData[paramData.inputName];
                            if (parentParamValue != undefined) {
                                eval("var params={};params." + paramData.inputName + "='" + parentParamValue + "';");
                                intializeParams(temp, params);
                            }
                        } else if (temp.displayType == 'date') {
                            scope.reportDateParams.push(temp);
                        }
                    }
                }
                resourceFactory.reportsResource.get({id: scope.campaignData.report.reportId, fields: 'reportParameters'}, function (data) {
                    scope.smsReportParameters = data.reportParameters || [];
                });
            };

            scope.getColumnHeaders = function () {
                parameterValidationErrors();
                if (scope.errorDetails.length === 0) {
                    scope.formData.reportSource = scope.campaignData.report.reportName;

                    for (var i = 0; i < scope.reqFields.length; i++) {
                        var tempForm = {};
                        var tempParam = scope.reqFields[i];
                        if (tempParam.displayType == 'none') {
                            var paramName = tempParam.variable;
                            scope.formData[tempParam.inputName] = -1;
                        }
                    }
                    resourceFactory.runReportsResource.getReport(scope.formData, function (data) {
                        scope.reportData.columnHeaders = data.columnHeaders;
                    });
                }
            };

            function buildPreviewParms() {
                var paramCount = 1;
                var reportParams = "{";
                for (var i = 0; i < scope.reqFields.length; i++) {
                    var reqField = scope.reqFields[i];
                    for (var j = 0; j < scope.smsReportParameters.length; j++) {
                        var tempParam = scope.smsReportParameters[j];
                        if (reqField.name == tempParam.parameterName) {
                            var paramName = reqField.variable;
                            if (paramCount > 1) reportParams += ","
                            reportParams += '\"' + paramName  + '\"' + ":" + scope.formData[scope.reqFields[i].inputName];
                            paramCount = paramCount + 1;
                        }
                    }
                }
                reportParams += "}"
                return reportParams;
            };

            scope.previewMessage = function() {
                scope.paramValues = {};
                scope.paramValues = angular.fromJson(buildPreviewParms());
                scope.paramValues.reportName = scope.formData.reportSource;
                scope.previewData = {
                    message: scope.campaignData.campaignMessage,
                    paramValue: scope.paramValues
                };
                    resourceFactory.smsCampaignResource.preview({additionalParam: 'preview'}, scope.previewData, function (data) {
                        scope.previewMessage = data.campaignMessage;
                        scope.totalNumberOfMessages = data.totalNumberOfMessages;
                    });
            }

            function buildReportParms() {
                var paramCount = 1;
                var reportParams = "";
                for (var i = 0; i < scope.reqFields.length; i++) {
                    var reqField = scope.reqFields[i];
                    for (var j = 0; j < scope.smsReportParameters.length; j++) {
                        var tempParam = scope.smsReportParameters[j];
                        if (reqField.name == tempParam.parameterName) {
                            if(reqField.displayType == 'none') {
                                var paramName = 'R_' + tempParam.reportParameterName;
                                if (paramCount > 1) reportParams += ","
                                reportParams += encodeURIComponent(paramName) + ":" + encodeURIComponent("-1");
                                paramCount = paramCount + 1;
                            }else {
                                var paramName = 'R_' + tempParam.reportParameterName;
                                if (paramCount > 1) reportParams += ","
                                reportParams += encodeURIComponent(paramName) + ":" + encodeURIComponent(scope.formData[scope.reqFields[i].inputName]);
                                paramCount = paramCount + 1;
                            }
                        }
                    }
                }
                /*for (var i = 0; i < scope.reqFields.length; i++) {
                    var tempParam = scope.reqFields[i];
                    if (tempParam.displayType == 'none') {
                        reportParams += ","
                        reportParams += encodeURIComponent(tempParam.inputName) + ":" + encodeURIComponent("-1");
                    }
                }*/
                return reportParams;
            };

            function parameterValidationErrors() {
                var tmpStartDate = "";
                var tmpEndDate = "";
                scope.errorDetails = [];
                for (var i in scope.reqFields) {
                    var paramDetails = scope.reqFields[i];
                    switch (paramDetails.displayType) {
                        case "select":
                            var selectedVal = scope.formData[paramDetails.inputName];
                            if (selectedVal == undefined || selectedVal == 0) {
                                var fieldId = '#' + paramDetails.inputName;
                                $(fieldId).addClass("validationerror");
                                var errorObj = new Object();
                                errorObj.field = paramDetails.inputName;
                                errorObj.code = 'error.message.report.parameter.required';
                                errorObj.args = {params: []};
                                errorObj.args.params.push({value: paramDetails.label});
                                scope.errorDetails.push(errorObj);
                            }
                            break;
                        case "date":
                            var tmpDate = scope.formData[paramDetails.inputName];
                            if (tmpDate == undefined || !(tmpDate > "")) {
                                var fieldId = '#' + paramDetails.inputName;
                                $(fieldId).addClass("validationerror");
                                var errorObj = new Object();
                                errorObj.field = paramDetails.inputName;
                                errorObj.code = 'error.message.report.parameter.required';
                                errorObj.args = {params: []};
                                errorObj.args.params.push({value: paramDetails.label});
                                scope.errorDetails.push(errorObj);
                            }
                            if (tmpDate && invalidDate(tmpDate) == true) {
                                var fieldId = '#' + paramDetails.inputName;
                                $(fieldId).addClass("validationerror");
                                var errorObj = new Object();
                                errorObj.field = paramDetails.inputName;
                                errorObj.code = 'error.message.report.invalid.value.for.parameter';
                                errorObj.args = {params: []};
                                errorObj.args.params.push({value: paramDetails.label});
                                scope.errorDetails.push(errorObj);
                            }

                            if (paramDetails.variable == "startDate") tmpStartDate = tmpDate;
                            if (paramDetails.variable == "endDate") tmpEndDate = tmpDate;
                            break;
                        case "text":
                            var selectedVal = scope.formData[paramDetails.inputName];
                            if (selectedVal == undefined) {
                                var fieldId = '#' + paramDetails.inputName;
                                $(fieldId).addClass("validationerror");
                                var errorObj = new Object();
                                errorObj.field = paramDetails.inputName;
                                errorObj.code = 'error.message.report.parameter.required';
                                errorObj.args = {params: []};
                                errorObj.args.params.push({value: paramDetails.label});
                                scope.errorDetails.push(errorObj);
                            }
                            break;
                    }
                }

                if (tmpStartDate > "" && tmpEndDate > "") {
                    if (tmpStartDate > tmpEndDate) {
                        var errorObj = new Object();
                        errorObj.field = paramDetails.inputName;
                        errorObj.code = 'error.message.report.incorrect.values.for.date.fields';
                        errorObj.args = {params: []};
                        errorObj.args.params.push({value: paramDetails.label});
                        scope.errorDetails.push(errorObj);
                    }
                }
            }

            resourceFactory.smsCampaignTemplateResource.get(function (data) {
                scope.triggerTypeOptions = data.triggerTypeOptions ;
                scope.campaignTypeOptions = data.campaignTypeOptions;
                scope.providerOptions = data.smsProviderOptions ;
                scope.businessRuleOptions = data.businessRulesOptions ;
                scope.frequencyTypeOptions = data.frequencyTypeOptions;
                scope.weekDays = data.weekDays;
                scope.filterBusinessRule();
            });

            scope.changeStaff = function (staffId) {
                resourceFactory.employeeResource.get({staffInSelectedOfficeOnly:true, associations:'all', staffId: staffId}, function (data) {
                    scope.linkedvillages = data.linkedVillages;
                });
            };

            scope.selectedPeriod = function (period) {
                if (period == 1) {
                    scope.repeatsEveryOptions = ["1", "2", "3"];
                    scope.periodValue = "day(s)"
                }
                if (period == 2) {
                    scope.repeatsEveryOptions = ["1", "2", "3"];
                    scope.periodValue = "week(s)";
                    scope.campaignData.repeatsOnDay = '1';
                    scope.repeatsOnOptions = scope.weekDays;
                }
                if (period == 3) {
                    scope.periodValue = "month(s)";
                    scope.repeatsEveryOptions = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"];
                }
                if (period == 4) {
                    scope.periodValue = "year(s)";
                    scope.repeatsEveryOptions = ["1", "2", "3", "4", "5"];
                }
            };

            scope.noOfTabs = 3;
            scope.step = '-';

            scope.submit = function () {
                //onclick Disable proceed button to avoid multiple cilent creation
                setDisableTimeout();

                if (WizardHandler.wizard().currentStepNumber() != scope.noOfTabs) {
                    WizardHandler.wizard().next();
                    /*if (WizardHandler.wizard().currentStepNumber() == 2) {
                     if (scope.validateFiles())
                     WizardHandler.wizard().next();
                     } else {
                     WizardHandler.wizard().next();
                     }*/
                    return;
                }

                if (scope.campaignData.triggerType.value === 'Scheduled') {
                    scope.scheduledDateTime = scope.campaignData.recurrenceStartDate;
                    scope.scheduledDateTime.setHours(scope.campaignData.time.getHours());
                    scope.scheduledDateTime.setMinutes(scope.campaignData.time.getMinutes());
                    scope.scheduledDateTime.setSeconds(scope.campaignData.time.getSeconds());
                    scope.scheduledDateTime = dateFilter(scope.scheduledDateTime, scope.dft);
                }
                    //dateFilter(scope.campaignData.recurrenceStartDate, scope.df) + ' ' + scope.campaignData.time.getHours() + ':' + scope.campaignData.time.getMinutes() + ':' + scope.campaignData.time.getSeconds();
                scope.submissionData = {
                    providerId: (scope.campaignData.smsProvider != null)?scope.campaignData.smsProvider.id:null,
                    //runReportId: scope.campaignData.report.reportId,
                    triggerType: scope.campaignData.triggerType.id,
                    campaignName: scope.campaignData.campaignName,
                    campaignType: scope.getcampaignType(),
                    message: scope.campaignData.campaignMessage,
                    //paramValue: scope.paramValues,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    submittedOnDate: dateFilter(new Date(), scope.df),
                    recurrenceStartDate: scope.scheduledDateTime,
                    dateTimeFormat: scope.dft,
                    frequency: scope.campaignData.frequency,
                    interval: scope.campaignData.repeatsEvery,
                    repeatsOnDay: scope.campaignData.repeatsOnDay,
                    isNotification: scope.campaignData.isNotification
                }

                scope.submissionData.runReportId = scope.campaignData.report.reportId;
                scope.submissionData.paramValue = scope.paramValues;

                resourceFactory.smsCampaignResource.save(scope.submissionData, function(data) {
                    location.path('/viewsmscampaign/' + data.resourceId);
                });

            };

            scope.getcampaignType = function(){
                if(scope.campaignData.isNotification==false){
                    return 1;
                }else{
                    return 2;
                }
            };

            var setDisableTimeout = function(){
                scope.isButtonDisabled = true;
                setTimeout(function(){
                    scope.isButtonDisabled = false;
                }, 5000);
            }
        }
    });
    mifosX.ng.application.controller('CreateSmsCampaignController', ['$scope', 'WizardHandler', 'ResourceFactory', '$location', '$http', 'dateFilter', 'API_VERSION', 'Upload', '$rootScope', '$routeParams', mifosX.controllers.CreateSmsCampaignController]).run(function ($log) {
        $log.info("CreateSmsCampaignController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditSmsCampaignController: function (scope, WizardHandler, resourceFactory, location, http, dateFilter, API_VERSION, Upload, $rootScope, routeParams, $uibModal) {

            scope.reportParams = new Array();
            scope.reportDateParams = new Array();
            scope.reqFields = new Array();
            scope.reportTextParams = new Array();
            scope.reportData = {};
            scope.reportData.columnHeaders = [];
            scope.reportData.data = [];

            scope.offices = [];
            scope.staffs = [];
            scope.selectedObjects = {};
            scope.formData = {};
            scope.formData.client = {};
            scope.today = new Date();
            scope.isButtonDisabled = false;
            scope.triggerTypeOptions = [] ;
            scope.campaignTypeOptions = [];
            scope.providerOptions = [] ;
            scope.businessRules = [] ;
            scope.campaignData = {};

            scope.buildMessageTemplate = function (paramName) {
                scope.campaignData.campaignMessage += " " + "{{" + paramName + "}}";
            }

            scope.reportSelected = function (reportName) {
                scope.reqFields = [] ;
                scope.reportParams = [] ;
                scope.reportDateParams = [] ;
                scope.reportTextParams  = [] ;

                resourceFactory.runReportsResource.getReport({reportSource: 'FullParameterList', parameterType: true, R_reportListing: "'" + reportName + "'"}, function (data) {
                    for (var i in data.data) {
                        var temp = {
                            name: data.data[i].row[0],
                            variable: data.data[i].row[1],
                            label: data.data[i].row[2],
                            displayType: data.data[i].row[3],
                            formatType: data.data[i].row[4],
                            defaultVal: data.data[i].row[5],
                            selectOne: data.data[i].row[6],
                            selectAll: data.data[i].row[7],
                            parentParameterName: data.data[i].row[8],
                            inputName: "R_" + data.data[i].row[1] //model name
                        };
                        scope.reqFields.push(temp);
                        if (temp.displayType == 'select' && temp.parentParameterName == null) {
                            intializeParams(temp, {});
                        } else if (temp.displayType == 'date') {
                            scope.reportDateParams.push(temp);
                        } else if (temp.displayType == 'text') {
                            scope.reportTextParams.push(temp);
                        }
                    }
                });

            } ;

            resourceFactory.smsCampaignResource.get({campaignId: routeParams.campaignId}, function (data) {
                //scope.campaignData = data;
                scope.campaignData.id = data.id;
                scope.campaignData.campaignName = data.campaignName;
                scope.campaignData.campaignMessage = data.campaignMessage;
                if(data.providerId){
                    scope.campaignData.smsProvider = data.providerId;
                }else{
                    scope.campaignData.smsProvider = null;
                }                
                scope.campaignData.isNotification = data.isNotification;
                scope.campaignData.triggerType = data.triggerType.id;
                scope.campaignData.campaignType = data.campaignType.id;
                scope.campaignData.report = data.runReportId;
                scope.campaignData.reportName = data.reportName;
                scope.reportSelected(scope.campaignData.reportName);
                scope.paramValues = angular.fromJson(data.paramValue);
                scope.simpleDate = new Date(data.recurrenceStartDate);
                var simpleTime = new Date(scope.simpleDate.getTime());
                scope.campaignData.recurrenceStartDate = dateFilter(scope.simpleDate, scope.df);
                scope.campaignData.time = new Date(0, 0, 0, simpleTime.getHours(), simpleTime.getMinutes(), simpleTime.getSeconds());
                prepopulateReportParams();
            });

            function prepopulateReportParams() {
                if (!_.isUndefined(scope.paramValues)) {
                    var obj = scope.paramValues;
                    for (var key in obj) {
                        console.log(' name=' + key + ' value=' + obj[key]);
                        scope.formData["R_" + key] = String(obj[key]);
                    }
                }
            }

            function intializeParams(paramData, params) {
                scope.errorStatus = undefined;
                scope.errorDetails = [];
                params.reportSource = paramData.name;
                params.parameterType = true;
                var successFunction = getSuccuessFunction(paramData);
                resourceFactory.runReportsResource.getReport(params, successFunction);
            }

            function getSuccuessFunction(paramData) {
                var tempDataObj = new Object();
                var successFunction = function (data) {
                    var selectData = [];
                    var isExistedRecord = false;
                    for (var i in data.data) {
                        selectData.push({id: data.data[i].row[0], name: data.data[i].row[1]});
                    }
                    for (var j in scope.reportParams) {
                        if (scope.reportParams[j].name == paramData.name) {
                            scope.reportParams[j].selectOptions = selectData;
                            isExistedRecord = true;
                        }
                    }
                    if (!isExistedRecord) {
                        if(paramData.selectAll == 'Y'){
                            selectData.push({id: "-1", name: "All"});
                        }
                        paramData.selectOptions = selectData;
                        scope.reportParams.push(paramData);
                    }
                };
                return successFunction;
            }

            scope.getDependencies = function (paramData) {
                for (var i = 0; i < scope.reqFields.length; i++) {
                    var temp = scope.reqFields[i];
                    if (temp.parentParameterName == paramData.name) {
                        if (temp.displayType == 'select') {
                            var parentParamValue = this.formData[paramData.inputName];
                            if (parentParamValue != undefined) {
                                eval("var params={};params." + paramData.inputName + "='" + parentParamValue + "';");
                                intializeParams(temp, params);
                            }
                        } else if (temp.displayType == 'date') {
                            scope.reportDateParams.push(temp);
                        }
                    }
                }
                resourceFactory.reportsResource.get({id: scope.campaignData.report, fields: 'reportParameters'}, function (data) {
                    scope.smsReportParameters = data.reportParameters || [];
                    scope.getColumnHeaders();
                });
            };

            scope.getColumnHeaders = function () {
                //scope.formData = scope.reportParams;
                scope.formData.reportSource = scope.campaignData.reportName;
                var inQueryParameters = buildReportParms();
                //scope.formData = inQueryParameters;
                resourceFactory.runReportsResource.getReport(scope.formData, function (data) {
                    // get column headers for the given report
                    scope.reportData.columnHeaders = data.columnHeaders;
                });
            };

            function buildReportParms() {
                var paramCount = 1;
                var reportParams = "";
                for (var i = 0; i < scope.reqFields.length; i++) {
                    var reqField = scope.reqFields[i];
                    for (var j = 0; j < scope.smsReportParameters.length; j++) {
                        var tempParam = scope.smsReportParameters[j];
                        if (reqField.name == tempParam.parameterName) {
                            var paramName = 'R_' + tempParam.reportParameterName;
                            if (paramCount > 1) reportParams += ","
                            reportParams += encodeURIComponent(paramName) + ":" + encodeURIComponent(scope.formData[scope.reqFields[i].inputName]);
                            paramCount = paramCount + 1;
                        }
                    }
                }
                return reportParams;
            };

            resourceFactory.smsCampaignTemplateResource.get(function (data) {
                scope.triggerTypeOptions = data.triggerTypeOptions ;
                scope.campaignTypeOptions = data.campaignTypeOptions;
                scope.providerOptions = data.smsProviderOptions ;
                scope.businessRuleOptions = data.businessRulesOptions ;

                resourceFactory.groupResource.get({groupId: routeParams.groupId, template: true}, function (data) {
                    scope.formData.client.staffId = data.staffId;
                    scope.centerId = data.centerId;
                    scope.staffs = data.staffOptions;
                    scope.changeStaff(data.staffId);
                    scope.formData.client.officeId = data.officeId;
                    scope.minActivationDate = data.activationDate;
                });
            });

            scope.changeStaff = function (staffId) {
                resourceFactory.employeeResource.get({staffInSelectedOfficeOnly:true, associations:'all', staffId: staffId}, function (data) {
                    scope.linkedvillages = data.linkedVillages;
                });
            };

            scope.noOfTabs = 3;
            scope.step = '-';

            scope.submit = function () {
                //scope.simpleDate = new Date(scope.campaignData.recurrenceStartDate);
                //var simpleTime = new Date(scope.simpleDate.getTime());
                //scope.campaignData.recurrenceStartDate = dateFilter(scope.simpleDate, scope.df);
                //scope.campaignData.time = new Date(0, 0, 0, simpleTime.getHours(), simpleTime.getMinutes(), simpleTime.getSeconds());
                if (scope.campaignData.triggerType === 2) {
                    scope.scheduledDateTime = new Date(scope.campaignData.recurrenceStartDate);
                    scope.scheduledDateTime.setHours(scope.campaignData.time.getHours());
                    scope.scheduledDateTime.setMinutes(scope.campaignData.time.getMinutes());
                    scope.scheduledDateTime.setSeconds(scope.campaignData.time.getSeconds());
                    scope.scheduledDateTime = dateFilter(scope.scheduledDateTime, scope.dft);
                }
                
                scope.submissionData = {
                    providerId: scope.campaignData.smsProvider,
                    //runReportId: scope.campaignData.report,
                    triggerType: scope.campaignData.triggerType,
                    campaignName: scope.campaignData.campaignName,
                    campaignType: scope.campaignData.campaignType,
                    message: scope.campaignData.campaignMessage,
                    //paramValue: scope.paramValues,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    recurrenceStartDate: scope.scheduledDateTime,
                    dateTimeFormat: scope.dft,
                    runReportId : scope.campaignData.report,
                    paramValue : scope.paramValues,
                    isNotification : scope.campaignData.isNotification
                }

                resourceFactory.smsCampaignResource.update({campaignId: routeParams.campaignId}, scope.submissionData, function(data) {
                    location.path('/viewsmscampaign/' + routeParams.campaignId);
                });

            };



            scope.getcampaignType = function(){
                if(scope.campaignData.isNotification==false){
                    return 1;
                }else{
                    return 2;
                }
            };

            var setDisableTimeout = function() {
                scope.isButtonDisabled = true;
                setTimeout(function(){
                    scope.isButtonDisabled = false;
                }, 5000);
            }
        }
    });
    mifosX.ng.application.controller('EditSmsCampaignController', ['$scope', 'WizardHandler', 'ResourceFactory', '$location', '$http', 'dateFilter', 'API_VERSION', 'Upload', '$rootScope', '$routeParams', '$uibModal', mifosX.controllers.EditSmsCampaignController]).run(function ($log) {
        $log.info("EditSmsCampaignController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        SmsCampaignsController: function (scope, resourceFactory, location, dateFilter, translate) {
            scope.template = [];
            scope.formData = {};
            scope.first = {};
            scope.isCollapsed = true;
            scope.showdatefield = false;
            scope.repeatEvery = false;
            scope.first.date = new Date();
            scope.translate = translate;
            scope.criterias = [];
            scope.smsCampaignsPerPage = 15;
            scope.smsCampaigns = [];
            scope.formParams = {};
            scope.formParams.offset = 0;
            scope.formParams.limit = scope.smsCampaignsPerPage;

            scope.routeTo = function (id) {
                location.path('/viewsmscampaign/' + id);
            };

            if (!scope.searchCriteria.criterias) {
                scope.searchCriteria.criterias = null;
                scope.saveSC();
            }

            scope.getResultsPage = function (pageNumber) {
                scope.formParams.offset = ((pageNumber - 1) * scope.smsCampaignsPerPage);
                scope.formParams.limit = scope.smsCampaignsPerPage;
                resourceFactory.smsCampaignResource.getAll(scope.formParams, function (data) {
                    scope.smsCampaigns = data.pageItems;
                    scope.totalSMSCampaigns = data.totalFilteredRecords;
                });
            }

            scope.initPage = function () {
                resourceFactory.smsCampaignResource.getAll(scope.formParams, function (data) {
                    scope.smsCampaigns = data.pageItems;
                    scope.totalSMSCampaigns = data.totalFilteredRecords;
                });
            }

            scope.initPage();

            scope.filterText = scope.searchCriteria.criterias || '';

            scope.onFilter = function () {
                scope.searchCriteria.criterias = scope.filterText;
                scope.saveSC();
            };
        }
    });
    mifosX.ng.application.controller('SmsCampaignsController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$translate', mifosX.controllers.SmsCampaignsController]).run(function ($log) {
        $log.info("SmsCampaignsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewSmsCampaignController: function (scope, routeParams, location, resourceFactory, $uibModal, dateFilter, route, paginatorService) {
            scope.tabsList = [{id: 'pending', name: 'Pending SMS', status: 100}, {id: 'waiting', name: 'Waiting for Delivery Report', status: 150}, {id: 'sent', name: 'Sent SMS', status: 200}, {id: 'delivered', name: 'Delivered SMS', status: 300}, {id: 'failed', name: 'Failed SMS', status: 400}];
            scope.smsList = [];
            scope.formData = {};
            scope.smsPerPage = 15;
            resourceFactory.smsCampaignResource.get({campaignId: routeParams.campaignId}, function (data) {
                scope.campaignData = data;
            });

            scope.resetSMSList = function() {
                scope.smsList = [];
            }

            scope.activateSmsCampaign = function () {
                $uibModal.open({
                    templateUrl: 'activatesmscampaign.html',
                    controller: SmsCampaignActivationCtrl
                });
            };

            var fetchFunction = function (offset, limit) {
                var params = {};
                params.status = scope.selectedStatus;
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.dateFormat = scope.df;
                params.campaignId = routeParams.campaignId;

                if (scope.formData.fromDate) {
                    var reqFirstDate = dateFilter(scope.formData.fromDate, scope.df);
                    params.fromDate = reqFirstDate;
                }

                if (scope.formData.toDate) {
                    var reqSecondDate = dateFilter(scope.formData.toDate, scope.df);
                    params.toDate = reqSecondDate;
                }
                scope.formParams = params;

                resourceFactory.smsResource.getByStatus(params, function(data) {
                    scope.smsList = data.pageItems;
                    scope.totalSMS = data.totalFilteredRecords;
                });

            };

            scope.getResultsPage = function (pageNumber) {
                scope.formParams.offset = ((pageNumber - 1) * scope.smsPerPage);
                scope.formParams.limit = scope.smsPerPage;
                resourceFactory.smsResource.getByStatus(scope.formParams, function (data) {
                    scope.smsList = data.pageItems;
                });
            }

            scope.fetchSMSByStatus = function (status) {
                scope.selectedStatus = status;
                paginatorService.paginate(fetchFunction, scope.smsPerPage);
            };

            var SmsCampaignActivationCtrl = function ($scope, $uibModalInstance) {
                //$scope.data = {activationDate: scope.activationDate};
                $scope.activate = function () {
                    //$scope.activationDate = scope.activationDate;
                    $scope.activationData = {activationDate: dateFilter($scope.activationDate, scope.df), dateFormat: scope.df, locale: scope.optlang.code}
                    resourceFactory.smsCampaignResource.withCommand({campaignId: routeParams.campaignId, command: 'activate'}, $scope.activationData, function (data) {
                        $uibModalInstance.close('activate');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.closeSmsCampaign = function () {
                $uibModal.open({
                    templateUrl: 'closesmscampaign.html',
                    controller: SmsCampaignCloseCtrl
                });
            };

            var SmsCampaignCloseCtrl = function ($scope, $uibModalInstance) {
                $scope.closeSms = function () {
                    $scope.closureData = {closureDate: dateFilter($scope.closureDate, scope.df), dateFormat: scope.df, locale: scope.optlang.code}
                    resourceFactory.smsCampaignResource.withCommand({campaignId: routeParams.campaignId, command: 'close'}, $scope.closureData, function (data) {
                        $uibModalInstance.close('close');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.reActivateSmsCampaign = function () {
                $uibModal.open({
                    templateUrl: 'reactivatesmscampaign.html',
                    controller: SmsCampaignReActivateCtrl
                });
            };

            var SmsCampaignReActivateCtrl = function ($scope, $uibModalInstance) {
                $scope.reactivate = function () {
                    $scope.reActivationData = {activationDate: dateFilter($scope.activationDate, scope.df), dateFormat: scope.df, locale: scope.optlang.code}
                    resourceFactory.smsCampaignResource.withCommand({campaignId: routeParams.campaignId, command: 'reactivate'}, $scope.reActivationData, function (data) {
                        $uibModalInstance.close('reactivate');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.deleteSmsCampaign = function () {
                $uibModal.open({
                    templateUrl: 'deletesmscampaign.html',
                    controller: SmsCampaignDeleteCtrl
                });
            };

            var SmsCampaignDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.smsCampaignResource.delete({campaignId: routeParams.campaignId}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/smscampaigns');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewSmsCampaignController', ['$scope', '$routeParams', '$location', 'ResourceFactory', '$uibModal', 'dateFilter', '$route', 'PaginatorService', mifosX.controllers.ViewSmsCampaignController]).run(function ($log) {
        $log.info("ViewSmsCampaignController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewEmployeeController: function (scope, routeParams, resourceFactory) {
            scope.employee = [];
            resourceFactory.employeeResource.get({staffId: routeParams.id}, function (data) {
                scope.employee = data;
            });
        }
    });
    mifosX.ng.application.controller('ViewEmployeeController', ['$scope', '$routeParams', 'ResourceFactory', mifosX.controllers.ViewEmployeeController]).run(function ($log) {
        $log.info("ViewEmployeeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewHolController: function (scope, routeParams, resourceFactory, $uibModal, location, route) {

            resourceFactory.holValueResource.getholvalues({officeId: 1, holId: routeParams.id}, function (data) {
                scope.holiday = data;
                if (data.status.value === "Pending for activation") {
                    scope.holidayStatusPending = true;
                } else if (data.status.value === "Active") {
                    scope.holidayStatusActive = true;
                } else if (data.status.value === "Deleted") {
                    scope.holidayStatusDeleted = true;
                }

            });

            scope.activateHoliday = function () {
                $uibModal.open({
                    templateUrl: 'activateHoliday.html',
                    controller: activateHolidayCtrl
                });
            };

            var activateHolidayCtrl = function ($scope, $uibModalInstance) {
                $scope.activate = function () {
                    resourceFactory.holValueResource.save({holId: routeParams.id, command: 'Activate'}, {}, function (data) {
                        $uibModalInstance.close('activate');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.deleteHoliday = function () {
                $uibModal.open({
                    templateUrl: 'deleteHoliday.html',
                    controller: deleteHolidayCtrl
                });
            };

            var deleteHolidayCtrl = function ($scope, $uibModalInstance) {
                $scope.activate = function () {
                    resourceFactory.holValueResource.delete({holId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('activate');
                        location.path('holidays');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ViewHolController', ['$scope', '$routeParams', 'ResourceFactory', '$uibModal', '$location', '$route', mifosX.controllers.ViewHolController]).run(function ($log) {
        $log.info("ViewHolController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewOfficeController: function (scope, routeParams, route, location, resourceFactory) {
            scope.charges = [];
            
            resourceFactory.officeResource.get({officeId: routeParams.id}, function (data) {
                scope.office = data;
            });

            resourceFactory.DataTablesResource.getAllDataTables({apptable: 'm_office'}, function (data) {
                scope.officedatatables = data;
            });
            scope.dataTableChange = function (officedatatable) {
                resourceFactory.DataTablesResource.getTableDetails({datatablename: officedatatable.registeredTableName,
                    entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                    scope.datatabledetails = data;
                    scope.datatabledetails.isData = data.data.length > 0 ? true : false;
                    scope.datatabledetails.isMultirow = data.columnHeaders[0].columnName == "id" ? true : false;
                    scope.showDataTableAddButton = !scope.datatabledetails.isData || scope.datatabledetails.isMultirow;
                    scope.showDataTableEditButton = scope.datatabledetails.isData && !scope.datatabledetails.isMultirow;
                    scope.singleRow = [];
                    for (var i in data.columnHeaders) {
                        if (scope.datatabledetails.columnHeaders[i].columnCode) {
                            for (var j in scope.datatabledetails.columnHeaders[i].columnValues) {
                                for (var k in data.data) {
                                    if (data.data[k].row[i] == scope.datatabledetails.columnHeaders[i].columnValues[j].id) {
                                        data.data[k].row[i] = scope.datatabledetails.columnHeaders[i].columnValues[j].value;
                                    }
                                }
                            }
                        }
                    }
                    if (scope.datatabledetails.isData) {
                        for (var i in data.columnHeaders) {
                            if (!scope.datatabledetails.isMultirow) {
                                var row = {};
                                row.key = data.columnHeaders[i].columnName;
                                row.value = data.data[0].row[i];
                                scope.singleRow.push(row);
                            }
                        }
                    }
                });
            };

            scope.deleteAll = function (apptableName, entityId) {
                resourceFactory.DataTablesResource.delete({datatablename: apptableName, entityId: entityId, genericResultSet: 'true'}, {}, function (data) {
                    route.reload();
                });
            };

            scope.viewDataTable = function (registeredTableName, data){
                if (scope.datatabledetails.isMultirow) {
                    location.path("/viewdatatableentry/"+registeredTableName+"/"+scope.office.id+"/"+data.row[0]);
                }else{
                    location.path("/viewsingledatatableentry/"+registeredTableName+"/"+scope.office.id);
                }
            };
        }

    });
    mifosX.ng.application.controller('ViewOfficeController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', mifosX.controllers.ViewOfficeController]).run(function ($log) {
        $log.info("ViewOfficeController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewPaymentTypeController: function (scope, routeParams, resourceFactory, location, $uibModal, route) {
            scope.paymentTypes = [];
            scope.formData = [];
            resourceFactory.paymentTypeResource.getAll( function (data) {
                scope.paymentTypes = data;
            });

            scope.showEdit = function(id){
                location.path('/editPaymentType/' + id);
            }

           var PaymentTypeDeleteCtrl = function ($scope, $uibModalInstance,paymentTypeId) {
               $scope.delete = function () {
                   resourceFactory.paymentTypeResource.delete({paymentTypeId: paymentTypeId}, {}, function (data) {
                       $uibModalInstance.close('delete');
                       route.reload();
                   });
               };
               $scope.cancel = function () {
                   $uibModalInstance.dismiss('cancel');
               };
           }
                scope.deletePaymentType = function (id) {
                    $uibModal.open({
                        templateUrl: 'deletePaymentType.html',
                        controller: PaymentTypeDeleteCtrl,
                        resolve: {
                            paymentTypeId: function () {
                                return id;
                            }
                        }
                    });
                };

                }
    });
    mifosX.ng.application.controller('ViewPaymentTypeController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', '$route', mifosX.controllers.ViewPaymentTypeController]).run(function ($log) {
        $log.info("ViewPaymentTypeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewRoleController: function (scope, routeParams, resourceFactory, route, $uibModal) {

            scope.permissions = [];
            scope.groupings = [];
            scope.formData = {};
            scope.checkboxesChanged = false; // this flag is informing backup-system if user started editing
            var bValuesOnly = []; // array for 1-0 values only from permission-checkboxes

            var tempPermissionUIData = [];
            resourceFactory.rolePermissionResource.get({roleId: routeParams.id}, function (data) {
                scope.role = data;
                scope.isDisabled = true;
                scope.isAllFunctionsDisabled = false;

                var currentGrouping = "";
                for (var i in data.permissionUsageData) {
                    if (data.permissionUsageData[i].grouping != currentGrouping) {
                        currentGrouping = data.permissionUsageData[i].grouping;
                        scope.groupings.push(currentGrouping);
                        var newEntry = { permissions: [] };
                        tempPermissionUIData[currentGrouping] = newEntry;
                    }
                    var temp = { code: data.permissionUsageData[i].code};
                    scope.formData[data.permissionUsageData[i].code] = data.permissionUsageData[i].selected;
                    tempPermissionUIData[currentGrouping].permissions.push(temp);
                    scope.isAllFunctionsDisabled = scope.formData['ALL_FUNCTIONS'];
                }

                scope.backupCheckValues = function()
                {//backup -> save the data from formData before editing to boolean array
                    for(var i = 0; i< this.permissions.permissions.length; i++)
                    {
                        var temp = this.formData[this.permissions.permissions[i].code];
                        bValuesOnly.push(temp);
                    }
                    checkboxesChanged = true; // user started editing - set flag to true
                };

                scope.isRoleEnable = function(value) {
                    return value;
                };

                scope.editRoles = function () {
                    scope.isDisabled = false;
                };

                scope.disableRolesConfirmation = function () {
                    $uibModal.open({
                        templateUrl: 'disablerole.html',
                        controller: RoleDisableCtrl
                    });
                };

                var RoleDisableCtrl = function ($scope, $uibModalInstance) {
                    $scope.disableRoles = function () {
                        resourceFactory.roleResource.disableRoles({roleId: routeParams.id, command: 'disable'}, function (data) {
                            $uibModalInstance.close('disableRoles');
                            location.href = '#/admin/roles';
                        });
                    };
                    $scope.cancelDisableRole = function () {
                        $uibModalInstance.dismiss('cancelDisableRole');
                    };
                };

                scope.enableRolesConfirmation = function () {
                    $uibModal.open({
                        templateUrl: 'enablerole.html',
                        controller: RoleEnableCtrl
                    });
                };

                var RoleEnableCtrl = function ($scope, $uibModalInstance) {
                    $scope.enableRoles = function () {
                        resourceFactory.roleResource.enableRoles({roleId: routeParams.id, command: 'enable'}, function (data) {
                            $uibModalInstance.close('enableRoles');
                            location.href = '#/admin/roles';
                        });
                    };
                    $scope.cancelEnableRole = function () {
                        $uibModalInstance.dismiss('cancelEnableRole');
                    };
                };

                scope.deleteRolesConfirmation = function () {
                    $uibModal.open({
                        templateUrl: 'deleterole.html',
                        controller: RoleDeleteCtrl
                    });
                };

                var RoleDeleteCtrl = function ($scope, $uibModalInstance) {
                    $scope.deleteRoles = function () {
                        resourceFactory.roleResource.deleteRoles({roleId: routeParams.id}, function(data){
                            $uibModalInstance.close('deleteRoles');
                            location.href = '#/admin/roles';
                        });
                    };
                    $scope.cancelDeleteRole = function () {
                        $uibModalInstance.dismiss('cancelDeleteRole');
                    };
                };

                scope.cancel = function () {
                    route.reload();
                    scope.isDisabled = true;
                };


                scope.submit = function () {
                    var permissionData = {};
                    permissionData.permissions = this.formData;
                    resourceFactory.rolePermissionResource.update({roleId: routeParams.id}, permissionData, function (data) {
                        route.reload();
                        backupCheckValues();// reload current data in array (backup)
                        checkboxesChanged = false; // user finished editing - set flag to false
                        scope.isDisabled = true;

                    });

                };

                scope.showPermissions = function (grouping) {
                    if (scope.previousGrouping) {
                        tempPermissionUIData[scope.previousGrouping] = scope.permissions;
                    }
                    scope.permissions = tempPermissionUIData[grouping];
                    scope.previousGrouping = grouping;
                };
                //by default show special permissions
                scope.showPermissions('special');

                scope.permissionName = function (name) {
                    name = name || "";
                    //replace '_' with ' '
                    name = name.replace(/_/g, " ");
                    //for reorts replace read with view
                    if (scope.previousGrouping == 'report') {
                        name = name.replace(/READ/g, "View");
                    }
                    return name;
                };

                scope.formatName = function (string) {
                    if (string.indexOf('portfolio_') > -1) {
                        string = string.replace("portfolio_", "");
                    }
                    if (string.indexOf('transaction_') > -1) {
                        var temp = string.split("_");
                        string = temp[1] + " " + temp[0].charAt(0).toUpperCase() + temp[0].slice(1) + "s";
                    }
                    string = string.charAt(0).toUpperCase() + string.slice(1);
                    return string;
                };

                scope.selectAll = function(allSelected)
                {
                    var checkboxes = document.getElementsByName('cp');

                    if(allSelected == false)
                    {
                        for(var i in checkboxes)
                        {
                            checkboxes[i].checked = 1;
                        }
                        for(var i = 0; i< this.permissions.permissions.length; i++)
                        {
                            this.formData[this.permissions.permissions[i].code] = true;
                        }

                    }
                    else
                    {
                        for(var i in checkboxes)
                        {
                            if (i >= 1)
                            {
                                checkboxes[i].checked = 0;
                            }
                            else
                            {
                                if ('ALL_FUNCTIONS' == this.permissions.permissions[0].code)
                                {
                                    if (!this.isAllFunctionsDisabled)
                                    {
                                        checkboxes[i].checked = 0;
                                    }
                                }
                                else
                                {
                                    checkboxes[i].checked = 0;
                                }
                            }
                        }
                        for(var i = 0; i< this.permissions.permissions.length; i++)
                        {
                            if (i >= 1)
                            {
                                this.formData[this.permissions.permissions[i].code] = false;
                            }
                            else
                            {
                                if ('ALL_FUNCTIONS' == this.permissions.permissions[0].code)
                                {
                                    if (!this.isAllFunctionsDisabled)
                                    {
                                    this.formData[this.permissions.permissions[i].code] = false;
                                    }
                                }
                                else
                                {
                                    this.formData[this.permissions.permissions[i].code] = false;
                                }
                            }
                        }

                    }

                };
                scope.restoreCheckboxes = function()
                {
                    for(var i = 0; i < bValuesOnly.length;i++)
                    {
                        this.formData[this.permissions.permissions[i].code] = bValuesOnly[i];
                    }
                    for(var i = bValuesOnly.length; i > 0; i--)
                    {
                        bValuesOnly.pop(); // erase old elements in flag-array
                    }

                    checkboxesChanged = false; // user canceled editing - set flag to false
                };


            });
        }
    });
    mifosX.ng.application.controller('ViewRoleController', ['$scope', '$routeParams', 'ResourceFactory', '$route','$uibModal', mifosX.controllers.ViewRoleController]).run(function ($log) {
        $log.info("ViewRoleController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ChargeController: function (scope, resourceFactory, location) {
            scope.charges = [];

            scope.routeTo = function (id) {
                location.path('/viewcharge/' + id);
            };

            if (!scope.searchCriteria.charges) {
                scope.searchCriteria.charges = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.charges || '';

            scope.onFilter = function () {
                scope.searchCriteria.charges = scope.filterText;
                scope.saveSC();
            };

            scope.ChargesPerPage =15;
            scope.$broadcast('ChargeDataLoadingStartEvent');
            resourceFactory.chargeResource.getAllCharges(function (data) {
                scope.charges = data;
                scope.$broadcast('ChargeDataLoadingCompleteEvent');
            });
        }
    });
    mifosX.ng.application.controller('ChargeController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.ChargeController]).run(function ($log) {
        $log.info("ChargeController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateChargeController: function (scope, resourceFactory, location, dateFilter, translate) {
            scope.template = [];
            scope.formData = {};
            scope.first = {};
            scope.isCollapsed = true;
            scope.showdatefield = false;
            scope.repeatEvery = false;
            scope.first.date = new Date();
            scope.translate = translate;
            scope.showFrequencyOptions = false;
            scope.showPenalty = true ;

            resourceFactory.chargeTemplateResource.get(function (data) {
                scope.template = data;
                scope.showChargePaymentByField = true;
                scope.chargeCalculationTypeOptions = data.chargeCalculationTypeOptions;
                scope.chargeTimeTypeOptions = data.chargeTimeTypeOptions;

                scope.incomeAccountOptions = data.incomeOrLiabilityAccountOptions.incomeAccountOptions || [];
                scope.liabilityAccountOptions = data.incomeOrLiabilityAccountOptions.liabilityAccountOptions || [];
                scope.incomeAndLiabilityAccountOptions = scope.incomeAccountOptions.concat(scope.liabilityAccountOptions);

                scope.assetAccountOptions = data.assetAccountOptions || [];
                scope.expenseAccountOptions = data.expenseAccountOptions;
                scope.accountMappingForChargeConfig = data.accountMappingForChargeConfig;
                scope.accountMappingForCharge = [];
                
                var accountMappingForChargeConfigVar = scope.accountMappingForChargeConfig.toLowerCase();

                if(accountMappingForChargeConfigVar.indexOf("asset") > -1){
                    scope.accountMappingForCharge = scope.accountMappingForCharge.concat(scope.assetAccountOptions);
                }
                if(accountMappingForChargeConfigVar.indexOf("liability") > -1){
                    scope.accountMappingForCharge = scope.accountMappingForCharge.concat(scope.liabilityAccountOptions);
                }
               if(accountMappingForChargeConfigVar.indexOf("expense") > -1){
                    scope.accountMappingForCharge = scope.accountMappingForCharge.concat(scope.expenseAccountOptions);
                }
               if(accountMappingForChargeConfigVar.indexOf("income") > -1){
                    scope.accountMappingForCharge = scope.accountMappingForCharge.concat(scope.incomeAccountOptions);
                }
            });

            scope.chargeAppliesToSelected = function (chargeAppliesId) {
                switch(chargeAppliesId) {
                    case 1:
                        scope.showChargePaymentByField = true;
                        scope.chargeCalculationTypeOptions = scope.template.loanChargeCalculationTypeOptions;
                        scope.chargeTimeTypeOptions = scope.template.loanChargeTimeTypeOptions;
                        scope.showGLAccount = false;
                        break ;
                    case 2:
                        scope.showChargePaymentByField = false;
                        scope.chargeCalculationTypeOptions = scope.template.savingsChargeCalculationTypeOptions;
                        scope.chargeTimeTypeOptions = scope.template.savingsChargeTimeTypeOptions;
                        scope.addfeefrequency = false;
                        scope.showGLAccount = true;
                        break ;
                    case 3:
                        scope.showChargePaymentByField = false;
                        scope.chargeCalculationTypeOptions = scope.template.clientChargeCalculationTypeOptions;
                        scope.chargeTimeTypeOptions = scope.template.clientChargeTimeTypeOptions;
                        scope.addfeefrequency = false;
                        scope.showGLAccount = true;
                        break ;
                    case 4:
                        scope.showChargePaymentByField = false;
                        scope.chargeCalculationTypeOptions = scope.template.shareChargeCalculationTypeOptions;
                        scope.chargeTimeTypeOptions = scope.template.shareChargeTimeTypeOptions;
                        scope.addfeefrequency = false;
                        scope.showGLAccount = false;
                        scope.showPenalty = false ;
                            break ;
                }
                
                
            }
            //when chargeAppliesTo is savings, below logic is
            //to display 'Due date' field, if chargeTimeType is
            //'annual fee' or 'monthly fee'
            scope.chargeTimeChange = function (chargeTimeType) {
                scope.showFrequencyOptions = false;
                if(chargeTimeType == 9){
                    scope.showFrequencyOptions = true;
                }
                if (scope.showChargePaymentByField === false) {
                    for (var i in scope.chargeTimeTypeOptions) {
                        if (chargeTimeType === scope.chargeTimeTypeOptions[i].id) {
                            if (scope.chargeTimeTypeOptions[i].value == "Annual Fee" || scope.chargeTimeTypeOptions[i].value == "Monthly Fee") {
                                scope.showdatefield = true;
                                scope.repeatsEveryLabel = 'label.input.months';
                                //to show 'repeats every' field for monthly fee
                                if (scope.chargeTimeTypeOptions[i].value == "Monthly Fee") {
                                    scope.repeatEvery = true;
                                } else {
                                    scope.repeatEvery = false;
                                }
                            } else if (scope.chargeTimeTypeOptions[i].value == "Weekly Fee") {
                                scope.repeatEvery = true;
                                scope.showdatefield = false;
                                scope.repeatsEveryLabel = 'label.input.weeks';
                            }
                            else {
                                scope.showdatefield = false;
                                scope.repeatEvery = false;
                            }

                        }
                    }
                }
            }

            scope.setChoice = function () {
                if (this.formData.active) {
                    scope.choice = 1;
                }
                else if (!this.formData.active) {
                    scope.choice = 0;
                }
            };

	    scope.filterChargeCalculations = function(chargeTimeType) {

		    return function (item) {
			    if (chargeTimeType == 12 && ((item.id == 3) || (item.id == 4)))
			    {
				    return false;
			    }
                if (chargeTimeType != 12 && item.id == 5)
                {
                    return false;
                }
			    return true;
		    };
	    };
            scope.submit = function () {
                //when chargeTimeType is 'annual' or 'monthly fee' then feeOnMonthDay added to
                //the formData
                if (scope.showChargePaymentByField === false) {
                    if (scope.showdatefield === true) {
                        var reqDate = dateFilter(scope.first.date, 'dd MMMM');
                        this.formData.monthDayFormat = 'dd MMM';
                        this.formData.feeOnMonthDay = reqDate;
                    }
                }

                if( (scope.formData.chargeAppliesTo === 1 || scope.formData.chargeAppliesTo === 3 )&& scope.addfeefrequency == 'false'){
                    scope.formData.feeFrequency = null;
                    scope.formData.feeInterval = null;
                }

                if (!scope.showChargePaymentByField) {
                    delete this.formData.chargePaymentMode;
                }
                this.formData.active = this.formData.active || false;
                this.formData.locale = scope.optlang.code;
                this.formData.monthDayFormat = 'dd MMM';
                resourceFactory.chargeResource.save(this.formData, function (data) {
                    location.path('/viewcharge/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateChargeController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$translate', mifosX.controllers.CreateChargeController]).run(function ($log) {
        $log.info("CreateChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateFixedDepositProductController: function (scope, resourceFactory, location, dateFilter,$uibModal,WizardHandler) {
            scope.formData = {};
            scope.depositproduct = {};
            scope.charges = [];
            scope.showOrHideValue = "show";
            scope.configureFundOptions = [];
            scope.specificIncomeaccounts = [];
            scope.penaltySpecificIncomeaccounts = [];
            scope.configureFundOption = {};
            scope.isClicked = false;

            //interest rate details
            scope.chart = {};
            scope.restrictDate = new Date();
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting
            scope.isPrimaryGroupingByAmount = false;

            resourceFactory.fixedDepositProductResource.get({resourceType: 'template'}, function (data) {
                scope.product = data;
                scope.product.chargeOptions = scope.product.chargeOptions || [];
                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [];
                scope.liabilityAccountOptions = scope.product.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];
                scope.expenseAccountOptions = scope.product.accountingMappingOptions.expenseAccountOptions || [];

                scope.formData.currencyCode = data.currencyOptions[0].code;
                scope.formData.digitsAfterDecimal = data.currencyOptions[0].decimalPlaces;
                scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                scope.formData.interestCalculationType = data.interestCalculationType.id;
                scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                scope.formData.preClosurePenalInterestOnTypeId = scope.product.preClosurePenalInterestOnTypeOptions[0].id;
                //set chart template
                scope.chart = scope.product.chartTemplate;
                scope.chart.chartSlabs = [];
                scope.formData.accountingRule = '1';
                scope.depositproduct = angular.copy(scope.formData);

            });

            scope.$watch('formData',function(newVal){
                scope.depositproduct = angular.extend(scope.depositproduct,newVal);
            },true);

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
                scope.isClicked = true;
            }

            scope.formValue = function(array,model,findattr,retAttr){
                findattr = findattr ? findattr : 'id';
                retAttr = retAttr ? retAttr : 'value';
                console.log(findattr,retAttr,model);
                return _.find(array, function (obj) {
                    return obj[findattr] === model;
                })[retAttr];
            };
            //advanced accounting rule
            scope.showOrHide = function (showOrHideValue) {

                if (showOrHideValue == "show") {
                    scope.showOrHideValue = 'hide';
                }

                if (showOrHideValue == "hide") {
                    scope.showOrHideValue = 'show';
                }
            }

            scope.chargeSelected = function (chargeId) {
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty
                        scope.chargeId = '';
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.addConfigureFundSource = function () {
                if (scope.product.paymentTypeOptions && scope.product.paymentTypeOptions.length > 0 &&
                    scope.assetAccountOptions && scope.assetAccountOptions.length > 0) {
                    scope.configureFundOptions.push({
                        paymentTypeId: scope.product.paymentTypeOptions[0].id,
                        fundSourceAccountId: scope.assetAccountOptions[0].id,
                        paymentTypeOptions: scope.product.paymentTypeOptions,
                        assetAccountOptions: scope.assetAccountOptions
                    });
                }
                ;
            }

            scope.mapFees = function () {
                if (scope.product.chargeOptions && scope.product.chargeOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.specificIncomeaccounts.push({
                        chargeId: scope.product.chargeOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        chargeOptions: scope.product.chargeOptions,
                        incomeAccountOptions: scope.product.accountingMappingOptions.incomeAccountOptions
                    });
                }
            }

            scope.mapPenalty = function () {
                if (scope.product.penaltyOptions && scope.product.penaltyOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.penaltySpecificIncomeaccounts.push({
                        chargeId: scope.product.penaltyOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        penaltyOptions: scope.product.penaltyOptions,
                        incomeAccountOptions: scope.incomeAccountOptions
                    });
                }
            }

            scope.deleteFund = function (index) {
                scope.configureFundOptions.splice(index, 1);
            }

            scope.deleteFee = function (index) {
                scope.specificIncomeaccounts.splice(index, 1);
            }

            scope.deletePenalty = function (index) {
                scope.penaltySpecificIncomeaccounts.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/fixeddepositproducts');
            };

            scope.submit = function () {
                scope.paymentChannelToFundSourceMappings = [];
                scope.feeToIncomeAccountMappings = [];
                scope.penaltyToIncomeAccountMappings = [];
                scope.chargesSelected = [];

                var temp = '';

                //configure fund sources for payment channels
                for (var i in scope.configureFundOptions) {
                    temp = {
                        paymentTypeId: scope.configureFundOptions[i].paymentTypeId,
                        fundSourceAccountId: scope.configureFundOptions[i].fundSourceAccountId
                    }
                    scope.paymentChannelToFundSourceMappings.push(temp);
                }

                //map fees to specific income accounts
                for (var i in scope.specificIncomeaccounts) {
                    temp = {
                        chargeId: scope.specificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.specificIncomeaccounts[i].incomeAccountId
                    }
                    scope.feeToIncomeAccountMappings.push(temp);
                }

                //map penalties to specific income accounts
                for (var i in scope.penaltySpecificIncomeaccounts) {
                    temp = {
                        chargeId: scope.penaltySpecificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.penaltySpecificIncomeaccounts[i].incomeAccountId
                    }
                    scope.penaltyToIncomeAccountMappings.push(temp);
                }

                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }

                this.formData.paymentChannelToFundSourceMappings = scope.paymentChannelToFundSourceMappings;
                this.formData.feeToIncomeAccountMappings = scope.feeToIncomeAccountMappings;
                this.formData.penaltyToIncomeAccountMappings = scope.penaltyToIncomeAccountMappings;
                this.formData.charges = scope.chargesSelected;
                this.formData.locale = scope.optlang.code;
                this.formData.charts = [];//declare charts array
                this.formData.charts.push(copyChartData(scope.chart));//add chart details

                resourceFactory.fixedDepositProductResource.save(this.formData, function (data) {
                    location.path('/viewfixeddepositproduct/' + data.resourceId);
                });
            }

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = {}; 
                var toPeriod = '';
                var amountRangeTo = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }else{
                        lastChartSlab = null;
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        if(scope.isPrimaryGroupingByAmount){
                            if((_.isNull(lastChartSlab.toPeriod) || _.isUndefined(lastChartSlab.toPeriod) || lastChartSlab.toPeriod.length == 0)){
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                                fromPeriod = (_.isNull(lastChartSlab.fromPeriod) || _.isUndefined(lastChartSlab.fromPeriod) || lastChartSlab.fromPeriod.length == 0)? '' : 1;
                            }else{
                                amountRangeFrom = lastChartSlab.amountRangeFrom;
                                amountRangeTo = lastChartSlab.amountRangeTo;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                            }
                        }else{
                            if((_.isNull(lastChartSlab.amountRangeTo) || _.isUndefined(lastChartSlab.amountRangeTo) || lastChartSlab.amountRangeTo.length == 0)){
                                amountRangeFrom = (_.isNull(lastChartSlab.amountRangeFrom) || _.isUndefined(lastChartSlab.amountRangeFrom) || lastChartSlab.amountRangeFrom.length == 0) ? '' : 1;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.toPeriod) + 1;
                            }else{
                                fromPeriod = lastChartSlab.fromPeriod;
                                toPeriod = lastChartSlab.toPeriod;
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.amountRangeTo) + 1;
                            }
                        }
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom,
                    "incentives":[]
                };
                if(!_.isUndefined(toPeriod) && toPeriod.length > 0){
                    chartSlab.toPeriod = toPeriod;
                }
                if(!_.isUndefined(amountRangeTo) && amountRangeTo.length > 0){
                    chartSlab.amountRangeTo = amountRangeTo;
                }
                scope.chart.chartSlabs.push(chartSlab);
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }

            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var newChartData = {
                    name: scope.chart.name,
                    description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.isPrimaryGroupingByAmount,
                    //savingsProductId: scope.productId,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs))
                }

                //remove empty values
                _.each(newChartData, function (v, k) {
                    if (!v)
                        delete newChartData[k];
                });

                return newChartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives))
                }

                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }
                //alert("Period type id" + chartSlab.periodType.id);
                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (!v && v != 0) {
                        // alert('key:' + k + " and value:" + v);
                        delete newChartSlabData[k];
                    }
                });

                return newChartSlabData;
            }

            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };
        }
    });
    mifosX.ng.application.controller('CreateFixedDepositProductController', ['$scope', 'ResourceFactory', '$location', 'dateFilter','$uibModal','WizardHandler', mifosX.controllers.CreateFixedDepositProductController]).run(function ($log) {
        $log.info("CreateFixedDepositProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateInterestRateChartController: function (scope, resourceFactory, location, routeParams, dateFilter,$uibModal) {
            scope.formData = {};//used for update/save form data
            scope.restrictDate = new Date();
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting
            scope.isPrimaryGroupingByAmount = false;

            //deposit product details
            scope.productName = routeParams.productName;
            scope.productId = routeParams.productId;

            scope.productsLink = '';
            scope.viewProductLink = '';
            scope.productType = routeParams.productType;
            //alert(scope.productType);
            if (routeParams.productType === 'fixeddepositproduct') {
                scope.productsLink = 'fixeddepositproducts';
                scope.viewProductLink = 'viewfixeddepositproduct';
            } else if (routeParams.productType === 'recurringdepositproduct') {
                scope.productsLink = 'recurringdepositproducts';
                scope.viewProductLink = 'viewrecurringdepositproduct';
            }

            //get a interestrate chart
            resourceFactory.interestRateChartResource.get({resourceType: "template"}, function (data) {
                scope.chart = data;
                scope.chart.chartSlabs = [];
                scope.fromDate.date = new Date();
            });

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = '';
                var toPeriod = '';
                var amountRangeTo = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }else{
                        lastChartSlab = null;
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        if(scope.isPrimaryGroupingByAmount){
                            if((_.isNull(lastChartSlab.toPeriod) || _.isUndefined(lastChartSlab.toPeriod) || lastChartSlab.toPeriod.length == 0)){
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                                fromPeriod = (_.isNull(lastChartSlab.fromPeriod) || _.isUndefined(lastChartSlab.fromPeriod) || lastChartSlab.fromPeriod.length == 0)? '' : 1;
                            }else{
                                amountRangeFrom = lastChartSlab.amountRangeFrom;
                                amountRangeTo = lastChartSlab.amountRangeTo;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                            }
                        }else{
                            if((_.isNull(lastChartSlab.amountRangeTo) || _.isUndefined(lastChartSlab.amountRangeTo) || lastChartSlab.amountRangeTo.length == 0)){
                                amountRangeFrom = (_.isNull(lastChartSlab.amountRangeFrom) || _.isUndefined(lastChartSlab.amountRangeFrom) || lastChartSlab.amountRangeFrom.length == 0) ? '' : 1;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.toPeriod) + 1;
                            }else{
                                fromPeriod = lastChartSlab.fromPeriod;
                                toPeriod = lastChartSlab.toPeriod;
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.amountRangeTo) + 1;
                            }
                        }
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom,
                    "incentives":[]
                };
                if(!_.isUndefined(toPeriod) && toPeriod.length > 0){
                    chartSlab.toPeriod = toPeriod;
                }
                if(!_.isUndefined(amountRangeTo) && amountRangeTo.length > 0){
                    chartSlab.amountRangeTo = amountRangeTo;
                }
                scope.chart.chartSlabs.push(chartSlab);
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }

            //back to deposit product view
            scope.cancel = function () {
                location.path('/interestratecharts/' + routeParams.productId + '/' + routeParams.productName + '/' + routeParams.productType);
            };

            /**
             * Update Interest rate chart details
             */
            scope.submitInterestRateChartForm = function () {
                //scope.chartData = {};
                //scope.chartData = copyChartData(scope.chart);
                var chartData = copyChartData(scope.chart);

                scope.formData.charts = [];//declare charts array
                scope.formData.charts.push(chartData);//add chart details
                //update deposit product with new chart
                if (routeParams.productType === 'fixeddepositproduct') {
                    resourceFactory.fixedDepositProductResource.update({productId: routeParams.productId}, scope.formData, function (data) {
                        location.path('/interestratecharts/' + routeParams.productId + '/' + routeParams.productName + '/' + scope.productType);
                    });
                } else if (routeParams.productType === 'recurringdepositproduct') {
                    resourceFactory.recurringDepositProductResource.update({productId: routeParams.productId}, scope.formData, function (data) {
                        location.path('/interestratecharts/' + routeParams.productId + '/' + routeParams.productName + '/' + scope.productType);
                    });
                }

                //resourceFactory.interestRateChartResource.save(chartData, function (data) {
                //  location.path('/interestratecharts/' + routeParams.productId + '/' + routeParams.productName);
                //});
            }

            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var newChartData = {
                    name: scope.chart.name,
                    description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.isPrimaryGroupingByAmount,
                    productId: scope.productId,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs))
                }

                //remove empty values
                _.each(newChartData, function (v, k) {
                    if (!v)
                        delete newChartData[k];
                });

                return newChartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives))
                }
                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }

                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (!v && v != 0)
                        delete newChartSlabData[k];
                });

                return newChartSlabData;
            }

            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };

        }

    });
    mifosX.ng.application.controller('CreateInterestRateChartController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter','$uibModal', mifosX.controllers.CreateInterestRateChartController]).run(function ($log) {
        $log.info("CreateInterestRateChartController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateLoanProductController: function (scope, $rootScope, resourceFactory, location, dateFilter,WizardHandler, translate) {
            scope.restrictDate = new Date();
            scope.formData = {};
            scope.loanproduct = {};
            scope.charges = [];
            scope.accountingOptions = ['None','Cash','Accrual(Periodic)','Accrual(Upfront)'];
            scope.floatingrateoptions = [];
            scope.loanProductConfigurableAttributes = [];
            scope.showOrHideValue = "show";
            scope.configureFundOptions = [];
            scope.specificIncomeAccountMapping = [];
            scope.penaltySpecificIncomeaccounts = [];
            scope.configureFundOption = {};
            scope.date = {};
            scope.pvFlag = false;
            scope.rvFlag = false;
            scope.irFlag = false;
            scope.chargeFlag = false;
            scope.penalityFlag = false;
            scope.frFlag = false;
            scope.fiFlag = false;
            scope.piFlag = false;
            scope.amortization = true;
            scope.arrearsTolerance = true;
            scope.graceOnArrearsAging = true;
            scope.interestCalcPeriod = true;
            scope.interestMethod = true;
            scope.graceOnPrincipalAndInterest = true;
            scope.repaymentFrequency = true;
            scope.transactionProcessingStrategy = true;
            scope.allowAttributeConfiguration = true;
            scope.interestRecalculationOnDayTypeOptions = [];
            scope.translate = translate;
            //Rates
            scope.rates = [];
            scope.rateFlag = false;
            for (var i = 1; i <= 28; i++) {
                scope.interestRecalculationOnDayTypeOptions.push(i);
            }
            resourceFactory.loanProductResource.get({resourceType: 'template'}, function (data) {
                scope.product = data;
                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];
                scope.expenseAccountOptions = scope.product.accountingMappingOptions.expenseAccountOptions || [];
                scope.liabilityAccountOptions = scope.product.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAndLiabilityAccountOptions = scope.incomeAccountOptions.concat(scope.liabilityAccountOptions);
                scope.penaltyOptions = scope.product.penaltyOptions || [];
                scope.chargeOptions = scope.product.chargeOptions || [];
                scope.overduecharges = [];
                for (var i in scope.penaltyOptions) {
                    if (scope.penaltyOptions[i].chargeTimeType.code == 'chargeTimeType.overdueInstallment') {
                        scope.overduecharges.push(scope.penaltyOptions[i]);
                    }
                }
                scope.formData.currencyCode = scope.product.currencyOptions[0].code;
                scope.formData.includeInBorrowerCycle = 'false';
                scope.formData.useBorrowerCycle = false;
                scope.formData.digitsAfterDecimal = '2';
                scope.formData.inMultiplesOf = '0';
                scope.formData.repaymentFrequencyType = scope.product.repaymentFrequencyType.id;
                scope.formData.interestRateFrequencyType = scope.product.interestRateFrequencyType.id;
                scope.formData.amortizationType = scope.product.amortizationType.id;
                scope.formData.interestType = scope.product.interestType.id;
                scope.formData.interestCalculationPeriodType = scope.product.interestCalculationPeriodType.id;
                scope.formData.transactionProcessingStrategyId = scope.product.transactionProcessingStrategyOptions[0].id;
                scope.formData.principalVariationsForBorrowerCycle = scope.product.principalVariationsForBorrowerCycle;
                scope.formData.interestRateVariationsForBorrowerCycle = scope.product.interestRateVariationsForBorrowerCycle;
                scope.formData.numberOfRepaymentVariationsForBorrowerCycle = scope.product.numberOfRepaymentVariationsForBorrowerCycle;
                scope.formData.multiDisburseLoan = false;
                scope.formData.accountingRule = '1';
                scope.formData.daysInYearType = scope.product.daysInYearType.id;
                scope.formData.daysInMonthType = scope.product.daysInMonthType.id;
                scope.formData.isInterestRecalculationEnabled = scope.product.isInterestRecalculationEnabled;
                scope.formData.interestRecalculationCompoundingMethod = scope.product.interestRecalculationData.interestRecalculationCompoundingType.id;
                scope.formData.rescheduleStrategyMethod = scope.product.interestRecalculationData.rescheduleStrategyType.id;
                scope.formData.preClosureInterestCalculationStrategy = scope.product.interestRecalculationData.preClosureInterestCalculationStrategy.id;
                if(scope.product.interestRecalculationData.recalculationRestFrequencyType){
                    scope.formData.recalculationRestFrequencyType = scope.product.interestRecalculationData.recalculationRestFrequencyType.id;
                }
                scope.floatingRateOptions = data.floatingRateOptions ;
                scope.formData.isFloatingInterestRateCalculationAllowed = false ;
                scope.formData.isLinkedToFloatingInterestRates = false ;
                scope.formData.allowVariableInstallments = false ;
                scope.product.interestRecalculationNthDayTypeOptions.push({"code" : "onDay", "id" : -2, "value" : "on day"});
                scope.loanproduct = angular.copy(scope.formData);
                scope.isClicked = false;

                //Rate Module
                scope.rateOptions = scope.product.rateOptions || [];
                scope.enableRates = scope.product.isRatesEnabled;
            });

             scope.$watch('formData',function(newVal){
                scope.loanproduct = angular.extend(scope.loanproduct,newVal);
             },true);

             $rootScope.formValue = function(array,model,findattr,retAttr){
                 findattr = findattr ? findattr : 'id';
                 retAttr = retAttr ? retAttr : 'value';
                 console.log(findattr,retAttr,model);
                 return _.find(array, function (obj) {
                    return obj[findattr] === model;
                 })[retAttr];
            };

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
                scope.isClicked = true;
            }

            scope.chargeSelected = function (chargeId) {

                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty

                        if (data.penalty) {
                            scope.penalityFlag = true;
                            scope.penalityId = '';
                        } else {
                            scope.chargeFlag = true;
                            scope.chargeId = '';
                        }
                    });
                }
            };

          //Rate
          scope.rateSelected = function (currentRate) {

            if (currentRate) {
              scope.rateFlag = true;
              scope.rates.push(currentRate);
              scope.rateOptions.splice(scope.rateOptions.indexOf(currentRate), 1);
              scope.currentRate = '';
              scope.calculateRates();
            }
          };

          scope.calculateRates = function () {
            var total = 0;
            var minRate = 0;
            scope.rates.forEach(function (rate) {
              if (rate.percentage < minRate || minRate === 0) {
                minRate = rate.percentage;
              }
              total += rate.percentage;
            });

            if (minRate === 0) {
              minRate = undefined;
            }
            if (total === 0) {
              total = undefined;
              scope.rateFlag = false;
            }

            scope.formData.minInterestRatePerPeriod = minRate;
            //Assign the same total range to this values.
            scope.formData.interestRatePerPeriod = total;
            scope.formData.maxInterestRatePerPeriod = total;
            scope.calculatedRatePerPeriod = total;
          };

          scope.deleteRate = function (index) {
            scope.rateOptions.push(scope.rates[index]);
            scope.rates.splice(index, 1);
            scope.calculateRates();
          };

          scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            };

            //advanced accounting rule
            scope.showOrHide = function (showOrHideValue) {

                if (showOrHideValue == "show") {
                    scope.showOrHideValue = 'hide';
                }

                if (showOrHideValue == "hide") {
                    scope.showOrHideValue = 'show';
                }
            };


            scope.addConfigureFundSource = function () {
                scope.frFlag = true;
                scope.configureFundOptions.push({
                    paymentTypeId: scope.product.paymentTypeOptions.length > 0 ? scope.product.paymentTypeOptions[0].id : '',
                    fundSourceAccountId: scope.assetAccountOptions.length > 0 ? scope.assetAccountOptions[0].id : '',
                    paymentTypeOptions: scope.product.paymentTypeOptions.length > 0 ? scope.product.paymentTypeOptions : [],
                    assetAccountOptions: scope.assetAccountOptions.length > 0 ? scope.assetAccountOptions : []
                });
            };

            scope.mapFees = function () {
                scope.fiFlag = true;
                scope.specificIncomeAccountMapping.push({
                    chargeId: scope.chargeOptions.length > 0 ? scope.chargeOptions[0].id : '',
                    incomeAccountId: scope.incomeAndLiabilityAccountOptions.length > 0 ? scope.incomeAndLiabilityAccountOptions[0].id : ''
                });
            };

            scope.addPrincipalVariation = function () {
                scope.pvFlag = true;
                scope.formData.principalVariationsForBorrowerCycle.push({
                    valueConditionType: scope.product.valueConditionTypeOptions[0].id
                });
            };
            scope.addInterestRateVariation = function () {
                scope.irFlag = true;
                scope.formData.interestRateVariationsForBorrowerCycle.push({
                    valueConditionType: scope.product.valueConditionTypeOptions[0].id
                });
            };
            scope.addNumberOfRepaymentVariation = function () {
                scope.rvFlag = true;
                scope.formData.numberOfRepaymentVariationsForBorrowerCycle.push({
                    valueConditionType: scope.product.valueConditionTypeOptions[0].id
                });
            };

            scope.mapPenalty = function () {
                scope.piFlag = true;
                scope.penaltySpecificIncomeaccounts.push({
                    chargeId: scope.penaltyOptions.length > 0 ? scope.penaltyOptions[0].id : '',
                    incomeAccountId: scope.incomeAccountOptions.length > 0 ? scope.incomeAccountOptions[0].id : ''
                });
            };

            scope.deleteFund = function (index) {
                scope.configureFundOptions.splice(index, 1);
            };

            scope.deleteFee = function (index) {
                scope.specificIncomeAccountMapping.splice(index, 1);
            };

            scope.deletePenalty = function (index) {
                scope.penaltySpecificIncomeaccounts.splice(index, 1);
            };

            scope.deletePrincipalVariation = function (index) {
                scope.formData.principalVariationsForBorrowerCycle.splice(index, 1);
            };

            scope.deleteInterestRateVariation = function (index) {
                scope.formData.interestRateVariationsForBorrowerCycle.splice(index, 1);
            };

            scope.deleterepaymentVariation = function (index) {
                scope.formData.numberOfRepaymentVariationsForBorrowerCycle.splice(index, 1);
            };

            scope.cancel = function () {
                location.path('/loanproducts');
            };


            scope.isAccountingEnabled = function () {
                if (scope.formData.accountingRule == 2 || scope.formData.accountingRule == 3 || scope.formData.accountingRule == 4) {
                    return true;
                }
                return false;
            }

            scope.isAccrualAccountingEnabled = function () {
                if (scope.formData.accountingRule == 3 || scope.formData.accountingRule == 4) {
                    return true;
                }
                return false;
            }
            scope.setAttributeValues = function(){
                if(scope.allowAttributeConfiguration == false){
                    scope.amortization = false;
                    scope.arrearsTolerance = false;
                    scope.graceOnArrearsAging = false;
                    scope.interestCalcPeriod = false;
                    scope.interestMethod = false;
                    scope.graceOnPrincipalAndInterest = false;
                    scope.repaymentFrequency = false;
                    scope.transactionProcessingStrategy = false;
                }
            }

	    scope.filterCharges = function(currencyCode, multiDisburseLoan) {
		return function (item) {
			if ((multiDisburseLoan != true) && item.chargeTimeType.id == 12) {
				return false;
			}
			if (item.currency.code != currencyCode) {
				return false;
			}
			return true;
		};
	    };

            scope.submit = function () {
                var reqFirstDate = dateFilter(scope.date.first, scope.df);
                var reqSecondDate = dateFilter(scope.date.second, scope.df);
                scope.paymentChannelToFundSourceMappings = [];
                scope.feeToIncomeAccountMappings = [];
                scope.penaltyToIncomeAccountMappings = [];
                scope.chargesSelected = [];
                scope.selectedConfigurableAttributes = [];

                var temp = '';

                //configure fund sources for payment channels
                for (var i in scope.configureFundOptions) {
                    temp = {
                        paymentTypeId: scope.configureFundOptions[i].paymentTypeId,
                        fundSourceAccountId: scope.configureFundOptions[i].fundSourceAccountId
                    }
                    scope.paymentChannelToFundSourceMappings.push(temp);
                }

                //map fees to specific income accounts
                for (var i in scope.specificIncomeAccountMapping) {
                    temp = {
                        chargeId: scope.specificIncomeAccountMapping[i].chargeId,
                        incomeAccountId: scope.specificIncomeAccountMapping[i].incomeAccountId
                    }
                    scope.feeToIncomeAccountMappings.push(temp);
                }

                //map penalties to specific income accounts
                for (var i in scope.penaltySpecificIncomeaccounts) {
                    temp = {
                        chargeId: scope.penaltySpecificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.penaltySpecificIncomeaccounts[i].incomeAccountId
                    }
                    scope.penaltyToIncomeAccountMappings.push(temp);
                }

                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }

                if(scope.allowAttributeConfiguration == false){
                    scope.amortization = false;
                    scope.arrearsTolerance = false;
                    scope.graceOnArrearsAging = false;
                    scope.interestCalcPeriod = false;
                    scope.interestMethod = false;
                    scope.graceOnPrincipalAndInterest = false;
                    scope.repaymentFrequency = false;
                    scope.transactionProcessingStrategy = false;
                }

                scope.selectedConfigurableAttributes =
                {amortizationType:scope.amortization,
                    interestType:scope.interestMethod,
                    transactionProcessingStrategyId:scope.transactionProcessingStrategy,
                    interestCalculationPeriodType:scope.interestCalcPeriod,
                    inArrearsTolerance:scope.arrearsTolerance,
                    repaymentEvery:scope.repaymentFrequency,
                    graceOnPrincipalAndInterestPayment:scope.graceOnPrincipalAndInterest,
                    graceOnArrearsAgeing:scope.graceOnArrearsAging};

                this.formData.paymentChannelToFundSourceMappings = scope.paymentChannelToFundSourceMappings;
                this.formData.feeToIncomeAccountMappings = scope.feeToIncomeAccountMappings;
                this.formData.penaltyToIncomeAccountMappings = scope.penaltyToIncomeAccountMappings;
                this.formData.charges = scope.chargesSelected;
                this.formData.allowAttributeOverrides = scope.selectedConfigurableAttributes;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.startDate = reqFirstDate;
                this.formData.closeDate = reqSecondDate;
                this.formData.rates = scope.rates;

                //Interest recalculation data
                if (this.formData.isInterestRecalculationEnabled) {
                    var restFrequencyDate = dateFilter(scope.date.recalculationRestFrequencyDate, scope.df);
                    scope.formData.recalculationRestFrequencyDate = restFrequencyDate;
                    var compoundingFrequencyDate = dateFilter(scope.date.recalculationCompoundingFrequencyDate, scope.df);
                    scope.formData.recalculationCompoundingFrequencyDate = compoundingFrequencyDate;
                }else{
                    delete scope.formData.interestRecalculationCompoundingMethod;
                    delete scope.formData.rescheduleStrategyMethod;
                    delete scope.formData.recalculationRestFrequencyType;
                    delete scope.formData.recalculationRestFrequencyInterval;
                }

                if(this.formData.isLinkedToFloatingInterestRates) {
                    delete scope.formData.interestRatePerPeriod ;
                    delete scope.formData.minInterestRatePerPeriod ;
                    delete scope.formData.maxInterestRatePerPeriod ;
                    delete scope.formData.interestRateFrequencyType ;
                }else {
                    delete scope.formData.floatingRatesId ;
                    delete scope.formData.interestRateDifferential ;
                    delete scope.formData.isFloatingInterestRateCalculationAllowed ;
                    delete scope.formData.minDifferentialLendingRate ;
                    delete scope.formData.defaultDifferentialLendingRate ;
                    delete scope.formData.maxDifferentialLendingRate ;

                }
                //If Variable Installments is not allowed for this product, remove the corresponding formData
                if(!this.formData.allowVariableInstallments) {
                    delete scope.formData.minimumGap ;
                    delete scope.formData.maximumGap ;
                }

                if(this.formData.interestCalculationPeriodType == 0){
                    this.formData.allowPartialPeriodInterestCalcualtion = false;
                }

                if (this.formData.recalculationCompoundingFrequencyType == 4) {
                    if(this.formData.recalculationCompoundingFrequencyNthDayType == -2) {
                        delete this.formData.recalculationCompoundingFrequencyNthDayType;
                        delete this.formData.recalculationCompoundingFrequencyDayOfWeekType;
                    } else {
                        delete this.formData.recalculationCompoundingFrequencyOnDayType;
                    }
                } else if (this.formData.recalculationCompoundingFrequencyType == 3){
                    delete this.formData.recalculationCompoundingFrequencyOnDayType;
                    delete this.formData.recalculationCompoundingFrequencyNthDayType;
                }

                if (this.formData.recalculationRestFrequencyType == 4) {
                    if(this.formData.recalculationRestFrequencyNthDayType == -2) {
                        delete this.formData.recalculationRestFrequencyNthDayType;
                        delete this.formData.recalculationRestFrequencyDayOfWeekType;
                    } else {
                        delete this.formData.recalculationRestFrequencyOnDayType;
                    }
                } else if (this.formData.recalculationRestFrequencyType == 3){
                    delete this.formData.recalculationRestFrequencyOnDayType;
                    delete this.formData.recalculationRestFrequencyNthDayType;
                }
                resourceFactory.loanProductResource.save(this.formData, function (data) {
                    location.path('/viewloanproduct/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateLoanProductController', ['$scope','$rootScope', 'ResourceFactory', '$location', 'dateFilter','WizardHandler', '$translate', mifosX.controllers.CreateLoanProductController]).run(function ($log) {
        $log.info("CreateLoanProductController initialized");
    });
}(mifosX.controllers || {}));
;/**
 * Created by Jose on 24/07/2017.
 */
(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateRateController: function (scope, resourceFactory, location, dateFilter, translate, webStorage) {
            scope.template = [];
            scope.formData = {};
            scope.first = {};
            scope.rateError = false;
            scope.translate = translate;
            //Right now only loan is accepted for a rate.
            scope.rateOptions = [{id : "m_loan"}];
            scope.setChoice = function () {
                if (this.formData.active) {
                    scope.choice = 1;
                }
                else if (!this.formData.active) {
                    scope.choice = 0;
                }
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                resourceFactory.rateResource.save(this.formData, function (data) {
                    location.path('/rates/');
                },function(error){
                    scope.rateError = true;

                });
            };
        }
    });
    mifosX.ng.application.controller('CreateRateController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$translate','webStorage', mifosX.controllers.CreateRateController]).run(function ($log) {
        $log.info("CreateRateController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateRecurringDepositProductController: function (scope, resourceFactory, location, dateFilter,$uibModal,WizardHandler) {
            scope.formData = {};
            scope.depositproduct = {};
            scope.charges = [];
            scope.showOrHideValue = "show";
            scope.configureFundOptions = [];
            scope.specificIncomeaccounts = [];
            scope.penaltySpecificIncomeaccounts = [];
            scope.configureFundOption = {};
            scope.isClicked = false;

            //interest rate details
            scope.chart = {};
            scope.restrictDate = new Date();
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting
            scope.isPrimaryGroupingByAmount = false;

            resourceFactory.recurringDepositProductResource.get({resourceType: 'template'}, function (data) {
                scope.product = data;
                scope.product.chargeOptions = scope.product.chargeOptions || [];
                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [];
                scope.liabilityAccountOptions = scope.product.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];
                scope.expenseAccountOptions = scope.product.accountingMappingOptions.expenseAccountOptions || [];

                scope.formData.currencyCode = data.currencyOptions[0].code;
                scope.formData.digitsAfterDecimal = data.currencyOptions[0].decimalPlaces;
                scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                scope.formData.interestCalculationType = data.interestCalculationType.id;
                scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                scope.formData.preClosurePenalInterestOnTypeId = scope.product.preClosurePenalInterestOnTypeOptions[0].id;
                //scope.formData.interestFreePeriodFrequencyTypeId = scope.product.interestFreePeriodTypeOptions[0].id;

                //set chart template
                scope.chart = scope.product.chartTemplate;
                scope.chart.chartSlabs = [];
                scope.formData.accountingRule = '1';
                scope.depositproduct = angular.copy(scope.formData);

            });
            scope.$watch('formData',function(newVal){
                scope.depositproduct = angular.extend(scope.depositproduct,newVal);
            },true);
            scope.formValue = function(array,model,findattr,retAttr){
                findattr = findattr ? findattr : 'id';
                retAttr = retAttr ? retAttr : 'value';
                console.log(findattr,retAttr,model);
                return _.find(array, function (obj) {
                    return obj[findattr] === model;
                })[retAttr];
            };
            //advanced accounting rule
            scope.showOrHide = function (showOrHideValue) {

                if (showOrHideValue == "show") {
                    scope.showOrHideValue = 'hide';
                }

                if (showOrHideValue == "hide") {
                    scope.showOrHideValue = 'show';
                }
            }

            scope.chargeSelected = function (chargeId) {
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty
                        scope.chargeId = '';
                    });
                }
            }

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
                scope.isClicked = true;
            }
            
            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.addConfigureFundSource = function () {
                if (scope.product.paymentTypeOptions && scope.product.paymentTypeOptions.length > 0 &&
                    scope.assetAccountOptions && scope.assetAccountOptions.length > 0) {
                    scope.configureFundOptions.push({
                        paymentTypeId: scope.product.paymentTypeOptions[0].id,
                        fundSourceAccountId: scope.assetAccountOptions[0].id,
                        paymentTypeOptions: scope.product.paymentTypeOptions,
                        assetAccountOptions: scope.assetAccountOptions
                    });
                }
                ;
            }

            scope.mapFees = function () {
                if (scope.product.chargeOptions && scope.product.chargeOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.specificIncomeaccounts.push({
                        chargeId: scope.product.chargeOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        chargeOptions: scope.product.chargeOptions,
                        incomeAccountOptions: scope.product.accountingMappingOptions.incomeAccountOptions
                    });
                }
            }

            scope.mapPenalty = function () {
                if (scope.product.penaltyOptions && scope.product.penaltyOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.penaltySpecificIncomeaccounts.push({
                        chargeId: scope.product.penaltyOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        penaltyOptions: scope.product.penaltyOptions,
                        incomeAccountOptions: scope.incomeAccountOptions
                    });
                }
            }

            scope.deleteFund = function (index) {
                scope.configureFundOptions.splice(index, 1);
            }

            scope.deleteFee = function (index) {
                scope.specificIncomeaccounts.splice(index, 1);
            }

            scope.deletePenalty = function (index) {
                scope.penaltySpecificIncomeaccounts.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/recurringdepositproducts');
            };

            scope.submit = function () {
                scope.paymentChannelToFundSourceMappings = [];
                scope.feeToIncomeAccountMappings = [];
                scope.penaltyToIncomeAccountMappings = [];
                scope.chargesSelected = [];

                var temp = '';

                //configure fund sources for payment channels
                for (var i in scope.configureFundOptions) {
                    temp = {
                        paymentTypeId: scope.configureFundOptions[i].paymentTypeId,
                        fundSourceAccountId: scope.configureFundOptions[i].fundSourceAccountId
                    }
                    scope.paymentChannelToFundSourceMappings.push(temp);
                }

                //map fees to specific income accounts
                for (var i in scope.specificIncomeaccounts) {
                    temp = {
                        chargeId: scope.specificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.specificIncomeaccounts[i].incomeAccountId
                    }
                    scope.feeToIncomeAccountMappings.push(temp);
                }

                //map penalties to specific income accounts
                for (var i in scope.penaltySpecificIncomeaccounts) {
                    temp = {
                        chargeId: scope.penaltySpecificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.penaltySpecificIncomeaccounts[i].incomeAccountId
                    }
                    scope.penaltyToIncomeAccountMappings.push(temp);
                }

                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }

                this.formData.paymentChannelToFundSourceMappings = scope.paymentChannelToFundSourceMappings;
                this.formData.feeToIncomeAccountMappings = scope.feeToIncomeAccountMappings;
                this.formData.penaltyToIncomeAccountMappings = scope.penaltyToIncomeAccountMappings;
                this.formData.charges = scope.chargesSelected;
                this.formData.locale = scope.optlang.code;
                this.formData.charts = [];//declare charts array
                this.formData.charts.push(copyChartData(scope.chart));//add chart details

                resourceFactory.recurringDepositProductResource.save(this.formData, function (data) {
                    location.path('/viewrecurringdepositproduct/' + data.resourceId);
                });
            }

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = {}; 
                var toPeriod = '';
                var amountRangeTo = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }else{
                        lastChartSlab = null;
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        if(scope.isPrimaryGroupingByAmount){
                            if((_.isNull(lastChartSlab.toPeriod) || _.isUndefined(lastChartSlab.toPeriod) || lastChartSlab.toPeriod.length == 0)){
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                                fromPeriod = (_.isNull(lastChartSlab.fromPeriod) || _.isUndefined(lastChartSlab.fromPeriod) || lastChartSlab.fromPeriod.length == 0)? '' : 1;
                            }else{
                                amountRangeFrom = lastChartSlab.amountRangeFrom;
                                amountRangeTo = lastChartSlab.amountRangeTo;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                            }
                        }else{
                            if((_.isNull(lastChartSlab.amountRangeTo) || _.isUndefined(lastChartSlab.amountRangeTo) || lastChartSlab.amountRangeTo.length == 0)){
                                amountRangeFrom = (_.isNull(lastChartSlab.amountRangeFrom) || _.isUndefined(lastChartSlab.amountRangeFrom) || lastChartSlab.amountRangeFrom.length == 0) ? '' : 1;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.toPeriod) + 1;
                            }else{
                                fromPeriod = lastChartSlab.fromPeriod;
                                toPeriod = lastChartSlab.toPeriod;
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.amountRangeTo) + 1;
                            }
                        }
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom,
                    "incentives":[]
                };
                if(!_.isUndefined(toPeriod) && toPeriod.length > 0){
                    chartSlab.toPeriod = toPeriod;
                }
                if(!_.isUndefined(amountRangeTo) && amountRangeTo.length > 0){
                    chartSlab.amountRangeTo = amountRangeTo;
                }
                scope.chart.chartSlabs.push(chartSlab);
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }

            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var newChartData = {
                    name: scope.chart.name,
                    description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.isPrimaryGroupingByAmount,
                    //savingsProductId: scope.productId,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs))
                }

                //remove empty values
                _.each(newChartData, function (v, k) {
                    if (!v)
                        delete newChartData[k];
                });

                return newChartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives))
                }
                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }

                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (!v && v != 0)
                        delete newChartSlabData[k];
                });

                return newChartSlabData;
            }

            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };
        }
    });
    mifosX.ng.application.controller('CreateRecurringDepositProductController', ['$scope', 'ResourceFactory', '$location', 'dateFilter','$uibModal','WizardHandler', mifosX.controllers.CreateRecurringDepositProductController]).run(function ($log) {
        $log.info("CreateRecurringDepositProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateSavingProductController: function (scope, $rootScope, resourceFactory, location , WizardHandler) {
            scope.formData = {};
            scope.savingproduct = {};
            scope.charges = [];
            scope.showOrHideValue = "show";
            scope.configureFundOptions = [];
            scope.specificIncomeaccounts = [];
            scope.penaltySpecificIncomeaccounts = [];
            scope.configureFundOption = {};
            scope.isClicked = false;

            resourceFactory.savingProductResource.get({resourceType: 'template'}, function (data) {
                scope.product = data;
                scope.product.chargeOptions = scope.product.chargeOptions || [];
                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [];
                scope.liabilityAccountOptions = scope.product.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];
                scope.expenseAccountOptions = scope.product.accountingMappingOptions.expenseAccountOptions || [];

                scope.formData.currencyCode = data.currencyOptions[0].code;
                scope.formData.digitsAfterDecimal = data.currencyOptions[0].decimalPlaces;
                scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                scope.formData.interestCalculationType = data.interestCalculationType.id;
                scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                scope.formData.accountingRule = '1';
                scope.savingproduct = angular.copy(scope.formData);

            });

            scope.$watch('formData',function(newVal){
                scope.savingproduct = angular.extend(scope.savingproduct,newVal);
            },true);

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
                scope.isClicked = true;
            }

            scope.formValue = function(array,model,findattr,retAttr){
                findattr = findattr ? findattr : 'id';
                retAttr = retAttr ? retAttr : 'value';
                console.log(findattr,retAttr,model);
                return _.find(array, function (obj) {
                    return obj[findattr] === model;
                })[retAttr];
            };
            //$rootScope.formValue is used which is defined in CreateLoanProductController.js

            //advanced accounting rule
            scope.showOrHide = function (showOrHideValue) {

                if (showOrHideValue == "show") {
                    scope.showOrHideValue = 'hide';
                }

                if (showOrHideValue == "hide") {
                    scope.showOrHideValue = 'show';
                }
            }

            scope.chargeSelected = function (chargeId) {
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty
                        scope.chargeId = '';
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.addConfigureFundSource = function () {
                if (scope.product.paymentTypeOptions && scope.product.paymentTypeOptions.length > 0 &&
                    scope.assetAccountOptions && scope.assetAccountOptions.length > 0) {
                    scope.configureFundOptions.push({
                        paymentTypeId: scope.product.paymentTypeOptions[0].id,
                        fundSourceAccountId: scope.assetAccountOptions[0].id,
                        paymentTypeOptions: scope.product.paymentTypeOptions,
                        assetAccountOptions: scope.assetAccountOptions
                    });
                }
                ;
            }

            scope.mapFees = function () {
                if (scope.product.chargeOptions && scope.product.chargeOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.specificIncomeaccounts.push({
                        chargeId: scope.product.chargeOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        chargeOptions: scope.product.chargeOptions,
                        incomeAccountOptions: scope.product.accountingMappingOptions.incomeAccountOptions
                    });
                }
            }

            scope.mapPenalty = function () {
                if (scope.product.penaltyOptions && scope.product.penaltyOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.penaltySpecificIncomeaccounts.push({
                        chargeId: scope.product.penaltyOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        penaltyOptions: scope.product.penaltyOptions,
                        incomeAccountOptions: scope.incomeAccountOptions
                    });
                }
            }

            scope.deleteFund = function (index) {
                scope.configureFundOptions.splice(index, 1);
            }

            scope.deleteFee = function (index) {
                scope.specificIncomeaccounts.splice(index, 1);
            }

            scope.deletePenalty = function (index) {
                scope.penaltySpecificIncomeaccounts.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/savingproducts');
            };

            scope.submit = function () {
                scope.paymentChannelToFundSourceMappings = [];
                scope.feeToIncomeAccountMappings = [];
                scope.penaltyToIncomeAccountMappings = [];
                scope.chargesSelected = [];

                var temp = '';

                //configure fund sources for payment channels
                for (var i in scope.configureFundOptions) {
                    temp = {
                        paymentTypeId: scope.configureFundOptions[i].paymentTypeId,
                        fundSourceAccountId: scope.configureFundOptions[i].fundSourceAccountId
                    }
                    scope.paymentChannelToFundSourceMappings.push(temp);
                }

                //map fees to specific income accounts
                for (var i in scope.specificIncomeaccounts) {
                    temp = {
                        chargeId: scope.specificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.specificIncomeaccounts[i].incomeAccountId,
                    }
                    scope.feeToIncomeAccountMappings.push(temp);
                }

                //map penalties to specific income accounts
                for (var i in scope.penaltySpecificIncomeaccounts) {
                    temp = {
                        chargeId: scope.penaltySpecificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.penaltySpecificIncomeaccounts[i].incomeAccountId,
                    }
                    scope.penaltyToIncomeAccountMappings.push(temp);
                }

                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }

                this.formData.paymentChannelToFundSourceMappings = scope.paymentChannelToFundSourceMappings;
                this.formData.feeToIncomeAccountMappings = scope.feeToIncomeAccountMappings;
                this.formData.penaltyToIncomeAccountMappings = scope.penaltyToIncomeAccountMappings;
                this.formData.charges = scope.chargesSelected;
                this.formData.locale = scope.optlang.code;

                resourceFactory.savingProductResource.save(this.formData, function (data) {
                    location.path('/viewsavingproduct/' + data.resourceId);
                });
            }
        }
    });
    mifosX.ng.application.controller('CreateSavingProductController', ['$scope', '$rootScope', 'ResourceFactory', '$location','WizardHandler', mifosX.controllers.CreateSavingProductController]).run(function ($log) {
        $log.info("CreateSavingProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateShareProductController: function (scope, resourceFactory, dateFilter, location,WizardHandler) {
            scope.formData = {};
            scope.shareproduct = {};
            scope.charges = [];
            scope.formData.marketPricePeriods = [] ;
            scope.showOrHideValue = "show";
            scope.isClicked = false;

            resourceFactory.productsResource.template({productType:'share', resourceType:'template'}, function(data) {
                scope.product = data;
                scope.product.chargeOptions = scope.product.chargeOptions || [];
                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [] ;
                scope.equityAccountOptions = scope.product.accountingMappingOptions.equityAccountOptions || [] ;
                scope.liabilityAccountOptions = scope.product.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];
                scope.formData.currencyCode = data.currencyOptions[0].code;
                scope.formData.digitsAfterDecimal = data.currencyOptions[0].decimalPlaces;
                scope.formData.allowDividendCalculationForInactiveClients = false;
                scope.formData.accountingRule = '1';
                scope.shareproduct = angular.copy(scope.formData);
            });

            scope.$watch('formData',function(newVal){
                scope.shareproduct = angular.extend(scope.shareproduct,newVal);
            },true);

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
                scope.isClicked = true;
            }
            
            scope.formValue = function(array,model,findattr,retAttr){
                findattr = findattr ? findattr : 'id';
                retAttr = retAttr ? retAttr : 'value';
                console.log(findattr,retAttr,model);
                return _.find(array, function (obj) {
                    return obj[findattr] === model;
                })[retAttr];
            };

            scope.addMarketPricePeriod = function () {
                var marketPrice = {} ;
                marketPrice.locale=scope.optlang.code;
                marketPrice.dateFormat = scope.df;
                scope.formData.marketPricePeriods.push(marketPrice);
            };

            scope.deleteMarketPricePeriod = function (index) {
                scope.formData.marketPricePeriods.splice(index, 1);
            } ;

            scope.chargeSelected = function (chargeId) {
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty
                        scope.chargeId = '';
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/shareproducts');
            };

            scope.submit = function () {
                scope.chargesSelected = [];
                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }
                for(var j in scope.formData.marketPricePeriods) {
                    scope.formData.marketPricePeriods[j].fromDate = dateFilter(scope.formData.marketPricePeriods[j].fromDate, scope.df);
                }
                this.formData.chargesSelected = scope.chargesSelected;
                this.formData.locale = scope.optlang.code;

                resourceFactory.shareProduct.post(this.formData, function (data) {
                    location.path('/viewshareproduct/' + data.resourceId);
                });
            }
        }
    });
    mifosX.ng.application.controller('CreateShareProductController', ['$scope', 'ResourceFactory', 'dateFilter', '$location','WizardHandler', mifosX.controllers.CreateShareProductController]).run(function ($log) {
        $log.info("CreateShareProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditChargeController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.template = [];
            scope.showdatefield = false;
            scope.repeatEvery = false;
            scope.first = {};
            scope.flag = false;
	        scope.showPenalty = true ;

            resourceFactory.chargeResource.getCharge({chargeId: routeParams.id, template: true}, function (data) {
                scope.template = data;
                scope.incomeAccountOptions = data.incomeOrLiabilityAccountOptions.incomeAccountOptions || [];
                scope.liabilityAccountOptions = data.incomeOrLiabilityAccountOptions.liabilityAccountOptions || [];
                scope.incomeAndLiabilityAccountOptions = scope.incomeAccountOptions.concat(scope.liabilityAccountOptions);
                scope.assetAccountOptions = data.assetAccountOptions || [];
                scope.expenseAccountOptions = data.expenseAccountOptions;
                scope.accountMappingForChargeConfig = data.accountMappingForChargeConfig;
                scope.accountMappingForCharge= [];
                
                var accountMappingForChargeConfigVar = scope.accountMappingForChargeConfig.toLowerCase();

                if(accountMappingForChargeConfigVar.indexOf("asset") > -1){
                    scope.accountMappingForCharge = scope.accountMappingForCharge.concat(scope.assetAccountOptions);
                }
                if(accountMappingForChargeConfigVar.indexOf("liability") > -1){
                    scope.accountMappingForCharge = scope.accountMappingForCharge.concat(scope.liabilityAccountOptions);
                }
               if(accountMappingForChargeConfigVar.indexOf("expense") > -1){
                scope.accountMappingForCharge = scope.accountMappingForCharge.concat(scope.expenseAccountOptions);
                }
               if(accountMappingForChargeConfigVar.indexOf("income") > -1){
                scope.accountMappingForCharge = scope.accountMappingForCharge.concat(scope.incomeAccountOptions);
                }

                if (data.chargeAppliesTo.value === "Loan") {
                    scope.chargeTimeTypeOptions = data.loanChargeTimeTypeOptions;
                    scope.template.chargeCalculationTypeOptions = scope.template.loanChargeCalculationTypeOptions;
                    scope.flag = false;
                    scope.showFrequencyOptions = true;
                } else if (data.chargeAppliesTo.value === "Savings") {
                    scope.chargeTimeTypeOptions = data.savingsChargeTimeTypeOptions;
                    scope.template.chargeCalculationTypeOptions = scope.template.savingsChargeCalculationTypeOptions;
                    scope.flag = true;
                    scope.showFrequencyOptions = false;
                    scope.showGLAccount = true;
                }else if(data.chargeAppliesTo.value === 'Shares') {
                    scope.showChargePaymentByField = false;
                    scope.chargeCalculationTypeOptions = scope.template.shareChargeCalculationTypeOptions;
                    scope.chargeTimeTypeOptions = scope.template.shareChargeTimeTypeOptions;
                    scope.addfeefrequency = false;
                    scope.showGLAccount = false;
                    scope.showPenalty = false ;
                    scope.flag = true;
                }else {
                    scope.flag = true;
                    scope.template.chargeCalculationTypeOptions = data.clientChargeCalculationTypeOptions;
                    scope.chargeTimeTypeOptions = scope.template.clientChargeTimeTypeOptions;
                    scope.showFrequencyOptions = false;
                    scope.showGLAccount = true;
                }

                scope.formData = {
                    name: data.name,
                    active: data.active,
                    penalty: data.penalty,
                    currencyCode: data.currency.code,
                    chargeAppliesTo: data.chargeAppliesTo.id,
                    chargeTimeType: data.chargeTimeType.id,
                    chargeCalculationType: data.chargeCalculationType.id,
                    amount: data.amount
                };

                if(data.incomeOrLiabilityAccount){
                    scope.formData.incomeAccountId = data.accountMappingForCharge.id;   
                } 

                if(data.taxGroup){
                    scope.formData.taxGroupId = data.taxGroup.id;
                }

                if(data.feeFrequency){
                    scope.addfeefrequency = 'true';
                    scope.formData.feeFrequency = data.feeFrequency.id;
                    scope.formData.feeInterval = data.feeInterval;
                }

                //when chargeAppliesTo is savings, below logic is
                //to display 'Due date' field, if chargeTimeType is
                // 'annual fee' or 'monthly fee'
                if (scope.formData.chargeAppliesTo === 2) {
                    if (data.chargeTimeType.value === "Annual Fee" || data.chargeTimeType.value === "Monthly Fee") {
                        scope.showdatefield = true;
                        if (data.feeOnMonthDay) {
                            data.feeOnMonthDay.push(2013);
                            var actDate = dateFilter(data.feeOnMonthDay, 'dd MMMM');
                            scope.first.date = new Date(actDate);
                            //to display "Repeats Every" field ,if chargeTimeType is
                            // 'monthly fee'
                            if (data.chargeTimeType.value === "Monthly Fee") {
                                scope.repeatEvery = true;
                                scope.formData.feeInterval = data.feeInterval;
                            } else {
                                scope.repeatEvery = false;
                            }
                        }
                    } else {
                        scope.showdatefield = false;
                    }
                } else {
                    scope.formData.chargePaymentMode = data.chargePaymentMode.id;
                }
            });
            //when chargeAppliesTo is savings, below logic is
            //to display 'Due date' field, if chargeTimeType is
            // 'annual fee' or 'monthly fee'
            scope.chargeTimeChange = function (chargeTimeType) {
		if ((chargeTimeType === 12) && (scope.template.chargeAppliesTo.value === "Loan"))
		{
			scope.showFrequencyOptions = false;
		}
		else
		{
			scope.showFrequencyOptions = true;
		}
                if (scope.formData.chargeAppliesTo === 2) {
                    for (var i in scope.template.chargeTimeTypeOptions) {
                        if (chargeTimeType === scope.template.chargeTimeTypeOptions[i].id) {
                            if (scope.template.chargeTimeTypeOptions[i].value == "Annual Fee" || scope.template.chargeTimeTypeOptions[i].value == "Monthly Fee") {
                                scope.showdatefield = true;
                                //to show 'repeats every' field for monthly fee
                                if (scope.template.chargeTimeTypeOptions[i].value == "Monthly Fee") {
                                    scope.repeatEvery = true;
                                } else {
                                    scope.repeatEvery = false;
                                }
                            } else {
                                scope.showdatefield = false;
                            }
                        }
                    }
                }
            }

            scope.filterChargeCalculations = function(chargeTimeType) {
                return function (item) {
                    if (chargeTimeType == 12 && ((item.id == 3) || (item.id == 4)))
                    {
                        return false;
                    }
                    if (chargeTimeType != 12 && item.id == 5)
                    {
                        return false;
                    }
                    return true;
                };
            };

            scope.submit = function () {
                if (scope.formData.chargeAppliesTo === 2) {
                    if (scope.showdatefield === true) {
                        var reqDate = dateFilter(scope.first.date, 'dd MMMM');
                        this.formData.monthDayFormat = 'dd MMM';
                        this.formData.feeOnMonthDay = reqDate;
                    }
                }else if(scope.addfeefrequency == 'false'){
                    scope.formData.feeFrequency = null;
                    scope.formData.feeInterval = null;
                }
                this.formData.locale = scope.optlang.code;
                this.formData.active = this.formData.active || false;
                this.formData.penalty = this.formData.penalty || false;
                resourceFactory.chargeResource.update({chargeId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewcharge/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditChargeController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.EditChargeController]).run(function ($log) {
        $log.info("EditChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditFixedDepositProductController: function (scope, resourceFactory, location, routeParams, dateFilter,$uibModal) {
            scope.formData = {};
            scope.charges = [];
            scope.showOrHideValue = "show";
            scope.configureFundOptions = [];
            scope.specificIncomeaccounts = [];
            scope.penaltySpecificIncomeaccounts = [];
            scope.configureFundOption = {};

            //interest rate chart details
            scope.chart = {};
            scope.restrictDate = new Date();
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting
            scope.deletedincentives = [];
            scope.isPrimaryGroupingByAmount = false;

            resourceFactory.fixedDepositProductResource.get({productId: routeParams.productId, template: 'true'}, function (data) {
                scope.product = data;
                scope.charges = data.charges;
                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [];
                scope.liabilityAccountOptions = scope.product.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];
                scope.expenseAccountOptions = scope.product.accountingMappingOptions.expenseAccountOptions || [];
                var interestFreePeriodFrequencyTypeId = (_.isNull(data.interestFreePeriodFrequencyType) || _.isUndefined(data.interestFreePeriodFrequencyType)) ? '' : data.interestFreePeriodFrequencyType.id;
                var preClosurePenalInterestOnTypeId = (_.isNull(data.preClosurePenalInterestOnType) || _.isUndefined(data.preClosurePenalInterestOnType)) ? '' : data.preClosurePenalInterestOnType.id;
                var minDepositTermTypeId = (_.isNull(data.minDepositTermType) || _.isUndefined(data.minDepositTermType)) ? '' : data.minDepositTermType.id;
                var maxDepositTermTypeId = (_.isNull(data.maxDepositTermType) || _.isUndefined(data.maxDepositTermType)) ? '' : data.maxDepositTermType.id;
                var inMultiplesOfDepositTermTypeId = (_.isNull(data.inMultiplesOfDepositTermType) || _.isUndefined(data.inMultiplesOfDepositTermType)) ? '' : data.inMultiplesOfDepositTermType.id;
                scope.formData = {
                    name: data.name,
                    shortName: data.shortName,
                    description: data.description,
                    currencyCode: data.currency.code,
                    digitsAfterDecimal: data.currency.decimalPlaces,
                    inMultiplesOf: data.currency.inMultiplesOf,
                    minDepositAmount: data.minDepositAmount,
                    depositAmount: data.depositAmount,
                    maxDepositAmount: data.maxDepositAmount,
                    nominalAnnualInterestRate: data.nominalAnnualInterestRate,
                    minRequiredOpeningBalance: data.minRequiredOpeningBalance,
                    lockinPeriodFrequency: data.lockinPeriodFrequency,
                    interestCompoundingPeriodType: data.interestCompoundingPeriodType.id,
                    interestPostingPeriodType: data.interestPostingPeriodType.id,
                    interestCalculationType: data.interestCalculationType.id,
                    interestCalculationDaysInYearType: data.interestCalculationDaysInYearType.id,
                    accountingRule: data.accountingRule.id,
//                    interestFreePeriodApplicable: data.interestFreePeriodApplicable,
//                    interestFreeFromPeriod: data.interestFreeFromPeriod,
//                    interestFreeToPeriod: data.interestFreeToPeriod,
//                    interestFreePeriodFrequencyTypeId: interestFreePeriodFrequencyTypeId,
                    preClosurePenalApplicable: data.preClosurePenalApplicable,
                    preClosurePenalInterest: data.preClosurePenalInterest,
                    preClosurePenalInterestOnTypeId: preClosurePenalInterestOnTypeId,
                    minDepositTerm: data.minDepositTerm,
                    maxDepositTerm: data.maxDepositTerm,
                    minDepositTermTypeId: minDepositTermTypeId,
                    maxDepositTermTypeId: maxDepositTermTypeId,
                    inMultiplesOfDepositTerm: data.inMultiplesOfDepositTerm,
                    inMultiplesOfDepositTermTypeId: inMultiplesOfDepositTermTypeId,
                    withHoldTax: data.withHoldTax == true ? 'true' : 'false'
                }

                if(data.withHoldTax){
                    scope.formData.taxGroupId = data.taxGroup.id;
                }
                scope.chart = scope.product.activeChart;

                _.each(scope.chart.chartSlabs, function (chartSlab) {
                    _.each(chartSlab.incentives, function (incentive){
                        incentive.attributeValue = parseInt(incentive.attributeValue);
                    })
                })
                //format chart date values
                if (scope.chart.fromDate) {
                    var fromDate = dateFilter(scope.chart.fromDate, scope.df);
                    scope.fromDate.date = new Date(fromDate);
                }
                if (scope.chart.endDate) {
                    var endDate = dateFilter(scope.chart.endDate, scope.df);
                    scope.endDate.date = new Date(endDate);
                }
                scope.isPrimaryGroupingByAmount = scope.chart.isPrimaryGroupingByAmount;
                if (data.lockinPeriodFrequencyType) {
                    scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                }

                if (scope.formData.accountingRule == 2) {
                    scope.formData.savingsReferenceAccountId = data.accountingMappings.savingsReferenceAccount.id;
                    scope.formData.savingsControlAccountId = data.accountingMappings.savingsControlAccount.id;
                    scope.formData.transfersInSuspenseAccountId = data.accountingMappings.transfersInSuspenseAccount.id;
                    scope.formData.incomeFromFeeAccountId = data.accountingMappings.incomeFromFeeAccount.id;
                    scope.formData.incomeFromPenaltyAccountId = data.accountingMappings.incomeFromPenaltyAccount.id;
                    scope.formData.interestOnSavingsAccountId = data.accountingMappings.interestOnSavingsAccount.id;

                    _.each(scope.product.paymentChannelToFundSourceMappings, function (fundSource) {
                        scope.configureFundOptions.push({
                            paymentTypeId: fundSource.paymentType.id,
                            fundSourceAccountId: fundSource.fundSourceAccount.id,
                            paymentTypeOptions: scope.product.paymentTypeOptions,
                            assetAccountOptions: scope.assetAccountOptions
                        })
                    });

                    _.each(scope.product.feeToIncomeAccountMappings, function (fees) {
                        scope.specificIncomeaccounts.push({
                            chargeId: fees.charge.id,
                            incomeAccountId: fees.incomeAccount.id,
                            chargeOptions: scope.product.chargeOptions,
                            incomeAccountOptions: scope.incomeAccountOptions
                        })
                    });

                    _.each(scope.product.penaltyToIncomeAccountMappings, function (penalty) {
                        scope.penaltySpecificIncomeaccounts.push({
                            chargeId: penalty.charge.id,
                            incomeAccountId: penalty.incomeAccount.id,
                            penaltyOptions: scope.product.penaltyOptions,
                            incomeAccountOptions: scope.incomeAccountOptions
                        })
                    });
                }
            });

            //advanced accounting rule
            scope.showOrHide = function (showOrHideValue) {

                if (showOrHideValue == "show") {
                    scope.showOrHideValue = 'hide';
                }

                if (showOrHideValue == "hide") {
                    scope.showOrHideValue = 'show';
                }
            }

            scope.chargeSelected = function (chargeId) {
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty
                        scope.chargeId = '';
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.addConfigureFundSource = function () {
                if (scope.product.paymentTypeOptions && scope.product.paymentTypeOptions.length > 0 &&
                    scope.assetAccountOptions && scope.assetAccountOptions.length > 0) {
                    scope.configureFundOptions.push({
                        paymentTypeId: scope.product.paymentTypeOptions[0].id,
                        fundSourceAccountId: scope.assetAccountOptions[0].id,
                        paymentTypeOptions: scope.product.paymentTypeOptions,
                        assetAccountOptions: scope.assetAccountOptions
                    });
                }
            }

            scope.mapFees = function () {
                if (scope.product.chargeOptions && scope.product.chargeOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.specificIncomeaccounts.push({
                        chargeId: scope.product.chargeOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        chargeOptions: scope.product.chargeOptions,
                        incomeAccountOptions: scope.product.accountingMappingOptions.incomeAccountOptions
                    });
                }
            }

            scope.mapPenalty = function () {
                if (scope.product.penaltyOptions && scope.product.penaltyOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.penaltySpecificIncomeaccounts.push({
                        chargeId: scope.product.penaltyOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        penaltyOptions: scope.product.penaltyOptions,
                        incomeAccountOptions: scope.incomeAccountOptions
                    });
                }
            }

            scope.deleteFund = function (index) {
                scope.configureFundOptions.splice(index, 1);
            }

            scope.deleteFee = function (index) {
                scope.specificIncomeaccounts.splice(index, 1);
            }

            scope.deletePenalty = function (index) {
                scope.penaltySpecificIncomeaccounts.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/viewfixeddepositproduct/' + routeParams.productId);
            };

            scope.submit = function () {
                scope.paymentChannelToFundSourceMappings = [];
                scope.feeToIncomeAccountMappings = [];
                scope.penaltyToIncomeAccountMappings = [];
                scope.chargesSelected = [];

                var temp = '';

                //configure fund sources for payment channels
                for (var i in scope.configureFundOptions) {
                    temp = {
                        paymentTypeId: scope.configureFundOptions[i].paymentTypeId,
                        fundSourceAccountId: scope.configureFundOptions[i].fundSourceAccountId
                    }
                    scope.paymentChannelToFundSourceMappings.push(temp);
                }

                //map fees to specific income accounts
                for (var i in scope.specificIncomeaccounts) {
                    temp = {
                        chargeId: scope.specificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.specificIncomeaccounts[i].incomeAccountId,
                    }
                    scope.feeToIncomeAccountMappings.push(temp);
                }

                //map penalties to specific income accounts
                for (var i in scope.penaltySpecificIncomeaccounts) {
                    temp = {
                        chargeId: scope.penaltySpecificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.penaltySpecificIncomeaccounts[i].incomeAccountId,
                    }
                    scope.penaltyToIncomeAccountMappings.push(temp);
                }

                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }

                this.formData.paymentChannelToFundSourceMappings = scope.paymentChannelToFundSourceMappings;
                this.formData.feeToIncomeAccountMappings = scope.feeToIncomeAccountMappings;
                this.formData.penaltyToIncomeAccountMappings = scope.penaltyToIncomeAccountMappings;
                this.formData.charges = scope.chargesSelected;
                this.formData.locale = scope.optlang.code;
                this.formData.charts = [];//declare charts array
                this.formData.charts.push(copyChartData(scope.chart));//add chart details
                this.formData = removeEmptyValues(this.formData);
                resourceFactory.fixedDepositProductResource.update({productId: routeParams.productId}, this.formData, function (data) {
                    location.path('/viewfixeddepositproduct/' + data.resourceId);
                });
            }

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = '';
                var toPeriod = '';
                var amountRangeTo = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }else{
                        lastChartSlab = null;
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        if(scope.isPrimaryGroupingByAmount){
                            if((_.isNull(lastChartSlab.toPeriod) || _.isUndefined(lastChartSlab.toPeriod) || lastChartSlab.toPeriod.length == 0)){
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                                fromPeriod = (_.isNull(lastChartSlab.fromPeriod) || _.isUndefined(lastChartSlab.fromPeriod) || lastChartSlab.fromPeriod.length == 0)? '' : 1;
                            }else{
                                amountRangeFrom = lastChartSlab.amountRangeFrom;
                                amountRangeTo = lastChartSlab.amountRangeTo;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                            }
                        }else{
                            if((_.isNull(lastChartSlab.amountRangeTo) || _.isUndefined(lastChartSlab.amountRangeTo) || lastChartSlab.amountRangeTo.length == 0)){
                                amountRangeFrom = (_.isNull(lastChartSlab.amountRangeFrom) || _.isUndefined(lastChartSlab.amountRangeFrom) || lastChartSlab.amountRangeFrom.length == 0) ? '' : 1;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.toPeriod) + 1;
                            }else{
                                fromPeriod = lastChartSlab.fromPeriod;
                                toPeriod = lastChartSlab.toPeriod;
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.amountRangeTo) + 1;
                            }
                        }
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom,
                    "incentives":[]
                };
                if(!_.isUndefined(toPeriod) && toPeriod.length > 0){
                    chartSlab.toPeriod = toPeriod;
                }
                if(!_.isUndefined(amountRangeTo) && amountRangeTo.length > 0){
                    chartSlab.amountRangeTo = amountRangeTo;
                }
                scope.chart.chartSlabs.push(chartSlab);
            }


            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var newChartData = {
                    id: scope.chart.id,
                    name: scope.chart.name,
                    description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.isPrimaryGroupingByAmount,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs))
                }

                //remove empty values
                _.each(newChartData, function (v, k) {
                    if (!v)
                        delete newChartData[k];
                });

                return newChartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives,chartSlab.id))
                }

                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }

                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (!v && v != 0)
                        delete newChartSlabData[k];
                });

                return newChartSlabData;
            }

            removeEmptyValues = function (objArray) {
                _.each(objArray, function (v, k) {
                    //alert(k + ':' + v);
                    if (_.isNull(v) || _.isUndefined(v) || v === '') {
                        //alert('remove' + k + ':' + v);
                        delete objArray[k];
                    }

                });

                return objArray;
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }


            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        },
                        index: function () {
                            return index;
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives,slabId) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                _.each(scope.deletedincentives,function(del){
                   if(del.id == slabId){
                       detailsArray.push(del.data);
                   }
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount,
                    locale: scope.optlang.code

                }
                if(incentiveData.id){
                    newIncentiveDataData.entityType = incentiveData.entityType.id;
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                if(!$scope.chartSlab.incentives) {
                    $scope.chartSlab.incentives = [];
                }
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {

                    var incentive = {
                        id:$scope.chartSlab.incentives[index].id,
                        delete:'true'
                    }
                    var deldata = {
                        id:chartSlab.id,
                        data:incentive
                    }
                    scope.deletedincentives.push(deldata);
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };
        }
    });
    mifosX.ng.application.controller('EditFixedDepositProductController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter','$uibModal', mifosX.controllers.EditFixedDepositProductController]).run(function ($log) {
        $log.info("EditFixedDepositProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditInterestRateChartController: function (scope, resourceFactory, location, routeParams, dateFilter,$uibModal) {
            scope.formData = {};//used for update/save form data
            scope.restrictDate = new Date();
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting
            scope.deletedincentives = [];
            scope.isPrimaryGroupingByAmount = false;

            //Fixed deposit product details
            scope.productName = routeParams.productName;
            scope.productId = routeParams.productId;

            scope.productsLink = '';
            scope.viewProductLink = '';
            scope.productType = routeParams.productType;
            //alert(scope.productType);
            if (routeParams.productType === 'fixeddepositproduct') {
                scope.productsLink = 'fixeddepositproducts';
                scope.viewProductLink = 'viewfixeddepositproduct';
            } else if (routeParams.productType === 'recurringdepositproduct') {
                scope.productsLink = 'recurringdepositproducts';
                scope.viewProductLink = 'viewrecurringdepositproduct';
            }

            //get a interestrate chart
            resourceFactory.interestRateChartResource.get({chartId: routeParams.chartId, productId: routeParams.productId, template: true, associations: 'chartSlabs'}, function (data) {
                scope.chart = data;
                _.each(scope.chart.chartSlabs, function (chartSlab) {
                    _.each(chartSlab.incentives, function (incentive){
                        incentive.attributeValue = parseInt(incentive.attributeValue);
                    })
                })

                //format date values
                if (scope.chart.fromDate) {
                    var fromDate = dateFilter(scope.chart.fromDate, scope.df);
                    scope.fromDate.date = new Date(fromDate);
                }
                if (scope.chart.endDate) {
                    var endDate = dateFilter(scope.chart.endDate, scope.df);
                    scope.endDate.date = new Date(endDate);
                }
                scope.isPrimaryGroupingByAmount = scope.chart.isPrimaryGroupingByAmount;
            });

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = '';
                var toPeriod = '';
                var amountRangeTo = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }else{
                        lastChartSlab = null;
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        if(scope.isPrimaryGroupingByAmount){
                            if((_.isNull(lastChartSlab.toPeriod) || _.isUndefined(lastChartSlab.toPeriod) || lastChartSlab.toPeriod.length == 0)){
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                                fromPeriod = (_.isNull(lastChartSlab.fromPeriod) || _.isUndefined(lastChartSlab.fromPeriod) || lastChartSlab.fromPeriod.length == 0)? '' : 1;
                            }else{
                                amountRangeFrom = lastChartSlab.amountRangeFrom;
                                amountRangeTo = lastChartSlab.amountRangeTo;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                            }
                        }else{
                            if((_.isNull(lastChartSlab.amountRangeTo) || _.isUndefined(lastChartSlab.amountRangeTo) || lastChartSlab.amountRangeTo.length == 0)){
                                amountRangeFrom = (_.isNull(lastChartSlab.amountRangeFrom) || _.isUndefined(lastChartSlab.amountRangeFrom) || lastChartSlab.amountRangeFrom.length == 0) ? '' : 1;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.toPeriod) + 1;
                            }else{
                                fromPeriod = lastChartSlab.fromPeriod;
                                toPeriod = lastChartSlab.toPeriod;
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.amountRangeTo) + 1;
                            }
                        }
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom,
                    "incentives":[]
                };
                if(!_.isUndefined(toPeriod) && toPeriod.length > 0){
                    chartSlab.toPeriod = toPeriod;
                }
                if(!_.isUndefined(amountRangeTo) && amountRangeTo.length > 0){
                    chartSlab.amountRangeTo = amountRangeTo;
                }
                scope.chart.chartSlabs.push(chartSlab);
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }

            //back to deposit product view
            scope.cancel = function () {
                location.path('/interestratecharts/' + routeParams.productId + '/' + routeParams.productName + '/' + routeParams.productType);
            };

            /**
             * Update Interest rate chart details
             */
            scope.submitInterestRateChartForm = function () {
                var chartData = copyChartData(scope.chart);
                scope.formData.charts = [];//declare charts array
                scope.formData.charts.push(chartData);//add chart details

                if (routeParams.productType === 'fixeddepositproduct') {
                    resourceFactory.fixedDepositProductResource.update({productId: routeParams.productId}, scope.formData, function (data) {
                        location.path('/interestratecharts/' + routeParams.productId + '/' + routeParams.productName + '/' + scope.productType);
                    });
                } else if (routeParams.productType === 'recurringdepositproduct') {
                    resourceFactory.recurringDepositProductResource.update({productId: routeParams.productId}, scope.formData, function (data) {
                        location.path('/interestratecharts/' + routeParams.productId + '/' + routeParams.productName + '/' + scope.productType);
                    });
                }

                //resourceFactory.interestRateChartResource.update({chartId: routeParams.chartId}, chartData, function (data) {
                //  location.path('/interestratecharts/' + routeParams.productId + '/' + routeParams.productName);
                //});

            }

            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var chartData = {
                    name: scope.chart.name,
                    id: scope.chart.id,
                    description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.isPrimaryGroupingByAmount,
                    //savingsProductId: scope.chart.savingsProductId,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs))
                }

                return chartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives,chartSlab.id))
                }
                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }

                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (!v && v != 0)
                        delete newChartSlabData[k];
                });

                return newChartSlabData;
            }

            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives,slabId) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                _.each(scope.deletedincentives,function(del){
                    if(del.id == slabId){
                        detailsArray.push(del.data);
                    }
                });

                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount,
                    locale: scope.optlang.code

                }
                if(incentiveData.id){
                    newIncentiveDataData.entityType = incentiveData.entityType.id;
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                if(!$scope.chartSlab.incentives) {
                    $scope.chartSlab.incentives = [];
                }
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {
                    var incentive = {
                        id:$scope.chartSlab.incentives[index].id,
                        delete:'true'
                    }
                    var deldata = {
                        id:chartSlab.id,
                        data:incentive
                    }
                    scope.deletedincentives.push(deldata);
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };

        }

    });
    mifosX.ng.application.controller('EditInterestRateChartController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter','$uibModal', mifosX.controllers.EditInterestRateChartController]).run(function ($log) {
        $log.info("EditInterestRateChartController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditLoanProductController: function (scope, resourceFactory, location, routeParams, dateFilter, translate) {
            scope.formData = {};
            scope.restrictDate = new Date();
            scope.charges = [];
            scope.loanProductConfigurableAttributes = [];
            scope.showOrHideValue = "show";
            scope.configureFundOptions = [];
            scope.specificIncomeAccountMapping = [];
            scope.penaltySpecificIncomeaccounts = [];
            scope.configureFundOption = {};
            scope.date = {};
            scope.irFlag = false;
            scope.pvFlag = false;
            scope.rvFlag = false;
            scope.interestRecalculationOnDayTypeOptions = [];
            scope.translate = translate;
            //Rates
            scope.rates = [];
            scope.rateFlag = false;
            for (var i = 1; i <= 28; i++) {
                scope.interestRecalculationOnDayTypeOptions.push(i);
            }

            resourceFactory.loanProductResource.get({loanProductId: routeParams.id, template: 'true'}, function (data) {
                scope.product = data;
                scope.ratesEnabled = data.ratesEnabled;
                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];
                scope.expenseAccountOptions = scope.product.accountingMappingOptions.expenseAccountOptions || [];
                scope.liabilityAccountOptions = data.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAndLiabilityAccountOptions = scope.incomeAccountOptions.concat(scope.liabilityAccountOptions);
                scope.penaltyOptions = scope.product.penaltyOptions || [];
                scope.chargeOptions = scope.product.chargeOptions || [];
                scope.charges = scope.product.charges || [];
                if (data.startDate) {
                    scope.date.first = new Date(data.startDate);
                }
                if (data.closeDate) {
                    scope.date.second = new Date(data.closeDate);
                }
                scope.overduecharges = [];
                for (var i in scope.penaltyOptions) {
                    if(scope.penaltyOptions[i].chargeTimeType.code == 'chargeTimeType.overdueInstallment')
                    {
                        scope.overduecharges.push(scope.penaltyOptions[i]);
                    }
                }
                scope.product.interestRecalculationNthDayTypeOptions.push({"code" : "onDay", "id" : -2, "value" : "on day"});
                scope.formData = {
                    name: scope.product.name,
                    shortName: scope.product.shortName,
                    description: scope.product.description,
                    fundId: scope.product.fundId,
                    description: scope.product.description,
                    includeInBorrowerCycle: scope.product.includeInBorrowerCycle,
                    useBorrowerCycle: scope.product.useBorrowerCycle,
                    currencyCode: scope.product.currency.code,
                    digitsAfterDecimal: scope.product.currency.decimalPlaces,
                    inMultiplesOf: scope.product.currency.inMultiplesOf,
                    principal: scope.product.principal,
                    minPrincipal: scope.product.minPrincipal,
                    maxPrincipal: scope.product.maxPrincipal,
                    numberOfRepayments: scope.product.numberOfRepayments,
                    minNumberOfRepayments: scope.product.minNumberOfRepayments,
                    maxNumberOfRepayments: scope.product.maxNumberOfRepayments,
                    repaymentEvery: scope.product.repaymentEvery,
                    repaymentFrequencyType: scope.product.repaymentFrequencyType.id,
                    interestRatePerPeriod: scope.product.interestRatePerPeriod,
                    minInterestRatePerPeriod: scope.product.minInterestRatePerPeriod,
                    maxInterestRatePerPeriod: scope.product.maxInterestRatePerPeriod,
                    interestRateFrequencyType: scope.product.interestRateFrequencyType.id,
                    amortizationType: scope.product.amortizationType.id,
                    interestType: scope.product.interestType.id,
                    interestCalculationPeriodType: scope.product.interestCalculationPeriodType.id,
                    allowPartialPeriodInterestCalcualtion:scope.product.allowPartialPeriodInterestCalcualtion,
                    inArrearsTolerance: scope.product.inArrearsTolerance,
                    transactionProcessingStrategyId: scope.product.transactionProcessingStrategyId,
                    graceOnPrincipalPayment: scope.product.graceOnPrincipalPayment,
                    graceOnInterestPayment: scope.product.graceOnInterestPayment,
                    graceOnInterestCharged: scope.product.graceOnInterestCharged,
                    graceOnArrearsAgeing: scope.product.graceOnArrearsAgeing,
                    overdueDaysForNPA: scope.product.overdueDaysForNPA,
                    accountMovesOutOfNPAOnlyOnArrearsCompletion: scope.product.accountMovesOutOfNPAOnlyOnArrearsCompletion,
                    accountingRule: scope.product.accountingRule.id,
                    principalVariationsForBorrowerCycle: [],
                    interestRateVariationsForBorrowerCycle: [],
                    numberOfRepaymentVariationsForBorrowerCycle: [],
                    multiDisburseLoan: scope.product.multiDisburseLoan,
                    maxTrancheCount: scope.product.maxTrancheCount,
                    outstandingLoanBalance: scope.product.outstandingLoanBalance,
                    daysInYearType: scope.product.daysInYearType.id,
                    daysInMonthType: scope.product.daysInMonthType.id,
                    isInterestRecalculationEnabled: scope.product.isInterestRecalculationEnabled,
                    holdGuaranteeFunds:scope.product.holdGuaranteeFunds,
                    minimumDaysBetweenDisbursalAndFirstRepayment: scope.product.minimumDaysBetweenDisbursalAndFirstRepayment,
                    principalThresholdForLastInstallment: scope.product.principalThresholdForLastInstallment,
                    installmentAmountInMultiplesOf: scope.product.installmentAmountInMultiplesOf,
                    canDefineInstallmentAmount : scope.product.canDefineInstallmentAmount,
                    isEqualAmortization : scope.product.isEqualAmortization,
                };

                if (scope.product.isInterestRecalculationEnabled) {
                    scope.formData.interestRecalculationCompoundingMethod = scope.product.interestRecalculationData.interestRecalculationCompoundingType.id;
                    scope.formData.rescheduleStrategyMethod = scope.product.interestRecalculationData.rescheduleStrategyType.id;
                    scope.formData.recalculationRestFrequencyType = scope.product.interestRecalculationData.recalculationRestFrequencyType.id;
                    scope.formData.recalculationRestFrequencyInterval = scope.product.interestRecalculationData.recalculationRestFrequencyInterval;
                    scope.formData.isArrearsBasedOnOriginalSchedule = scope.product.interestRecalculationData.isArrearsBasedOnOriginalSchedule;
                    scope.formData.preClosureInterestCalculationStrategy = scope.product.interestRecalculationData.preClosureInterestCalculationStrategy.id;
                    if (scope.product.interestRecalculationData.recalculationRestFrequencyOnDay != null) {
                        scope.formData.recalculationRestFrequencyNthDayType = -2;
                        scope.formData.recalculationRestFrequencyOnDayType = scope.product.interestRecalculationData.recalculationRestFrequencyOnDay;
                    } else {
                        if (scope.product.interestRecalculationData.recalculationRestFrequencyNthDay != null)
                            scope.formData.recalculationRestFrequencyNthDayType = scope.product.interestRecalculationData.recalculationRestFrequencyNthDay.id;
                        if (scope.product.interestRecalculationData.recalculationRestFrequencyWeekday != null)
                            scope.formData.recalculationRestFrequencyDayOfWeekType = scope.product.interestRecalculationData.recalculationRestFrequencyWeekday.id;
                    }
                    if(scope.formData.interestRecalculationCompoundingMethod != 0){
                        scope.formData.recalculationCompoundingFrequencyType = scope.product.interestRecalculationData.recalculationCompoundingFrequencyType.id;
                        scope.formData.recalculationCompoundingFrequencyInterval = scope.product.interestRecalculationData.recalculationCompoundingFrequencyInterval;
                        
                        if (scope.product.interestRecalculationData.recalculationCompoundingFrequencyOnDay != null) {
                            scope.formData.recalculationCompoundingFrequencyNthDayType = -2;
                            scope.formData.recalculationCompoundingFrequencyOnDayType = scope.product.interestRecalculationData.recalculationCompoundingFrequencyOnDay;
                        } else {
                            if (scope.product.interestRecalculationData.recalculationCompoundingFrequencyNthDay != null)
                                scope.formData.recalculationCompoundingFrequencyNthDayType = scope.product.interestRecalculationData.recalculationCompoundingFrequencyNthDay.id;
                            if (scope.product.interestRecalculationData.recalculationCompoundingFrequencyWeekday != null)
                                scope.formData.recalculationCompoundingFrequencyDayOfWeekType = scope.product.interestRecalculationData.recalculationCompoundingFrequencyWeekday.id;
                        }
                    }

                }
                if(scope.product.allowAttributeOverrides != null){
                    console.log('scope.product.allowAttributeOverrides : ',scope.product.allowAttributeOverrides);
                    scope.amortization = scope.product.allowAttributeOverrides.amortizationType;
                    scope.arrearsTolerance = scope.product.allowAttributeOverrides.inArrearsTolerance;
                    scope.graceOnArrearsAging = scope.product.allowAttributeOverrides.graceOnArrearsAgeing;
                    scope.interestCalcPeriod = scope.product.allowAttributeOverrides.interestCalculationPeriodType;
                    scope.interestMethod = scope.product.allowAttributeOverrides.interestType;
                    scope.graceOnPrincipalAndInterest = scope.product.allowAttributeOverrides.graceOnPrincipalAndInterestPayment;
                    scope.repaymentFrequency = scope.product.allowAttributeOverrides.repaymentEvery;
                    scope.transactionProcessingStrategy = scope.product.allowAttributeOverrides.transactionProcessingStrategyId;
                }
                if(scope.amortization || scope.arrearsTolerance || scope.graceOnArrearsAgeing ||
                scope.interestCalcPeriod || scope.interestMethod || scope.graceOnPrincipalAndInterest ||
                scope.repaymentFrequency || scope.transactionProcessingStrategy == true){
                    scope.allowAttributeConfiguration = true;
                }
                else{
                    scope.allowAttributeConfiguration = false;
                }

                if (scope.product.holdGuaranteeFunds) {
                    scope.formData.mandatoryGuarantee = scope.product.productGuaranteeData.mandatoryGuarantee;
                    scope.formData.minimumGuaranteeFromOwnFunds = scope.product.productGuaranteeData.minimumGuaranteeFromOwnFunds;
                    scope.formData.minimumGuaranteeFromGuarantor = scope.product.productGuaranteeData.minimumGuaranteeFromGuarantor;
                }

                _.each(scope.product.principalVariationsForBorrowerCycle, function (variation) {
                    scope.formData.principalVariationsForBorrowerCycle.push({
                        id: variation.id,
                        borrowerCycleNumber: variation.borrowerCycleNumber,
                        valueConditionType: variation.valueConditionType.id,
                        minValue: variation.minValue,
                        maxValue: variation.maxValue,
                        defaultValue: variation.defaultValue
                    })
                });

                _.each(scope.product.interestRateVariationsForBorrowerCycle, function (variation) {
                    scope.formData.interestRateVariationsForBorrowerCycle.push({
                        id: variation.id,
                        borrowerCycleNumber: variation.borrowerCycleNumber,
                        valueConditionType: variation.valueConditionType.id,
                        minValue: variation.minValue,
                        maxValue: variation.maxValue,
                        defaultValue: variation.defaultValue
                    })
                });

                _.each(scope.product.numberOfRepaymentVariationsForBorrowerCycle, function (variation) {
                    scope.formData.numberOfRepaymentVariationsForBorrowerCycle.push({
                        id: variation.id,
                        borrowerCycleNumber: variation.borrowerCycleNumber,
                        valueConditionType: variation.valueConditionType.id,
                        minValue: variation.minValue,
                        maxValue: variation.maxValue,
                        defaultValue: variation.defaultValue
                    })
                });

                scope.setFlag();
                if (scope.formData.accountingRule == 2 || scope.formData.accountingRule == 3 || scope.formData.accountingRule == 4) {
                    scope.formData.fundSourceAccountId = scope.product.accountingMappings.fundSourceAccount.id;
                    scope.formData.loanPortfolioAccountId = scope.product.accountingMappings.loanPortfolioAccount.id;
                    if (scope.formData.accountingRule == 3 || scope.formData.accountingRule == 4) {
                        scope.formData.receivableInterestAccountId = scope.product.accountingMappings.receivableInterestAccount.id;
                        scope.formData.receivableFeeAccountId = scope.product.accountingMappings.receivableFeeAccount.id;
                        scope.formData.receivablePenaltyAccountId = scope.product.accountingMappings.receivablePenaltyAccount.id;
                    }

                    scope.formData.transfersInSuspenseAccountId = scope.product.accountingMappings.transfersInSuspenseAccount.id;
                    scope.formData.interestOnLoanAccountId = scope.product.accountingMappings.interestOnLoanAccount.id;
                    scope.formData.incomeFromFeeAccountId = scope.product.accountingMappings.incomeFromFeeAccount.id;
                    scope.formData.incomeFromPenaltyAccountId = scope.product.accountingMappings.incomeFromPenaltyAccount.id;
                    scope.formData.incomeFromRecoveryAccountId = scope.product.accountingMappings.incomeFromRecoveryAccount.id;
                    scope.formData.writeOffAccountId = scope.product.accountingMappings.writeOffAccount.id;
                    scope.formData.overpaymentLiabilityAccountId = scope.product.accountingMappings.overpaymentLiabilityAccount.id;

                    _.each(scope.product.paymentChannelToFundSourceMappings, function (fundSource) {
                        scope.configureFundOptions.push({
                            paymentTypeId: fundSource.paymentType.id,
                            fundSourceAccountId: fundSource.fundSourceAccount.id,
                            paymentTypeOptions: scope.product.paymentTypeOptions,
                            assetAccountOptions: scope.assetAccountOptions
                        })
                    });

                    _.each(scope.product.feeToIncomeAccountMappings, function (fees) {
                        scope.specificIncomeAccountMapping.push({
                            chargeId: fees.charge.id,
                            incomeAccountId: fees.incomeAccount.id
                        })
                    });

                    _.each(scope.product.penaltyToIncomeAccountMappings, function (penalty) {
                        scope.penaltySpecificIncomeaccounts.push({
                            chargeId: penalty.charge.id,
                            incomeAccountId: penalty.incomeAccount.id
                        })
                    });
                }

                scope.formData.isLinkedToFloatingInterestRates = data.isLinkedToFloatingInterestRates ;
                scope.formData.floatingRatesId = data.floatingRateId ;
                scope.formData.interestRateDifferential = data.interestRateDifferential ;
                scope.formData.isFloatingInterestRateCalculationAllowed = data.isFloatingInterestRateCalculationAllowed ;
                scope.formData.minDifferentialLendingRate = data.minDifferentialLendingRate ;
                scope.formData.defaultDifferentialLendingRate = data.defaultDifferentialLendingRate ;
                scope.formData.maxDifferentialLendingRate = data.maxDifferentialLendingRate ;
                scope.floatingRateOptions = data.floatingRateOptions ;
                scope.formData.allowVariableInstallments = scope.product.allowVariableInstallments ;
                scope.formData.minimumGap = scope.product.minimumGap;
                scope.formData.maximumGap = scope.product.maximumGap;
                scope.formData.canUseForTopup = scope.product.canUseForTopup;

                //Rate Module
                scope.formData.rates = scope.product.rates;
                scope.rateOptions = scope.product.rateOptions || [];
                scope.calculatedRatePerPeriod = scope.product.interestRatePerPeriod;
                scope.enableRates = scope.product.isRatesEnabled;

                if (scope.enableRates){
                  if (scope.formData.rates && scope.formData.rates.length>0){
                    scope.rateFlag=true;
                  }
                  scope.formData.rates.forEach(function(rate){
                    scope.rateOptions.forEach(function(rateOption, index, array){
                      if(rate.name === rateOption.name){
                        scope.rateOptions.splice(index,1);
                      }
                    });
                  });
                }
            });

            //Rate
            scope.rateSelected = function(currentRate){

                if(currentRate){
                    scope.formData.rates.push(currentRate);
                    scope.rateOptions.splice(scope.rateOptions.indexOf(currentRate),1);
                    scope.currentRate = '';
                    scope.calculateRates();
                }
            };

            scope.calculateRates = function(){
                var total = 0;
                var minRate = 0;
                scope.formData.rates.forEach(function(rate){
                    if(rate.percentage < minRate || minRate === 0){
                        minRate = rate.percentage;
                    }
                    total += rate.percentage;
                });

                if (minRate===0){
                  minRate=undefined;
                }
                if (total===0){
                  total=undefined;
                  scope.rateFlag=false;
                }
                scope.formData.minInterestRatePerPeriod = minRate;

                //Assign the same total range to this values.
                scope.formData.interestRatePerPeriod = total;
                scope.formData.maxInterestRatePerPeriod = total;
                scope.calculatedRatePerPeriod = total;

                console.log(scope.formData);

            };

            scope.deleteRate = function (index){
                scope.rateOptions.push(scope.formData.rates[index]);
                scope.formData.rates.splice(index,1);
                scope.calculateRates();
            };


            scope.chargeSelected = function (chargeId) {
                if(chargeId){
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty
                        scope.chargeId = '';
                        scope.penalityId = '';
                    });
                }
            };

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            };

            //advanced accounting rule
            scope.showOrHide = function (showOrHideValue) {
                if (showOrHideValue == "show") {
                    scope.showOrHideValue = 'hide';
                }

                if (showOrHideValue == "hide") {
                    scope.showOrHideValue = 'show';
                }
            };

            scope.addConfigureFundSource = function () {
                if (scope.product.paymentTypeOptions && scope.product.paymentTypeOptions.length > 0 &&
                    scope.assetAccountOptions && scope.assetAccountOptions.length > 0) {
                    scope.configureFundOptions.push({
                        paymentTypeId: scope.product.paymentTypeOptions[0].id,
                        fundSourceAccountId: scope.assetAccountOptions[0].id,
                        paymentTypeOptions: scope.product.paymentTypeOptions,
                        assetAccountOptions: scope.assetAccountOptions
                    });
                }
            };

            scope.mapFees = function () {
                if (scope.product.chargeOptions && scope.product.chargeOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.specificIncomeAccountMapping.push({
                        chargeId: scope.chargeOptions.length > 0 ? scope.chargeOptions[0].id : '',
                        incomeAccountId: scope.incomeAndLiabilityAccountOptions.length > 0 ? scope.incomeAndLiabilityAccountOptions[0].id : ''
                    });
                }
            };

            scope.mapPenalty = function () {
                if (scope.product.penaltyOptions && scope.product.penaltyOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.penaltySpecificIncomeaccounts.push({
                        chargeId: scope.penaltyOptions.length > 0 ? scope.penaltyOptions[0].id : '',
                        incomeAccountId: scope.incomeAccountOptions.length > 0 ? scope.incomeAccountOptions[0].id : ''
                    });
                }
            };

            scope.addPrincipalVariation = function () {
                scope.pvFlag = true;
                scope.formData.principalVariationsForBorrowerCycle.push({
                    valueConditionType: scope.product.valueConditionTypeOptions[0].id
                })
            };
            scope.addInterestRateVariation = function () {
                scope.irFlag = true;
                scope.formData.interestRateVariationsForBorrowerCycle.push({
                    valueConditionType: scope.product.valueConditionTypeOptions[0].id
                })
            };
            scope.addNumberOfRepaymentVariation = function () {
                scope.rvFlag = true;
                scope.formData.numberOfRepaymentVariationsForBorrowerCycle.push({
                    valueConditionType: scope.product.valueConditionTypeOptions[0].id
                })
            };


            scope.deleteFund = function (index) {
                scope.configureFundOptions.splice(index, 1);
            };

            scope.deleteFee = function (index) {
                scope.specificIncomeAccountMapping.splice(index, 1);
            };

            scope.deletePenalty = function (index) {
                scope.penaltySpecificIncomeaccounts.splice(index, 1);
            };

            scope.deletePrincipalVariation = function (index) {
                scope.formData.principalVariationsForBorrowerCycle.splice(index, 1);
            };

            scope.deleteInterestRateVariation = function (index) {
                scope.formData.interestRateVariationsForBorrowerCycle.splice(index, 1);
            };

            scope.deleterepaymentVariation = function (index) {
                scope.formData.numberOfRepaymentVariationsForBorrowerCycle.splice(index, 1);
            };

            scope.isAccountingEnabled = function () {
                if (scope.formData.accountingRule == 2 || scope.formData.accountingRule == 3 || scope.formData.accountingRule == 4) {
                    return true;
                }
                return false;
            }

            scope.isAccrualAccountingEnabled = function () {
                if (scope.formData.accountingRule == 3 || scope.formData.accountingRule == 4) {
                    return true;
                }
                return false;
            }

            scope.setFlag = function () {
                if (scope.formData.principalVariationsForBorrowerCycle) {
                    scope.pvFlag = true;
                }
                if (scope.formData.numberOfRepaymentVariationsForBorrowerCycle) {
                    scope.rvFlag = true;
                }
                if (scope.formData.interestRateVariationsForBorrowerCycle) {
                    scope.irFlag = true;
                }
            };
            scope.setFlag();

            scope.setAttributeValues = function(){
                if(scope.allowAttributeConfiguration == false){
                    scope.amortization = false;
                    scope.arrearsTolerance = false;
                    scope.graceOnArrearsAging = false;
                    scope.interestCalcPeriod = false;
                    scope.interestMethod = false;
                    scope.graceOnPrincipalAndInterest = false;
                    scope.repaymentFrequency = false;
                    scope.transactionProcessingStrategy = false;
                }
            }

            scope.submit = function () {
                scope.paymentChannelToFundSourceMappings = [];
                scope.feeToIncomeAccountMappings = [];
                scope.penaltyToIncomeAccountMappings = [];
                scope.chargesSelected = [];
                scope.selectedConfigurableAttributes = [];
                var reqFirstDate = dateFilter(scope.date.first, scope.df);
                var reqSecondDate = dateFilter(scope.date.second, scope.df);
                var temp = '';
                //configure fund sources for payment channels
                for (var i in scope.configureFundOptions) {
                    temp = {
                        paymentTypeId: scope.configureFundOptions[i].paymentTypeId,
                        fundSourceAccountId: scope.configureFundOptions[i].fundSourceAccountId
                    }
                    scope.paymentChannelToFundSourceMappings.push(temp);
                }

                //map fees to specific income accounts
                for (var i in scope.specificIncomeAccountMapping) {
                    temp = {
                        chargeId: scope.specificIncomeAccountMapping[i].chargeId,
                        incomeAccountId: scope.specificIncomeAccountMapping[i].incomeAccountId
                    }
                    scope.feeToIncomeAccountMappings.push(temp);
                }

                //map penalties to specific income accounts
                for (var i in scope.penaltySpecificIncomeaccounts) {
                    temp = {
                        chargeId: scope.penaltySpecificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.penaltySpecificIncomeaccounts[i].incomeAccountId
                    }
                    scope.penaltyToIncomeAccountMappings.push(temp);
                }

                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }

                if(scope.allowAttributeConfiguration == false){
                    scope.amortization = false;
                    scope.arrearsTolerance = false;
                    scope.graceOnArrearsAging = false;
                    scope.interestCalcPeriod = false;
                    scope.interestMethod = false;
                    scope.graceOnPrincipalAndInterest = false;
                    scope.repaymentFrequency = false;
                    scope.transactionProcessingStrategy = false;
                }

                scope.selectedConfigurableAttributes = 
		{amortizationType:scope.amortization,
                    interestType:scope.interestMethod,
                    transactionProcessingStrategyId:scope.transactionProcessingStrategy,
                    interestCalculationPeriodType:scope.interestCalcPeriod,
                    inArrearsTolerance:scope.arrearsTolerance,
                    repaymentEvery:scope.repaymentFrequency,
                    graceOnPrincipalAndInterestPayment:scope.graceOnPrincipalAndInterest,
                    graceOnArrearsAgeing:scope.graceOnArrearsAging};

                this.formData.paymentChannelToFundSourceMappings = scope.paymentChannelToFundSourceMappings;
                this.formData.feeToIncomeAccountMappings = scope.feeToIncomeAccountMappings;
                this.formData.penaltyToIncomeAccountMappings = scope.penaltyToIncomeAccountMappings;
                this.formData.charges = scope.chargesSelected;
                this.formData.allowAttributeOverrides = scope.selectedConfigurableAttributes;
                this.formData.dateFormat = scope.df;
                this.formData.locale = scope.optlang.code;
                this.formData.startDate = reqFirstDate;
                this.formData.closeDate = reqSecondDate;

                //Interest recalculation data
                if (this.formData.isInterestRecalculationEnabled) {
                    var restFrequencyDate = dateFilter(scope.date.recalculationRestFrequencyDate, scope.df);
                    scope.formData.recalculationRestFrequencyDate = restFrequencyDate;
                    var compoundingFrequencyDate = dateFilter(scope.date.recalculationCompoundingFrequencyDate, scope.df);
                    scope.formData.recalculationCompoundingFrequencyDate = compoundingFrequencyDate;
                }else{
                    delete scope.formData.interestRecalculationCompoundingMethod;
                    delete scope.formData.rescheduleStrategyMethod;
                    delete scope.formData.recalculationRestFrequencyType;
                    delete scope.formData.recalculationRestFrequencyInterval;
                }

                if(this.formData.isLinkedToFloatingInterestRates) {
                    delete scope.formData.interestRatePerPeriod ;
                    delete scope.formData.minInterestRatePerPeriod ;
                    delete scope.formData.maxInterestRatePerPeriod ;
                    delete scope.formData.interestRateFrequencyType ;
                }else {
                    delete scope.formData.floatingRatesId ;
                    delete scope.formData.interestRateDifferential ;
                    delete scope.formData.isFloatingInterestRateCalculationAllowed ;
                    delete scope.formData.minDifferentialLendingRate ;
                    delete scope.formData.defaultDifferentialLendingRate ;
                    delete scope.formData.maxDifferentialLendingRate ;

                }

                //If Variable Installments is not allowed for this product, remove the corresponding formData
                if(!this.formData.allowVariableInstallments) {
                    delete scope.formData.minimumGap ;
                    delete scope.formData.maximumGap ;
                }

                if(this.formData.interestCalculationPeriodType == 0){
                    this.formData.allowPartialPeriodInterestCalcualtion = false;
                }

                if (this.formData.recalculationCompoundingFrequencyType == 4) {
                    if(this.formData.recalculationCompoundingFrequencyNthDayType == -2) {
                        delete this.formData.recalculationCompoundingFrequencyNthDayType;
                        delete this.formData.recalculationCompoundingFrequencyDayOfWeekType;
                    } else {
                        delete this.formData.recalculationCompoundingFrequencyOnDayType;
                    }
                } else if (this.formData.recalculationCompoundingFrequencyType == 3){
                    delete this.formData.recalculationCompoundingFrequencyOnDayType;
                    delete this.formData.recalculationCompoundingFrequencyNthDayType;
                }

                if (this.formData.recalculationRestFrequencyType == 4) {
                    if(this.formData.recalculationRestFrequencyNthDayType == -2) {
                        delete this.formData.recalculationRestFrequencyNthDayType;
                        delete this.formData.recalculationRestFrequencyDayOfWeekType;
                    } else {
                        delete this.formData.recalculationRestFrequencyOnDayType;
                    }
                } else if (this.formData.recalculationRestFrequencyType == 3){
                    delete this.formData.recalculationRestFrequencyOnDayType;
                    delete this.formData.recalculationRestFrequencyNthDayType;
                }

                resourceFactory.loanProductResource.put({loanProductId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewloanproduct/' + data.resourceId);
                });
            }
        }
    });
    mifosX.ng.application.controller('EditLoanProductController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', '$translate', mifosX.controllers.EditLoanProductController]).run(function ($log) {
        $log.info("EditLoanProductController initialized");
    });
}(mifosX.controllers || {}));
;/**
 * Created by Jose on 25/07/2017.
 */
(function (module) {
    mifosX.controllers = _.extend(module, {
        EditRateController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.template = [];
            scope.showdatefield = false;
            scope.repeatEvery = false;
            scope.first = {};
            scope.flag = false;
            scope.showPenalty = true ;


            resourceFactory.rateResource.getRate({rateId: routeParams.rateId}, function (data) {
                scope.template = data;

                scope.formData = {
                    id: data.id,
                    name: data.name,
                    active: data.active,
                    percentage: data.percentage,
                    productApply : data.productApply
                };


            });


            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.active = this.formData.active || false;
                resourceFactory.rateResource.update({rateId: routeParams.rateId}, this.formData, function (data) {
                    location.path('/viewrate/' + routeParams.rateId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditRateController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.EditRateController]).run(function ($log) {
        $log.info("EditRateController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditRecurringDepositProductController: function (scope, resourceFactory, location, routeParams, dateFilter,$uibModal) {
            scope.formData = {};
            scope.charges = [];
            scope.showOrHideValue = "show";
            scope.configureFundOptions = [];
            scope.specificIncomeaccounts = [];
            scope.penaltySpecificIncomeaccounts = [];
            scope.configureFundOption = {};

            //interest rate chart details
            scope.chart = {};
            scope.restrictDate = new Date();
            scope.fromDate = {}; //required for date formatting
            scope.endDate = {};//required for date formatting
            scope.deletedincentives = [];
            scope.isPrimaryGroupingByAmount = false;

            resourceFactory.recurringDepositProductResource.get({productId: routeParams.productId, template: 'true'}, function (data) {
                scope.product = data;
                scope.charges = data.charges;
                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [];
                scope.liabilityAccountOptions = scope.product.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];
                scope.expenseAccountOptions = scope.product.accountingMappingOptions.expenseAccountOptions || [];
                var preClosurePenalInterestOnTypeId = (_.isNull(data.preClosurePenalInterestOnType) || _.isUndefined(data.preClosurePenalInterestOnType)) ? '' : data.preClosurePenalInterestOnType.id;
                var minDepositTermTypeId = (_.isNull(data.minDepositTermType) || _.isUndefined(data.minDepositTermType)) ? '' : data.minDepositTermType.id;
                var maxDepositTermTypeId = (_.isNull(data.maxDepositTermType) || _.isUndefined(data.maxDepositTermType)) ? '' : data.maxDepositTermType.id;
                var inMultiplesOfDepositTermTypeId = (_.isNull(data.inMultiplesOfDepositTermType) || _.isUndefined(data.inMultiplesOfDepositTermType)) ? '' : data.inMultiplesOfDepositTermType.id;
                scope.formData = {
                    name: data.name,
                    shortName: data.shortName,
                    description: data.description,
                    currencyCode: data.currency.code,
                    digitsAfterDecimal: data.currency.decimalPlaces,
                    inMultiplesOf: data.currency.inMultiplesOf,
                    minDepositAmount: data.minDepositAmount,
                    depositAmount: data.depositAmount,
                    maxDepositAmount: data.maxDepositAmount,
                    nominalAnnualInterestRate: data.nominalAnnualInterestRate,
                    minRequiredOpeningBalance: data.minRequiredOpeningBalance,
                    lockinPeriodFrequency: data.lockinPeriodFrequency,
                    interestCompoundingPeriodType: data.interestCompoundingPeriodType.id,
                    interestPostingPeriodType: data.interestPostingPeriodType.id,
                    interestCalculationType: data.interestCalculationType.id,
                    interestCalculationDaysInYearType: data.interestCalculationDaysInYearType.id,
                    accountingRule: data.accountingRule.id,
                    preClosurePenalApplicable: data.preClosurePenalApplicable,
                    preClosurePenalInterest: data.preClosurePenalInterest,
                    preClosurePenalInterestOnTypeId: preClosurePenalInterestOnTypeId,
                    minDepositTerm: data.minDepositTerm,
                    maxDepositTerm: data.maxDepositTerm,
                    minDepositTermTypeId: minDepositTermTypeId,
                    maxDepositTermTypeId: maxDepositTermTypeId,
                    inMultiplesOfDepositTerm: data.inMultiplesOfDepositTerm,
                    inMultiplesOfDepositTermTypeId: inMultiplesOfDepositTermTypeId,
                    isMandatoryDeposit:data.isMandatoryDeposit,
                    allowWithdrawal:data.allowWithdrawal,
                    adjustAdvanceTowardsFuturePayments:data.adjustAdvanceTowardsFuturePayments,
                    minBalanceForInterestCalculation:data.minBalanceForInterestCalculation,
                    withHoldTax: data.withHoldTax == true ? 'true' : 'false'
                }

                if(data.withHoldTax){
                    scope.formData.taxGroupId = data.taxGroup.id;
                }
                scope.chart = scope.product.activeChart;

                _.each(scope.chart.chartSlabs, function (chartSlab) {
                    _.each(chartSlab.incentives, function (incentive){
                        incentive.attributeValue = parseInt(incentive.attributeValue);
                    })
                })
                //format chart date values
                if (scope.chart.fromDate) {
                    var fromDate = dateFilter(scope.chart.fromDate, scope.df);
                    scope.fromDate.date = new Date(fromDate);
                }
                if (scope.chart.endDate) {
                    var endDate = dateFilter(scope.chart.endDate, scope.df);
                    scope.endDate.date = new Date(endDate);
                }
                scope.isPrimaryGroupingByAmount = scope.chart.isPrimaryGroupingByAmount;

                if (data.lockinPeriodFrequencyType) {
                    scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                }

                if (scope.formData.accountingRule == 2) {
                    scope.formData.savingsReferenceAccountId = data.accountingMappings.savingsReferenceAccount.id;
                    scope.formData.savingsControlAccountId = data.accountingMappings.savingsControlAccount.id;
                    scope.formData.transfersInSuspenseAccountId = data.accountingMappings.transfersInSuspenseAccount.id;
                    scope.formData.incomeFromFeeAccountId = data.accountingMappings.incomeFromFeeAccount.id;
                    scope.formData.incomeFromPenaltyAccountId = data.accountingMappings.incomeFromPenaltyAccount.id;
                    scope.formData.interestOnSavingsAccountId = data.accountingMappings.interestOnSavingsAccount.id;

                    _.each(scope.product.paymentChannelToFundSourceMappings, function (fundSource) {
                        scope.configureFundOptions.push({
                            paymentTypeId: fundSource.paymentType.id,
                            fundSourceAccountId: fundSource.fundSourceAccount.id,
                            paymentTypeOptions: scope.product.paymentTypeOptions,
                            assetAccountOptions: scope.assetAccountOptions
                        })
                    });

                    _.each(scope.product.feeToIncomeAccountMappings, function (fees) {
                        scope.specificIncomeaccounts.push({
                            chargeId: fees.charge.id,
                            incomeAccountId: fees.incomeAccount.id,
                            chargeOptions: scope.product.chargeOptions,
                            incomeAccountOptions: scope.incomeAccountOptions
                        })
                    });

                    _.each(scope.product.penaltyToIncomeAccountMappings, function (penalty) {
                        scope.penaltySpecificIncomeaccounts.push({
                            chargeId: penalty.charge.id,
                            incomeAccountId: penalty.incomeAccount.id,
                            penaltyOptions: scope.product.penaltyOptions,
                            incomeAccountOptions: scope.incomeAccountOptions
                        })
                    });
                }
            });

            //advanced accounting rule
            scope.showOrHide = function (showOrHideValue) {

                if (showOrHideValue == "show") {
                    scope.showOrHideValue = 'hide';
                }

                if (showOrHideValue == "hide") {
                    scope.showOrHideValue = 'show';
                }
            }

            scope.chargeSelected = function (chargeId) {
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty
                        scope.chargeId = '';
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.addConfigureFundSource = function () {
                if (scope.product.paymentTypeOptions && scope.product.paymentTypeOptions.length > 0 &&
                    scope.assetAccountOptions && scope.assetAccountOptions.length > 0) {
                    scope.configureFundOptions.push({
                        paymentTypeId: scope.product.paymentTypeOptions[0].id,
                        fundSourceAccountId: scope.assetAccountOptions[0].id,
                        paymentTypeOptions: scope.product.paymentTypeOptions,
                        assetAccountOptions: scope.assetAccountOptions
                    });
                }
            }

            scope.mapFees = function () {
                if (scope.product.chargeOptions && scope.product.chargeOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.specificIncomeaccounts.push({
                        chargeId: scope.product.chargeOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        chargeOptions: scope.product.chargeOptions,
                        incomeAccountOptions: scope.product.accountingMappingOptions.incomeAccountOptions
                    });
                }
            }

            scope.mapPenalty = function () {
                if (scope.product.penaltyOptions && scope.product.penaltyOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.penaltySpecificIncomeaccounts.push({
                        chargeId: scope.product.penaltyOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        penaltyOptions: scope.product.penaltyOptions,
                        incomeAccountOptions: scope.incomeAccountOptions
                    });
                }
            }

            scope.deleteFund = function (index) {
                scope.configureFundOptions.splice(index, 1);
            }

            scope.deleteFee = function (index) {
                scope.specificIncomeaccounts.splice(index, 1);
            }

            scope.deletePenalty = function (index) {
                scope.penaltySpecificIncomeaccounts.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/viewrecurringdepositproduct/' + routeParams.productId);
            };

            scope.submit = function () {
                scope.paymentChannelToFundSourceMappings = [];
                scope.feeToIncomeAccountMappings = [];
                scope.penaltyToIncomeAccountMappings = [];
                scope.chargesSelected = [];

                var temp = '';

                //configure fund sources for payment channels
                for (var i in scope.configureFundOptions) {
                    temp = {
                        paymentTypeId: scope.configureFundOptions[i].paymentTypeId,
                        fundSourceAccountId: scope.configureFundOptions[i].fundSourceAccountId
                    }
                    scope.paymentChannelToFundSourceMappings.push(temp);
                }

                //map fees to specific income accounts
                for (var i in scope.specificIncomeaccounts) {
                    temp = {
                        chargeId: scope.specificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.specificIncomeaccounts[i].incomeAccountId,
                    }
                    scope.feeToIncomeAccountMappings.push(temp);
                }

                //map penalties to specific income accounts
                for (var i in scope.penaltySpecificIncomeaccounts) {
                    temp = {
                        chargeId: scope.penaltySpecificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.penaltySpecificIncomeaccounts[i].incomeAccountId,
                    }
                    scope.penaltyToIncomeAccountMappings.push(temp);
                }

                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }

                this.formData.paymentChannelToFundSourceMappings = scope.paymentChannelToFundSourceMappings;
                this.formData.feeToIncomeAccountMappings = scope.feeToIncomeAccountMappings;
                this.formData.penaltyToIncomeAccountMappings = scope.penaltyToIncomeAccountMappings;
                this.formData.charges = scope.chargesSelected;
                this.formData.locale = scope.optlang.code;
                this.formData.charts = [];//declare charts array
                this.formData.charts.push(copyChartData(scope.chart));//add chart details
                this.formData = removeEmptyValues(this.formData);
                resourceFactory.recurringDepositProductResource.update({productId: routeParams.productId}, this.formData, function (data) {
                    location.path('/viewrecurringdepositproduct/' + data.resourceId);
                });
            }

            /**
             * Add a new row with default values for entering chart details
             */
            scope.addNewRow = function () {
                var fromPeriod = '';
                var amountRangeFrom = '';
                var periodType = '';
                var toPeriod = '';
                var amountRangeTo = '';
                if (_.isNull(scope.chart.chartSlabs) || _.isUndefined(scope.chart.chartSlabs)) {
                    scope.chart.chartSlabs = [];
                } else {
                    var lastChartSlab = {};
                    if (scope.chart.chartSlabs.length > 0) {
                        lastChartSlab = angular.copy(scope.chart.chartSlabs[scope.chart.chartSlabs.length - 1]);
                    }else{
                        lastChartSlab = null;
                    }
                    if (!(_.isNull(lastChartSlab) || _.isUndefined(lastChartSlab))) {
                        if(scope.isPrimaryGroupingByAmount){
                            if((_.isNull(lastChartSlab.toPeriod) || _.isUndefined(lastChartSlab.toPeriod) || lastChartSlab.toPeriod.length == 0)){
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.amountRangeTo) + 1;
                                fromPeriod = (_.isNull(lastChartSlab.fromPeriod) || _.isUndefined(lastChartSlab.fromPeriod) || lastChartSlab.fromPeriod.length == 0)? '' : 1;
                            }else{
                                amountRangeFrom = lastChartSlab.amountRangeFrom;
                                amountRangeTo = lastChartSlab.amountRangeTo;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.toPeriod) + 1;
                            }
                        }else{
                            if((_.isNull(lastChartSlab.amountRangeTo) || _.isUndefined(lastChartSlab.amountRangeTo) || lastChartSlab.amountRangeTo.length == 0)){
                                amountRangeFrom = (_.isNull(lastChartSlab.amountRangeFrom) || _.isUndefined(lastChartSlab.amountRangeFrom) || lastChartSlab.amountRangeFrom.length == 0) ? '' : 1;
                                fromPeriod = _.isNull(lastChartSlab) ? '' : parseFloat(lastChartSlab.toPeriod) + 1;
                            }else{
                                fromPeriod = lastChartSlab.fromPeriod;
                                toPeriod = lastChartSlab.toPeriod;
                                amountRangeFrom = _.isNull(lastChartSlab) ? '' : parseInt(lastChartSlab.amountRangeTo) + 1;
                            }
                        }
                        periodType = angular.copy(lastChartSlab.periodType);
                    }
                }


                var chartSlab = {
                    "periodType": periodType,
                    "fromPeriod": fromPeriod,
                    "amountRangeFrom": amountRangeFrom,
                    "incentives":[]
                };
                if(!_.isUndefined(toPeriod) && toPeriod.length > 0){
                    chartSlab.toPeriod = toPeriod;
                }
                if(!_.isUndefined(amountRangeTo) && amountRangeTo.length > 0){
                    chartSlab.amountRangeTo = amountRangeTo;
                }
                scope.chart.chartSlabs.push(chartSlab);
            }


            /**
             *  create new chart data object
             */

            copyChartData = function () {
                var newChartData = {
                    id: scope.chart.id,
                    //name: scope.chart.name,
                    //description: scope.chart.description,
                    fromDate: dateFilter(scope.fromDate.date, scope.df),
                    endDate: dateFilter(scope.endDate.date, scope.df),
                    isPrimaryGroupingByAmount:scope.isPrimaryGroupingByAmount,
                    //savingsProductId: scope.productId,
                    dateFormat: scope.df,
                    locale: scope.optlang.code,
                    chartSlabs: angular.copy(copyChartSlabs(scope.chart.chartSlabs))
                }

                //remove empty values
                _.each(newChartData, function (v, k) {
                    if (!v)
                        delete newChartData[k];
                });

                return newChartData;
            }

            /**
             *  copy all chart details to a new Array
             * @param chartSlabs
             * @returns {Array}
             */
            copyChartSlabs = function (chartSlabs) {
                var detailsArray = [];
                _.each(chartSlabs, function (chartSlab) {
                    var chartSlabData = copyChartSlab(chartSlab);
                    detailsArray.push(chartSlabData);
                });
                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param chartSlab
             *
             */

            copyChartSlab = function (chartSlab) {
                var newChartSlabData = {
                    id: chartSlab.id,
                    description: chartSlab.description,
                    fromPeriod: chartSlab.fromPeriod,
                    toPeriod: chartSlab.toPeriod,
                    amountRangeFrom: chartSlab.amountRangeFrom,
                    amountRangeTo: chartSlab.amountRangeTo,
                    annualInterestRate: chartSlab.annualInterestRate,
                    locale: scope.optlang.code,
                    incentives:angular.copy(copyIncentives(chartSlab.incentives,chartSlab.id))
                }
                if(chartSlab.periodType != undefined) {
                    newChartSlabData.periodType = chartSlab.periodType.id;
                }

                //remove empty values
                _.each(newChartSlabData, function (v, k) {
                    if (v === '') {
                        delete newChartSlabData[k];
                    }
                    if (!v && v != 0) {
                        delete newChartSlabData[k];
                    }

                });

                return newChartSlabData;
            }

            removeEmptyValues = function (objArray) {
                _.each(objArray, function (v, k) {
                    //alert(k + ':' + v);
                    if (_.isNull(v) || _.isUndefined(v) || v === '') {
                        //alert('remove' + k + ':' + v);
                        delete objArray[k];
                    }

                });

                return objArray;
            }

            /**
             * Remove chart details row
             */
            scope.removeRow = function (index) {
                scope.chart.chartSlabs.splice(index, 1);
            }
            scope.incentives = function(index){
                $uibModal.open({
                    templateUrl: 'incentive.html',
                    controller: IncentiveCtrl,
                    resolve: {
                        data: function () {
                            return scope.chart;
                        },
                        chartSlab: function () {
                            return scope.chart.chartSlabs[index];
                        }
                    }
                });
            }

            /**
             *  copy all chart details to a new Array
             * @param incentiveDatas
             * @returns {Array}
             */
            copyIncentives = function (incentives,slabId) {
                var detailsArray = [];
                _.each(incentives, function (incentive) {
                    var incentiveData = copyIncentive(incentive);
                    detailsArray.push(incentiveData);
                });
                _.each(scope.deletedincentives,function(del){
                    if(del.id == slabId){
                        detailsArray.push(del.data);
                    }
                });

                return detailsArray;
            }

            /**
             * create new chart detail object data from chartSlab
             * @param incentiveData
             *
             */

            copyIncentive = function (incentiveData) {
                var newIncentiveDataData = {
                    id: incentiveData.id,
                    "entityType":incentiveData.entityType,
                    "attributeName":incentiveData.attributeName.id,
                    "conditionType":incentiveData.conditionType.id,
                    "attributeValue":incentiveData.attributeValue,
                    "incentiveType":incentiveData.incentiveType.id,
                    "amount":incentiveData.amount,
                    locale: scope.optlang.code

                }
                if(incentiveData.id){
                    newIncentiveDataData.entityType = incentiveData.entityType.id;
                }
                return newIncentiveDataData;
            }

            var IncentiveCtrl = function ($scope, $uibModalInstance, data,chartSlab) {
                $scope.data = data;
                $scope.chartSlab = chartSlab;
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addNewRow = function () {
                    var incentive = {
                        "entityType":"2",
                        "attributeName":"",
                        "conditionType":"",
                        "attributeValue":"",
                        "incentiveType":"",
                        "amount":""
                    };

                    $scope.chartSlab.incentives.push(incentive);
                }

                /**
                 * Remove chart details row
                 */
                $scope.removeRow = function (index) {
                    var incentive = {
                        id:$scope.chartSlab.incentives[index].id,
                        delete:'true'
                    }
                    var deldata = {
                        id:chartSlab.id,
                        data:incentive
                    }
                    scope.deletedincentives.push(deldata);
                    $scope.chartSlab.incentives.splice(index, 1);
                }
            };

        }
    });
    mifosX.ng.application.controller('EditRecurringDepositProductController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter','$uibModal', mifosX.controllers.EditRecurringDepositProductController]).run(function ($log) {
        $log.info("EditRecurringDepositProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditSavingProductController: function (scope, resourceFactory, location, routeParams) {
            scope.formData = {};
            scope.charges = [];
            scope.showOrHideValue = "show";
            scope.configureFundOptions = [];
            scope.specificIncomeaccounts = [];
            scope.penaltySpecificIncomeaccounts = [];
            scope.configureFundOption = {};

            resourceFactory.savingProductResource.get({savingProductId: routeParams.id, template: 'true'}, function (data) {
                scope.product = data;
                scope.charges = data.charges;
                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [];
                scope.liabilityAccountOptions = scope.product.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];
                scope.expenseAccountOptions = scope.product.accountingMappingOptions.expenseAccountOptions || [];
                scope.formData = {
                    name: data.name,
                    shortName: data.shortName,
                    description: data.description,
                    currencyCode: data.currency.code,
                    digitsAfterDecimal: data.currency.decimalPlaces,
                    inMultiplesOf: data.currency.inMultiplesOf,
                    nominalAnnualInterestRate: data.nominalAnnualInterestRate,
                    minRequiredOpeningBalance: data.minRequiredOpeningBalance,
                    lockinPeriodFrequency: data.lockinPeriodFrequency,
                    withdrawalFeeForTransfers: data.withdrawalFeeForTransfers == true ? 'true' : 'false',
                    interestCompoundingPeriodType: data.interestCompoundingPeriodType.id,
                    interestPostingPeriodType: data.interestPostingPeriodType.id,
                    interestCalculationType: data.interestCalculationType.id,
                    interestCalculationDaysInYearType: data.interestCalculationDaysInYearType.id,
                    accountingRule: data.accountingRule.id,
                    allowOverdraft: data.allowOverdraft == true ? 'true' : 'false',
                    overdraftLimit: data.overdraftLimit,
                    nominalAnnualInterestRateOverdraft: data.nominalAnnualInterestRateOverdraft,
                    minOverdraftForInterestCalculation: data.minOverdraftForInterestCalculation,
                    minBalanceForInterestCalculation: data.minBalanceForInterestCalculation,
                    enforceMinRequiredBalance: data.enforceMinRequiredBalance,
                    minRequiredBalance:data.minRequiredBalance,
                    withHoldTax: data.withHoldTax == true ? 'true' : 'false',
                    isDormancyTrackingActive: data.isDormancyTrackingActive == true ? 'true':'false',
                    daysToInactive: data.daysToInactive,
                    daysToDormancy: data.daysToDormancy,
                    daysToEscheat: data.daysToEscheat
                }

                if(data.withHoldTax){
                    scope.formData.taxGroupId = data.taxGroup.id;
                }

                if (data.lockinPeriodFrequencyType) {
                    scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                }

                scope.formData.savingsReferenceAccountId = data.accountingMappings.savingsReferenceAccount.id;
                scope.formData.savingsControlAccountId = data.accountingMappings.savingsControlAccount.id;
                scope.formData.transfersInSuspenseAccountId = data.accountingMappings.transfersInSuspenseAccount.id;
                scope.formData.escheatLiabilityId = data.accountingMappings.escheatLiabilityAccount.id;
                scope.formData.incomeFromFeeAccountId = data.accountingMappings.incomeFromFeeAccount.id;
                scope.formData.incomeFromPenaltyAccountId = data.accountingMappings.incomeFromPenaltyAccount.id;
                scope.formData.interestOnSavingsAccountId = data.accountingMappings.interestOnSavingsAccount.id;
                scope.formData.writeOffAccountId = data.accountingMappings.writeOffAccount.id;
                scope.formData.overdraftPortfolioControlId = data.accountingMappings.overdraftPortfolioControl.id;
                scope.formData.incomeFromInterestId = data.accountingMappings.incomeFromInterest.id;

                _.each(scope.product.paymentChannelToFundSourceMappings, function (fundSource) {
                    scope.configureFundOptions.push({
                        paymentTypeId: fundSource.paymentType.id,
                        fundSourceAccountId: fundSource.fundSourceAccount.id,
                        paymentTypeOptions: scope.product.paymentTypeOptions,
                        assetAccountOptions: scope.assetAccountOptions
                    })
                });

                _.each(scope.product.feeToIncomeAccountMappings, function (fees) {
                    scope.specificIncomeaccounts.push({
                        chargeId: fees.charge.id,
                        incomeAccountId: fees.incomeAccount.id,
                        chargeOptions: scope.product.chargeOptions,
                        incomeAccountOptions: scope.incomeAccountOptions
                    })
                });

                _.each(scope.product.penaltyToIncomeAccountMappings, function (penalty) {
                    scope.penaltySpecificIncomeaccounts.push({
                        chargeId: penalty.charge.id,
                        incomeAccountId: penalty.incomeAccount.id,
                        penaltyOptions: scope.product.penaltyOptions,
                        incomeAccountOptions: scope.incomeAccountOptions
                    })
                });
            });

            //advanced accounting rule
            scope.showOrHide = function (showOrHideValue) {

                if (showOrHideValue == "show") {
                    scope.showOrHideValue = 'hide';
                }

                if (showOrHideValue == "hide") {
                    scope.showOrHideValue = 'show';
                }
            }

            scope.chargeSelected = function (chargeId) {
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty
                        scope.chargeId = '';
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.addConfigureFundSource = function () {
                if (scope.product.paymentTypeOptions && scope.product.paymentTypeOptions.length > 0 &&
                    scope.assetAccountOptions && scope.assetAccountOptions.length > 0) {
                    scope.configureFundOptions.push({
                        paymentTypeId: scope.product.paymentTypeOptions[0].id,
                        fundSourceAccountId: scope.assetAccountOptions[0].id,
                        paymentTypeOptions: scope.product.paymentTypeOptions,
                        assetAccountOptions: scope.assetAccountOptions
                    });
                }
            }

            scope.mapFees = function () {
                if (scope.product.chargeOptions && scope.product.chargeOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.specificIncomeaccounts.push({
                        chargeId: scope.product.chargeOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        chargeOptions: scope.product.chargeOptions,
                        incomeAccountOptions: scope.product.accountingMappingOptions.incomeAccountOptions
                    });
                }
            }

            scope.mapPenalty = function () {
                if (scope.product.penaltyOptions && scope.product.penaltyOptions.length > 0 && scope.incomeAccountOptions && scope.incomeAccountOptions.length > 0) {
                    scope.penaltySpecificIncomeaccounts.push({
                        chargeId: scope.product.penaltyOptions[0].id,
                        incomeAccountId: scope.incomeAccountOptions[0].id,
                        penaltyOptions: scope.product.penaltyOptions,
                        incomeAccountOptions: scope.incomeAccountOptions
                    });
                }
            }

            scope.deleteFund = function (index) {
                scope.configureFundOptions.splice(index, 1);
            }

            scope.deleteFee = function (index) {
                scope.specificIncomeaccounts.splice(index, 1);
            }

            scope.deletePenalty = function (index) {
                scope.penaltySpecificIncomeaccounts.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/viewsavingproduct/' + routeParams.id);
            };

            scope.submit = function () {
                scope.paymentChannelToFundSourceMappings = [];
                scope.feeToIncomeAccountMappings = [];
                scope.penaltyToIncomeAccountMappings = [];
                scope.chargesSelected = [];

                var temp = '';

                //configure fund sources for payment channels
                for (var i in scope.configureFundOptions) {
                    temp = {
                        paymentTypeId: scope.configureFundOptions[i].paymentTypeId,
                        fundSourceAccountId: scope.configureFundOptions[i].fundSourceAccountId
                    }
                    scope.paymentChannelToFundSourceMappings.push(temp);
                }

                //map fees to specific income accounts
                for (var i in scope.specificIncomeaccounts) {
                    temp = {
                        chargeId: scope.specificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.specificIncomeaccounts[i].incomeAccountId
                    }
                    scope.feeToIncomeAccountMappings.push(temp);
                }

                //map penalties to specific income accounts
                for (var i in scope.penaltySpecificIncomeaccounts) {
                    temp = {
                        chargeId: scope.penaltySpecificIncomeaccounts[i].chargeId,
                        incomeAccountId: scope.penaltySpecificIncomeaccounts[i].incomeAccountId
                    }
                    scope.penaltyToIncomeAccountMappings.push(temp);
                }

                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }

                this.formData.paymentChannelToFundSourceMappings = scope.paymentChannelToFundSourceMappings;
                this.formData.feeToIncomeAccountMappings = scope.feeToIncomeAccountMappings;
                this.formData.penaltyToIncomeAccountMappings = scope.penaltyToIncomeAccountMappings;
                this.formData.charges = scope.chargesSelected;
                this.formData.locale = scope.optlang.code;

                resourceFactory.savingProductResource.update({savingProductId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewsavingproduct/' + data.resourceId);
                });
            }
        }
    });
    mifosX.ng.application.controller('EditSavingProductController', ['$scope', 'ResourceFactory', '$location', '$routeParams', mifosX.controllers.EditSavingProductController]).run(function ($log) {
        $log.info("EditSavingProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditShareProductController: function (scope, resourceFactory, dateFilter, location, routeParams) {
            scope.formData = {};
            scope.charges = [];
            scope.formData.marketPricePeriods = [] ;
            scope.showOrHideValue = "show";
            resourceFactory.shareProduct.get({shareProductId: routeParams.id, template: 'true'}, function (data) {
                scope.product = data;
                scope.charges = data.charges;
                scope.formData.marketPricePeriods = data.marketPrice ;
                for(var j in scope.formData.marketPricePeriods) {
                    scope.formData.marketPricePeriods[j].fromDate = new Date(scope.formData.marketPricePeriods[j].fromDate);
                }

                scope.assetAccountOptions = scope.product.accountingMappingOptions.assetAccountOptions || [] ;
                scope.equityAccountOptions = scope.product.accountingMappingOptions.equityAccountOptions || [] ;
                scope.liabilityAccountOptions = scope.product.accountingMappingOptions.liabilityAccountOptions || [];
                scope.incomeAccountOptions = scope.product.accountingMappingOptions.incomeAccountOptions || [];

                scope.formData.name = data.name ;
                scope.formData.shortName = data.shortName ;
                scope.formData.description = data.description ;
                scope.formData.currencyCode = data.currency.code ;
                scope.formData.digitsAfterDecimal = data.currency.decimalPlaces ;
                scope.formData.inMultiplesOf = data.currency.inMultiplesOf ;
                scope.formData.totalShares = data.totalShares ;
                scope.formData.sharesIssued = data.totalSharesIssued ;
                scope.formData.unitPrice = data.unitPrice ;
                scope.formData.shareCapital = data.shareCapital ;
                scope.formData.minimumShares = data.minimumShares ;
                scope.formData.nominalShares = data.nominalShares ;
                scope.formData.maximumShares = data.maximumShares ;
                scope.formData.allowDividendCalculationForInactiveClients = data.allowDividendCalculationForInactiveClients ;
                scope.formData.lockinPeriodFrequency = data.lockinPeriod ;
                scope.formData.lockinPeriodFrequencyType = data.lockPeriodTypeEnum.id ;
                scope.formData.minimumActivePeriodForDividends = data.minimumActivePeriod ;
                scope.formData.minimumactiveperiodFrequencyType = data.minimumActivePeriodForDividendsTypeEnum.id ;
                scope.product.chargeOptions = scope.product.chargeOptions || [];
                scope.formData.digitsAfterDecimal = data.currencyOptions[0].decimalPlaces;

                scope.formData.accountingRule = data.accountingRule.id ;
                scope.formData.shareReferenceId = data.accountingMappings.shareReferenceId.id ;
                scope.formData.incomeFromFeeAccountId = data.accountingMappings.incomeFromFeeAccountId.id ;
                scope.formData.shareEquityId = data.accountingMappings.shareEquityId.id ;
                scope.formData.shareSuspenseId = data.accountingMappings.shareSuspenseId.id

            });

            scope.addMarketPricePeriod = function () {
                var marketPrice = {} ;
                marketPrice.locale=scope.optlang.code;
                marketPrice.dateFormat = scope.df;
                scope.formData.marketPricePeriods.push(marketPrice);
            };

            scope.deleteMarketPricePeriod = function (index) {
                scope.formData.marketPricePeriods.splice(index, 1);
            } ;

            scope.chargeSelected = function (chargeId) {
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, this.formData, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        //to charge select box empty
                        scope.chargeId = '';
                    });
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/shareproducts');
            };

            scope.submit = function () {
                scope.chargesSelected = [];
                for (var i in scope.charges) {
                    temp = {
                        id: scope.charges[i].id
                    }
                    scope.chargesSelected.push(temp);
                }
                for(var j in scope.formData.marketPricePeriods) {
                    scope.formData.marketPricePeriods[j].fromDate = dateFilter(scope.formData.marketPricePeriods[j].fromDate, scope.df);
                    scope.formData.marketPricePeriods[j].locale=scope.optlang.code;
                    scope.formData.marketPricePeriods[j].dateFormat = scope.df;
                }
                this.formData.chargesSelected = scope.chargesSelected;
                this.formData.locale = scope.optlang.code;

                resourceFactory.shareProduct.put({shareProductId: scope.product.id}, this.formData, function (data) {
                    location.path('/viewshareproduct/' + data.resourceId);
                });
            }
        }
    });
    mifosX.ng.application.controller('EditShareProductController', ['$scope', 'ResourceFactory', 'dateFilter', '$location', '$routeParams', mifosX.controllers.EditShareProductController]).run(function ($log) {
        $log.info("EditShareProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        FixedDepositProductController: function (scope, resourceFactory, location) {
            scope.routeTo = function (id) {
                location.path('/viewfixeddepositproduct/' + id);
            };

            if (!scope.searchCriteria.fdp) {
                scope.searchCriteria.fdp = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.fdp || '';

            scope.onFilter = function () {
                scope.searchCriteria.fdp = scope.filterText;
                scope.saveSC();
            };

            scope.FixedDepositsPerPage = 15;
            resourceFactory.fixedDepositProductResource.getAllFixedDepositProducts(function (data) {
                scope.depositproducts = data;
            });
        }
    });
    mifosX.ng.application.controller('FixedDepositProductController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.FixedDepositProductController]).run(function ($log) {
        $log.info("FixedDepositProductController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateFloatingRateController: function (scope, resourceFactory, location, dateFilter, translate) {

            scope.formData = {};
            scope.formData.ratePeriods = [] ;
            scope.formData.isBaseLendingRate = false;
            scope.formData.isActive = false;
            scope.addRatePeriod = function () {
                scope.formData.ratePeriods.push({
                });
            };

            scope.deleteRatePeriod = function (index) {
                scope.formData.ratePeriods.splice(index, 1);
            } ;

            scope.submit = function () {
                var i = 0 ;
                var length = this.formData.ratePeriods.length;
                for(i = 0 ; i < length; i++) {
                    this.formData.ratePeriods[i].locale = scope.optlang.code;
                    this.formData.ratePeriods[i].dateFormat =  scope.df;
                    this.formData.ratePeriods[i].fromDate = dateFilter(this.formData.ratePeriods[i].fromDate, scope.df);
                }

                resourceFactory.floatingrates.save(this.formData, function (data) {
                    location.path('/viewfloatingrate/' + data.resourceId);
                });
            } ;
        }
    });
    mifosX.ng.application.controller('CreateFloatingRateController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$translate', mifosX.controllers.CreateFloatingRateController]).run(function ($log) {
        $log.info("CreateFloatingRateController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditFloatingRateController: function (scope, routeParams, resourceFactory, location, dateFilter, translate) {

            scope.formData = {};
            scope.formData.ratePeriods = [] ;

            resourceFactory.floatingrates.get({floatingRateId: routeParams.floatingRateId}, function (data) {
                scope.formData.name = data.name ;
                scope.formData.isBaseLendingRate = data.isBaseLendingRate;
                scope.formData.isActive = data.isActive ;
                scope.formData.ratePeriods = data.ratePeriods ;

                var i = 0 ;
                var length = scope.formData.ratePeriods.length;
                var futureratePeriods = [] ;

                for(i = 0 ; i < length; i++) {
                    scope.formData.ratePeriods[i].fromDate = new Date(scope.formData.ratePeriods[i].fromDate);
                    if(scope.formData.ratePeriods[i].fromDate > Date.now()) {
                        futureratePeriods.push(scope.formData.ratePeriods[i]) ;
                    }
                }
                scope.formData.ratePeriods = futureratePeriods ;
            });

            scope.addRatePeriod = function () {
                scope.formData.ratePeriods.push({
                });
            };

            scope.deleteRatePeriod = function (index) {
                scope.formData.ratePeriods.splice(index, 1);
            } ;

            scope.checkDate = function (index) {
                return scope.formData.ratePeriods[index].fromDate > Date.now() ;
            } ;


            scope.submit = function () {

                var i = 0 ;
                var length = this.formData.ratePeriods.length;
                for(i = 0 ; i < length; i++) {
                    delete this.formData.ratePeriods[i].id ;
                    delete this.formData.ratePeriods[i].isActive ;
                    delete this.formData.ratePeriods[i].createdBy ;
                    delete this.formData.ratePeriods[i].createdOn ;
                    delete this.formData.ratePeriods[i].modifiedBy ;
                    delete this.formData.ratePeriods[i].modifiedOn ;
                    this.formData.ratePeriods[i].locale = scope.optlang.code;
                    this.formData.ratePeriods[i].dateFormat =  scope.df;
                    this.formData.ratePeriods[i].fromDate = dateFilter(this.formData.ratePeriods[i].fromDate, scope.df);
                }

                resourceFactory.floatingrates.put({floatingRateId: routeParams.floatingRateId}, this.formData, function (data) {
                    location.path('/viewfloatingrate/' + data.resourceId);
                });
            } ;
        }
    });
    mifosX.ng.application.controller('EditFloatingRateController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', '$translate', mifosX.controllers.EditFloatingRateController]).run(function ($log) {
        $log.info("EditFloatingRateController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        FloatingRatesController: function (scope, resourceFactory, location, dateFilter, translate) {
            scope.floatingrates = [];

            scope.routeTo = function (floatingRateId) {
                location.path('/viewfloatingrate/' + floatingRateId);
            };

            resourceFactory.floatingrates.getAll(function (data) {
                scope.floatingrates = data;
            });
        }
    });
    mifosX.ng.application.controller('FloatingRatesController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$translate', mifosX.controllers.FloatingRatesController]).run(function ($log) {
        $log.info("FloatingRatesController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewFloatingRateController: function (scope, routeParams, resourceFactory, location, dateFilter, translate) {
            resourceFactory.floatingrates.get({floatingRateId: routeParams.floatingRateId}, function (data) {
                scope.id = data.id ;
                scope.name = data.name ;
                scope.isBaseLendingRate = data.isBaseLendingRate;
                scope.isActive = data.isActive ;
                scope.createdBy = data.createdBy ;
                scope.ratePeriods = data.ratePeriods ;
            });


        }
    });
    mifosX.ng.application.controller('ViewFloatingRateController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', '$translate', mifosX.controllers.ViewFloatingRateController]).run(function ($log) {
        $log.info("ViewFloatingRateController initialized");
    });
}(mifosX.controllers || {}));
; (function(module) {
  mifosX.controllers = _.extend(module, {
    InterestRateChartController: function(scope, routeParams, resourceFactory, location,$uibModal) {
        scope.edit = function(id){
            location.path('/editinterestratechart/' + id);
        };
        scope.productName = routeParams.productName;
        scope.productId = routeParams.productId;
        scope.productsLink = '';
        scope.viewProductLink = '';
        scope.productType = routeParams.productType;
        if ( routeParams.productType === 'fixeddepositproduct'){
          scope.productsLink = 'fixeddepositproducts';
          scope.viewProductLink = 'viewfixeddepositproduct';
        }else if ( routeParams.productType === 'recurringdepositproduct'){
          scope.productsLink = 'recurringdepositproducts';
          scope.viewProductLink = 'viewrecurringdepositproduct';
        }

        resourceFactory.interestRateChartResource.getAllInterestRateCharts({productId: routeParams.productId}, function(data) {
            scope.charts = data;
            _.each(scope.charts,function(chart){
                scope.chartSlabs = chart.chartSlabs;
            });

        });

        scope.incentives = function(index,parent){
            $uibModal.open({
                templateUrl: 'incentive.html',
                controller: IncentiveCtrl,
                resolve: {
                    chartSlab: function () {
                        return scope.charts[parent].chartSlabs[index];
                    }
                }
            });
        }

        var IncentiveCtrl = function ($scope, $uibModalInstance, chartSlab) {
            $scope.chartSlab = chartSlab;
            _.each($scope.chartSlab.incentives, function (incentive) {
                if(!incentive.attributeValueDesc){
                    incentive.attributeValueDesc = incentive.attributeValue;
                }
            });
            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
        };


    }
  });
  mifosX.ng.application.controller('InterestRateChartController', ['$scope', '$routeParams', 'ResourceFactory','$location','$uibModal', mifosX.controllers.InterestRateChartController]).run(function($log) {
    $log.info("InterestRateChartController initialized");
  });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        LoanProductController: function (scope, resourceFactory, location) {
            scope.products = [];

            scope.routeTo = function (id) {
                location.path('/viewloanproduct/' + id);
            };

            if (!scope.searchCriteria.loanP) {
                scope.searchCriteria.loanP = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.loanP || '';

            scope.onFilter = function () {
                scope.searchCriteria.loanP = scope.filterText;
                scope.saveSC();
            };

            scope.LoanProductsPerPage = 15;
            scope.$broadcast('LoanProductDataLoadingStartEvent');
            resourceFactory.loanProductResource.getAllLoanProducts(function (data) {
                scope.loanproducts = data;
                scope.$broadcast('LoanProductDataLoadingCompleteEvent');
            });
        }
    });
    mifosX.ng.application.controller('LoanProductController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.LoanProductController]).run(function ($log) {
        $log.info("LoanProductController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddProductMixController: function (scope, resourceFactory, routeParams, location) {
            scope.allowed = [];
            scope.restricted = [];
            scope.products = [];
            resourceFactory.loanProductTemplateResource.get({isProductMixTemplate: 'true'}, function (data) {
                scope.products = data.productOptions;
            });
            scope.productInfo = function (id) {
                resourceFactory.loanProductResource.getProductmix({loanProductId: id, resourceType: 'productmix', template: 'true'}, function (data) {
                    scope.productmix = data;
                    scope.allowedProducts = data.allowedProducts;
                    scope.restrictedProducts = data.restrictedProducts;
                });
            };
            scope.restrict = function () {
                for (var i in this.allowed) {
                    for (var j in scope.allowedProducts) {
                        if (scope.allowedProducts[j].id == this.allowed[i]) {
                            var temp = {};
                            temp.id = this.allowed[i];
                            temp.name = scope.allowedProducts[j].name;
                            scope.restrictedProducts.push(temp);
                            scope.allowedProducts.splice(j, 1);
                        }
                    }
                }
                for (var i in this.allowed) {
                    for (var j in scope.restrictedProducts) {
                        if(scope.restrictedProducts[j].id == this.allowed[i]) {
                            scope.allowed.splice(i, 1);
                        }
                    }
                }
            };
            scope.allow = function () {
                for (var i in this.restricted) {
                    for (var j in scope.restrictedProducts) {
                        if (scope.restrictedProducts[j].id == this.restricted[i]) {
                            var temp = {};
                            temp.id = this.restricted[i];
                            temp.name = scope.restrictedProducts[j].name;
                            scope.allowedProducts.push(temp);
                            scope.restrictedProducts.splice(j, 1);
                        }
                    }
                }
                for (var i in this.restricted) {
                    for (var j in scope.allowedProducts) {
                        if(scope.allowedProducts[j].id == this.restricted[i]) {
                            scope.restricted.splice(i, 1);
                        }
                    }
                }
            };
            scope.submit = function () {
                var productId = this.formData.productId;
                var temp = [];
                var final = {};
                for (var i in scope.restrictedProducts) {
                    temp[i] = scope.restrictedProducts[i].id;
                }
                final.restrictedProducts = temp;
                resourceFactory.loanProductResource.save({loanProductId: productId, resourceType: 'productmix'}, final, function (data) {
                    location.path('/viewproductmix/' + data.productId);
                });
            };


        }

    });
    mifosX.ng.application.controller('AddProductMixController', ['$scope', 'ResourceFactory', '$routeParams', '$location', mifosX.controllers.AddProductMixController]).run(function ($log) {
        $log.info("AddProductMixController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        ProductMixController: function (scope, resourceFactory, location) {
            scope.productmixes = [];
            scope.routeTo = function (id) {
                location.path('/viewproductmix/' + id);
            };
            resourceFactory.loanProductResource.getAllLoanProducts({associations: 'productMixes'}, function (data) {
                scope.productmixes = data;
            });
        }
    });
    mifosX.ng.application.controller('ProductMixController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.ProductMixController]).run(function ($log) {
        $log.info("ProductMixController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewProductMixController: function (scope, resourceFactory, routeParams, location, $uibModal) {
            scope.productmix = [];
            scope.choice = 0;
            scope.allowed = [];
            scope.restricted = [];
            resourceFactory.loanProductResource.getProductmix({loanProductId: routeParams.id, resourceType: 'productmix'}, function (data) {
                scope.productmix = data;
                scope.allowedProducts = data.allowedProducts;
                scope.restrictedProducts = data.restrictedProducts;
            });

            scope.deleteProductmix = function () {
                $uibModal.open({
                    templateUrl: 'deleteproductmix.html',
                    controller: ProductmixDeleteCtrl
                });
            };
            var ProductmixDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.loanProductResource.delete({loanProductId: routeParams.id, resourceType: 'productmix'}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/productmix');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.restrict = function () {
                for (var i in this.allowed) {
                    for (var j in scope.allowedProducts) {
                        if (scope.allowedProducts[j].id == this.allowed[i]) {
                            var temp = {};
                            temp.id = this.allowed[i];
                            temp.name = scope.allowedProducts[j].name;
                            temp.includeInBorrowerCycle = scope.allowedProducts[j].includeInBorrowerCycle;
                            scope.restrictedProducts.push(temp);
                            scope.allowedProducts.splice(j, 1);
                        }
                    }
                }
                for (var i in this.allowed) {
                     for (var j in scope.restrictedProducts) {
                         if(scope.restrictedProducts[j].id == this.allowed[i]) {
                             scope.allowed.splice(i, 1);
                         }
                     }
                 }
            };
            scope.allow = function () {
                for (var i in this.restricted) {
                    for (var j in scope.restrictedProducts) {
                        if (scope.restrictedProducts[j].id == this.restricted[i]) {
                            var temp = {};
                            temp.id = this.restricted[i];
                            temp.name = scope.restrictedProducts[j].name;
                            temp.includeInBorrowerCycle = scope.restrictedProducts[j].includeInBorrowerCycle;
                            scope.allowedProducts.push(temp);
                            scope.restrictedProducts.splice(j, 1);
                        }
                    }
                }
                for (var i in this.restricted) {
                    for (var j in scope.allowedProducts) {
                        if(scope.allowedProducts[j].id == this.restricted[i]) {
                            scope.restricted.splice(i, 1);
                        }
                    }
                }            
            };
            scope.submit = function () {
                var temp = [];
                var final = {};
                for (var i in scope.restrictedProducts) {
                    temp[i] = scope.restrictedProducts[i].id;
                }
                final.restrictedProducts = temp;
                resourceFactory.loanProductResource.put({loanProductId: routeParams.id, resourceType: 'productmix'}, final, function (data) {
                    location.path('/viewproductmix/' + routeParams.id);
                });
            };


        }
    });
    mifosX.ng.application.controller('ViewProductMixController', ['$scope', 'ResourceFactory', '$routeParams', '$location', '$uibModal', mifosX.controllers.ViewProductMixController]).run(function ($log) {
        $log.info("ViewProductMixController initialized");
    });
}(mifosX.controllers || {}));
;/**
 * Created by Jose on 24/07/2017.
 */
(function (module) {
    mifosX.controllers = _.extend(module, {
        RateController: function (scope, resourceFactory, location) {
            scope.rates = [];

            scope.routeTo = function (id) {
                location.path('/viewrate/' + id);
            };

            if (!scope.searchCriteria.rates) {
                scope.searchCriteria.rates = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.rates || '';

            scope.onFilter = function () {
                scope.searchCriteria.rates = scope.filterText;
                scope.saveSC();
            };

            scope.RatesPerPage = 15;
            resourceFactory.rateResource.getAllRates(function (data) {
                scope.rates = data;
            });
        }
    });
    mifosX.ng.application.controller('RateController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.RateController]).run(function ($log) {
        $log.info("RateController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        RecurringDepositProductController: function (scope, resourceFactory, location) {
            scope.routeTo = function (id) {
                location.path('/viewrecurringdepositproduct/' + id);
            };

            if (!scope.searchCriteria.rdp) {
                scope.searchCriteria.rdp = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.rdp || '';

            scope.onFilter = function () {
                scope.searchCriteria.rdp = scope.filterText;
                scope.saveSC();
            };

            scope.RecurringDepositsPerPage =15;
            resourceFactory.recurringDepositProductResource.getAllRecurringDepositProducts(function (data) {
                scope.depositproducts = data;
            });
        }
    });
    mifosX.ng.application.controller('RecurringDepositProductController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.RecurringDepositProductController]).run(function ($log) {
        $log.info("RecurringDepositProductController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        SavingProductController: function (scope, resourceFactory, location) {
            scope.products = [];

            scope.routeTo = function (id) {
                location.path('/viewsavingproduct/' + id);
            };

            if (!scope.searchCriteria.savingP) {
                scope.searchCriteria.savingP = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.savingP || '';

            scope.onFilter = function () {
                scope.searchCriteria.savingP = scope.filterText;
                scope.saveSC();
            };

            scope.SavingsProductsPerPage = 15;
            resourceFactory.savingProductResource.getAllSavingProducts(function (data) {
                scope.savingproducts = data;
            });
        }
    });
    mifosX.ng.application.controller('SavingProductController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.SavingProductController]).run(function ($log) {
        $log.info("SavingProductController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ShareProductActionsController: function (scope, resourceFactory, location, routeParams, dateFilter) {

            scope.action = routeParams.action || "";
            scope.accountId = routeParams.accountId;
            scope.shareproductId = routeParams.productId;
            if(routeParams.dividendId) {
                scope.dividendId = routeParams.dividendId ;
            }
            scope.formData = {};
            scope.restrictDate = new Date();
            // Transaction UI Related
            scope.createdividend = false ;
            scope.paymentTypes = [];

            switch (scope.action) {
                case "createdividend":
                    resourceFactory.shareProduct.get({shareProductId: routeParams.productId}, function (data) {
                        scope.shareproductDetails = data;
                    }) ;
                    scope.title = 'label.heading.initiatedividend';
                    scope.fromDatelabelName = 'label.input.dividendperiodstartdate';
                    scope.endDatelabelName = 'label.input.dividendperiodenddate';
                    scope.createdividend = true;
                    scope.taskPermissionName = 'CREATE_SHAREDIVIDEND';
                    break;
            }

            scope.cancel = function () {
                location.path('/dividends/' + routeParams.productId);
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                var params = {command: scope.action};
                if(scope.action == 'createdividend') {
                        this.formData.dividendPeriodStartDate = dateFilter(this.formData.dividendPeriodStartDate, scope.df);
                        this.formData.dividendPeriodEndDate = dateFilter(this.formData.dividendPeriodEndDate, scope.df);
                    }
                    resourceFactory.shareproductdividendresource.save({productId: routeParams.productId},this.formData, function (data) {
                        location.path('/dividends/' + routeParams.productId);
                    });
            };
        }
    });
    mifosX.ng.application.controller('ShareProductActionsController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.ShareProductActionsController]).run(function ($log) {
        $log.info("ShareProductActionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ShareProductController: function (scope, resourceFactory, location) {
            scope.shareproducts = [];

            scope.routeTo = function (id) {
                location.path('/viewshareproduct/' + id);
            };

            if (!scope.searchCriteria.savingP) {
                scope.searchCriteria.savingP = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.savingP || '';

            scope.onFilter = function () {
                scope.searchCriteria.savingP = scope.filterText;
                scope.saveSC();
            };

            scope.ShareProductsPerPage = 15;

            scope.$broadcast('ShareProductDataLoadingStartEvent');
            resourceFactory.shareProduct.getAll(function(data) {
                scope.shareproducts = data;
                scope.$broadcast('ShareProductDataLoadingCompleteEvent');
            });
        }
    });
    mifosX.ng.application.controller('ShareProductController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.ShareProductController]).run(function ($log) {
        $log.info("ShareProductController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ShareProductDividendController: function (scope, routeParams, paginatorService, resourceFactory, location) {
            scope.dividendTransactions = [];

            resourceFactory.shareProduct.get({shareProductId: routeParams.productId}, function (data) {
                scope.shareproduct = data;
            });

            scope.routeTo = function (id, status) {
                location.path('/dividends/' + routeParams.productId+'/dividend/'+id+"/"+status);
                scope.saveSC();
            };

            if (!scope.searchCriteria.savingP) {
                scope.searchCriteria.savingP = null;
            }
            scope.filterText = scope.searchCriteria.savingP || '';

            scope.onFilter = function () {
                scope.searchCriteria.savingP = scope.filterText;
                scope.saveSC();
            };

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.dateFormat = scope.df;
                scope.saveSC();
                resourceFactory.shareproductdividendresource.getAll(params, {productId: routeParams.productId}, callback) ;
            };

            paginatorService.currentOffset = 0 ;
            scope.dividendTransactions = paginatorService.paginate(fetchFunction, 10);
        }
    });
    mifosX.ng.application.controller('ShareProductDividendController', ['$scope', '$routeParams', 'PaginatorService', 'ResourceFactory', '$location', mifosX.controllers.ShareProductDividendController]).run(function ($log) {
        $log.info("ShareProductDividendController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateTaxComponentController: function (scope, resourceFactory, location, dateFilter) {
            scope.debitaccounts = [];
            scope.creditaccounts = [];
            scope.start = {};
            scope.start.date = new Date();
            scope.restrictDate = new Date('2025-06-22');
            scope.formData = {};
            scope.tempAccounts = [];
            resourceFactory.taxcomponenttemplate.get(function (data) {
                scope.data = data;
                scope.accounts = data.glAccountOptions;
            });

            scope.populateDebitAccount = function(){
                scope.populateAccounts(scope.formData.debitAccountType);
                scope.debitaccounts = scope.tempAccounts;
                scope.debitAcountId = null;
            };

            scope.populateCreditAccount = function(){
                scope.populateAccounts(scope.formData.creditAccountType);
                scope.creditaccounts = scope.tempAccounts;
                scope.creditAcountId = null;
            };

            scope.populateAccounts = function(selectedOption){

                switch(selectedOption) {
                    case 1:
                        scope.tempAccounts = scope.accounts.assetAccountOptions;
                        break;
                    case 2:
                        scope.tempAccounts = scope.accounts.liabilityAccountOptions;
                        break;
                    case 3:
                        scope.tempAccounts = scope.accounts.equityAccountOptions;
                        break;
                    case 4:
                        scope.tempAccounts = scope.accounts.incomeAccountOptions;
                        break;
                    case 5:
                        scope.tempAccounts = scope.accounts.expenseAccountOptions;
                        break;
                    default:
                    break;
                }
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                var reqDate = dateFilter(scope.start.date, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.startDate = reqDate;
                resourceFactory.taxcomponent.save(this.formData, function (data) {
                    location.path('/viewtaxcomponent/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateTaxComponentController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.CreateTaxComponentController]).run(function ($log) {
        $log.info("CreateTaxComponentController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateTaxGroupController: function (scope, resourceFactory, location, dateFilter) {
            scope.taxComponents = [];
            scope.restrictDate = new Date('2025-06-22');
            scope.formData = {};
            scope.tempAccounts = [];
            resourceFactory.taxgrouptemplate.get(function (data) {
                scope.data = data;
            });

            scope.addTaxComponent = function () {
                var taxComponent = {
                    date: new Date()
                };
                scope.taxComponents.push(taxComponent);
            }

            scope.deleteTaxComponent = function (index) {
                scope.taxComponents.splice(index, 1);
            }

            scope.copyForSubmit = function(){
                scope.formData.taxComponents = [];
                    _.each(scope.taxComponents, function (taxcomponent) {
                        var taxComponentDetail = {};
                        taxComponentDetail.taxComponentId = taxcomponent.taxComponentId;
                        taxComponentDetail.startDate =  dateFilter(taxcomponent.date, scope.df);
                        scope.formData.taxComponents.push(taxComponentDetail);
                    });
            }

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                scope.copyForSubmit();
                this.formData.dateFormat = scope.df;
                resourceFactory.taxgroup.save(this.formData, function (data) {
                    location.path('/viewtaxgroup/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateTaxGroupController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', mifosX.controllers.CreateTaxGroupController]).run(function ($log) {
        $log.info("CreateTaxGroupController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditTaxComponentController: function (scope, resourceFactory,routeParams, location, dateFilter) {

            scope.start = {};
            scope.start.date = new Date();
            scope.restrictDate = new Date('2025-06-22');
            scope.formData = {};
            resourceFactory.taxcomponent.get({taxComponentId: routeParams.taxComponentId, template: 'true'},function (data) {
                scope.taxComponent = data;
                if (data.startDate) {
                    scope.start.date = new Date(data.startDate);
                }
                scope.formData = {
                    name: scope.taxComponent.name,
                    percentage: scope.taxComponent.percentage
                }
            });


            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                var reqDate = dateFilter(scope.start.date, scope.df);
                this.formData.dateFormat = scope.df;
                this.formData.startDate = reqDate;
                resourceFactory.taxcomponent.put({taxComponentId: routeParams.taxComponentId},this.formData, function (data) {
                    location.path('/viewtaxcomponent/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditTaxComponentController', ['$scope', 'ResourceFactory','$routeParams', '$location', 'dateFilter', mifosX.controllers.EditTaxComponentController]).run(function ($log) {
        $log.info("EditTaxComponentController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditTaxGroupController: function (scope, resourceFactory, routeParams, location, dateFilter) {

            scope.taxComponents = [];
            scope.restrictDate = new Date('2025-06-22');
            scope.formData = {};

            resourceFactory.taxgroup.get({taxGroupId: routeParams.taxGroupId, template: 'true'}, function (data) {
                scope.data = data;
                scope.createTaxComponents();
                scope.formData = {
                    name: scope.data.name
                }
            });

            scope.createTaxComponents = function () {
                _.each(scope.data.taxAssociations, function (taxMapping) {
                    var taxComponentDetail = {};
                    taxComponentDetail.id = taxMapping.id;
                    taxComponentDetail.name = taxMapping.taxComponent.name;
                    taxComponentDetail.taxComponentId = taxMapping.taxComponent.id;
                    taxComponentDetail.date = new Date(taxMapping.startDate);
                    if (taxMapping.endDate) {
                        taxComponentDetail.endDate = new Date(taxMapping.endDate);
                        taxComponentDetail.canModify = false;
                    } else {
                        taxComponentDetail.canModify = true;
                    }
                    taxComponentDetail.new = false;

                    scope.taxComponents.push(taxComponentDetail);
                });
            }

            scope.addTaxComponent = function () {
                var taxComponent = {
                    date: new Date(),
                    new: true
                };
                scope.taxComponents.push(taxComponent);
            }

            scope.deleteTaxComponent = function (index) {
                scope.taxComponents.splice(index, 1);
            }

            scope.copyForSubmit = function () {
                scope.formData.taxComponents = [];
                _.each(scope.taxComponents, function (taxcomponent) {
                    var taxComponentDetail = {};
                    taxComponentDetail.id = taxcomponent.id;
                    taxComponentDetail.taxComponentId = taxcomponent.taxComponentId;
                    if (taxcomponent.new) {
                        taxComponentDetail.startDate = dateFilter(taxcomponent.date, scope.df);
                    } else {
                        taxComponentDetail.endDate = dateFilter(taxcomponent.endDate, scope.df);
                    }

                    scope.formData.taxComponents.push(taxComponentDetail);
                });
            }


            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                scope.copyForSubmit();
                this.formData.dateFormat = scope.df;
                resourceFactory.taxgroup.put({taxGroupId: routeParams.taxGroupId}, this.formData, function (data) {
                    location.path('/viewtaxgroup/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditTaxGroupController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.EditTaxGroupController]).run(function ($log) {
        $log.info("EditTaxGroupController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        TaxComponentController: function (scope, resourceFactory, location) {
            scope.taxcomponents = [];

            scope.routeTo = function (id) {
                location.path('/viewtaxcomponent/' + id);
            };


            resourceFactory.taxcomponent.getAll(function (data) {
                scope.taxcomponents = data;
            });
        }
    });
    mifosX.ng.application.controller('TaxComponentController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.TaxComponentController]).run(function ($log) {
        $log.info("TaxComponentController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        TaxGroupController: function (scope, resourceFactory, location) {
            scope.taxgroups = [];

            scope.routeTo = function (id) {
                location.path('/viewtaxgroup/' + id);
            };


            resourceFactory.taxgroup.getAll(function (data) {
                scope.taxgroups = data;
            });
        }
    });
    mifosX.ng.application.controller('TaxGroupController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.TaxGroupController]).run(function ($log) {
        $log.info("TaxGroupController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewTaxComponentController: function (scope, resourceFactory, routeParams) {

            resourceFactory.taxcomponent.get({taxComponentId: routeParams.taxComponentId, template: 'true'},function (data) {
                scope.taxComponent = data;
            });

        }
    });
    mifosX.ng.application.controller('ViewTaxComponentController', ['$scope', 'ResourceFactory', '$routeParams',  mifosX.controllers.ViewTaxComponentController]).run(function ($log) {
        $log.info("ViewTaxComponentController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewTaxGroupController: function (scope, resourceFactory, routeParams) {

            resourceFactory.taxgroup.get({taxGroupId: routeParams.taxGroupId, template: 'false'},function (data) {
                scope.taxgroup = data;
            });

        }
    });
    mifosX.ng.application.controller('ViewTaxGroupController', ['$scope', 'ResourceFactory', '$routeParams',  mifosX.controllers.ViewTaxGroupController]).run(function ($log) {
        $log.info("ViewTaxGroupController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewChargeController: function (scope, routeParams, resourceFactory, location, $uibModal) {
            scope.charge = [];
            scope.choice = 0;
            resourceFactory.chargeResource.get({chargeId: routeParams.id}, function (data) {
                scope.charge = data;
            });

            scope.deleteCharge = function () {
                $uibModal.open({
                    templateUrl: 'deletech.html',
                    controller: ChDeleteCtrl
                });
            };
            var ChDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.chargeResource.delete({chargeId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/charges');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ViewChargeController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', mifosX.controllers.ViewChargeController]).run(function ($log) {
        $log.info("ViewChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function(module) {
  mifosX.controllers = _.extend(module, {
    ViewFixedDepositProductController: function(scope, routeParams , location , anchorScroll , resourceFactory,$uibModal ) {
        resourceFactory.fixedDepositProductResource.get({productId: routeParams.productId , template: 'true'} , function(data) {
            scope.depositproduct = data;
            scope.chartSlabs = scope.depositproduct.activeChart.chartSlabs;
            scope.hasAccounting = data.accountingRule.id == 2 ? true : false;
        });

        scope.scrollto = function (link){
                location.hash(link);
                anchorScroll();

        };

        scope.incentives = function(index){
            $uibModal.open({
                templateUrl: 'incentive.html',
                controller: IncentiveCtrl,
                resolve: {
                    chartSlab: function () {
                        return scope.depositproduct.activeChart.chartSlabs[index];
                    }
                }
            });
        }

        var IncentiveCtrl = function ($scope, $uibModalInstance, chartSlab) {
            $scope.chartSlab = chartSlab;
            _.each($scope.chartSlab.incentives, function (incentive) {
                if(!incentive.attributeValueDesc){
                    incentive.attributeValueDesc = incentive.attributeValue;
                }
            });
            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
        };
    }
  });
  mifosX.ng.application.controller('ViewFixedDepositProductController', ['$scope', '$routeParams', '$location', '$anchorScroll' , 'ResourceFactory','$uibModal', mifosX.controllers.ViewFixedDepositProductController]).run(function($log) {
    $log.info("ViewFixedDepositProductController initialized");
  });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewLoanProductController: function (scope, routeParams, location, anchorScroll, resourceFactory) {
            scope.loanproduct = [];
            scope.isAccountingEnabled = false;
            scope.isAccrualAccountingEnabled = false;

            resourceFactory.loanProductResource.get({loanProductId: routeParams.id, template: 'true'}, function (data) {
                scope.loanproduct = data;
                if (data.accountingRule.id == 2 || data.accountingRule.id == 3 || data.accountingRule.id == 4) {
                    scope.isAccountingEnabled = true;
                }

                if (data.accountingRule.id == 3 || data.accountingRule.id == 4) {
                    scope.isAccrualAccountingEnabled = true;
                }
                if(scope.loanproduct.allowAttributeOverrides != null){
                    scope.amortization = scope.loanproduct.allowAttributeOverrides.amortizationType;
                    scope.arrearsTolerance = scope.loanproduct.allowAttributeOverrides.inArrearsTolerance;
                    scope.graceOnArrearsAging = scope.loanproduct.allowAttributeOverrides.graceOnArrearsAgeing;
                    scope.interestCalcPeriod = scope.loanproduct.allowAttributeOverrides.interestCalculationPeriodType;
                    scope.interestMethod = scope.loanproduct.allowAttributeOverrides.interestType;
                    scope.graceOnPrincipalAndInterest = scope.loanproduct.allowAttributeOverrides.graceOnPrincipalAndInterestPayment;
                    scope.repaymentFrequency = scope.loanproduct.allowAttributeOverrides.repaymentEvery;
                    scope.transactionProcessingStrategy = scope.loanproduct.allowAttributeOverrides.transactionProcessingStrategyId;
                }
                if(scope.amortization || scope.arrearsTolerance || scope.graceOnArrearsAging ||
                    scope.interestCalcPeriod || scope.interestMethod || scope.graceOnPrincipalAndInterest ||
                    scope.repaymentFrequency || scope.transactionProcessingStrategy == true){
                    scope.allowAttributeConfiguration = true;
                }
                else{
                    scope.allowAttributeConfiguration = false;
                }
                scope.enableRates = scope.loanproduct.isRatesEnabled;
            });

            scope.scrollto = function (link) {
                location.hash(link);
                anchorScroll();

            };

        }
    });
    mifosX.ng.application.controller('ViewLoanProductController', ['$scope', '$routeParams', '$location', '$anchorScroll' , 'ResourceFactory', mifosX.controllers.ViewLoanProductController]).run(function ($log) {
        $log.info("ViewLoanProductController initialized");
    });
}(mifosX.controllers || {}));
;/**
 * Created by Jose on 25/07/2017.
 */
(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewRateController: function (scope, routeParams, resourceFactory, location, $uibModal) {
            scope.rate = [];
            scope.choice = 0;
            resourceFactory.rateResource.getRate({rateId: routeParams.rateId}, function (data) {
                scope.rate = data;
            });


        }
    });
    mifosX.ng.application.controller('ViewRateController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', mifosX.controllers.ViewRateController]).run(function ($log) {
        $log.info("ViewRateController initialized");
    });
}(mifosX.controllers || {}));
;(function(module) {
  mifosX.controllers = _.extend(module, {
    ViewRecurringDepositProductController: function(scope, routeParams , location , anchorScroll , resourceFactory,$uibModal ) {
        resourceFactory.recurringDepositProductResource.get({productId: routeParams.productId , template: 'true'} , function(data) {
            scope.depositproduct = data;
            scope.chartSlabs = scope.depositproduct.activeChart.chartSlabs;
            scope.hasAccounting = data.accountingRule.id == 2 ? true : false;
        });

        scope.scrollto = function (link){
                location.hash(link);
                anchorScroll();

        };

        scope.incentives = function(index){
            $uibModal.open({
                templateUrl: 'incentive.html',
                controller: IncentiveCtrl,
                resolve: {
                    chartSlab: function () {
                        return scope.depositproduct.activeChart.chartSlabs[index];
                    }
                }
            });
        };

        var IncentiveCtrl = function ($scope, $uibModalInstance, chartSlab) {
            $scope.chartSlab = chartSlab;
            _.each($scope.chartSlab.incentives, function (incentive) {
                if(!incentive.attributeValueDesc){
                    incentive.attributeValueDesc = incentive.attributeValue;
                }
            });
            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
        };
    }
  });
  mifosX.ng.application.controller('ViewRecurringDepositProductController', ['$scope', '$routeParams', '$location', '$anchorScroll' , 'ResourceFactory','$uibModal', mifosX.controllers.ViewRecurringDepositProductController]).run(function($log) {
    $log.info("ViewRecurringDepositProductController initialized");
  });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewSavingProductController: function (scope, routeParams, location, anchorScroll, resourceFactory) {
            resourceFactory.savingProductResource.get({savingProductId: routeParams.id, template: 'true'}, function (data) {
                scope.savingproduct = data;
                scope.hasAccounting = data.accountingRule.id == 2 ? true : false;
            });

            scope.scrollto = function (link) {
                location.hash(link);
                anchorScroll();

            };
        }
    });
    mifosX.ng.application.controller('ViewSavingProductController', ['$scope', '$routeParams', '$location', '$anchorScroll' , 'ResourceFactory', mifosX.controllers.ViewSavingProductController]).run(function ($log) {
        $log.info("ViewSavingProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewShareProductController: function (scope, routeParams, location, anchorScroll, resourceFactory) {
            resourceFactory.shareProduct.get({shareProductId: routeParams.id}, function (data) {
                scope.shareproduct = data;
                scope.hasAccounting = data.accountingRule.id == 2 ? true : false;
            });

            scope.scrollto = function (link) {
                location.hash(link);
                anchorScroll();

            };
        }
    });
    mifosX.ng.application.controller('ViewShareProductController', ['$scope', '$routeParams', '$location', '$anchorScroll' , 'ResourceFactory', mifosX.controllers.ViewShareProductController]).run(function ($log) {
        $log.info("ViewShareProductController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewShareProductDividendController: function (scope, routeParams, paginatorService, resourceFactory, location) {
            scope.dividendTransactions = [];
            scope.isdividendPosted = false ;
            if(routeParams.status && (routeParams.status== 'Dividend Approved' || routeParams.status== 'Dividend Posted')) {
                scope.isdividendPosted = true ;
            }
            resourceFactory.shareProduct.get({shareProductId: routeParams.productId}, function (data) {
                scope.shareproduct = data;
            });

            scope.postDividends = function () {
                resourceFactory.shareproductdividendresource.approve({productId: routeParams.productId, dividendId: routeParams.dividendId}, function (data) {
                    location.path('/dividends/' + routeParams.productId);
                });
            };

            if (!scope.searchCriteria.savingP) {
                scope.searchCriteria.savingP = null;
            }
            scope.filterText = scope.searchCriteria.savingP || '';

            scope.onFilter = function () {
                scope.searchCriteria.savingP = scope.filterText;
                scope.saveSC();
            };

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.dateFormat = scope.df;
                scope.saveSC();
                resourceFactory.shareproductdividendresource.getAll(params, {productId: routeParams.productId, dividendId: routeParams.dividendId}, callback) ;
            };

            paginatorService.currentOffset = 0 ;
            scope.dividendTransactions = paginatorService.paginate(fetchFunction, 10);
        }
    });
    mifosX.ng.application.controller('ViewShareProductDividendController', ['$scope', '$routeParams', 'PaginatorService', 'ResourceFactory', '$location', mifosX.controllers.ViewShareProductDividendController]).run(function ($log) {
        $log.info("ViewShareProductDividendController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {

        RunReportsController: function (scope, routeParams, resourceFactory, location, dateFilter, http, API_VERSION, $rootScope, $sce, $log) {
            scope.isCollapsed = false; //displays options div on startup
            scope.hideTable = true; //hides the results div on startup
            scope.hidePentahoReport = true; //hides the results div on startup
            scope.hideChart = true;
            scope.piechart = false;
            scope.barchart = false;
            scope.formData = {};
            scope.reportParams = new Array();
            scope.reportDateParams = new Array();
            scope.reqFields = new Array();
            scope.reportTextParams = new Array();
            scope.reportData = {};
            scope.reportData.columnHeaders = [];
            scope.reportData.data = [];
            scope.baseURL = "";
            scope.csvData = [];
            scope.row = [];
            scope.reportName = routeParams.name;
            scope.reportType = routeParams.type;
            scope.reportId = routeParams.reportId;
            scope.pentahoReportParameters = [];
            scope.type = "pie";

            scope.highlight = function (id) {
                var i = document.getElementById(id);
                if (i.className == 'selected-row') {
                    i.className = 'text-pointer';
                } else {
                    i.className = 'selected-row';
                }
            };
            if (scope.reportType == 'Pentaho') {
                scope.formData.outputType = 'HTML';
            };

            resourceFactory.runReportsResource.getReport({reportSource: 'FullParameterList', parameterType: true, R_reportListing: "'" + routeParams.name + "'"}, function (data) {

                for (var i in data.data) {
                    var temp = {
                        name: data.data[i].row[0],
                        variable: data.data[i].row[1],
                        label: data.data[i].row[2],
                        displayType: data.data[i].row[3],
                        formatType: data.data[i].row[4],
                        defaultVal: data.data[i].row[5],
                        selectOne: data.data[i].row[6],
                        selectAll: data.data[i].row[7],
                        parentParameterName: data.data[i].row[8],
                        inputName: "R_" + data.data[i].row[1] //model name
                    };
                    scope.reqFields.push(temp);
                    if (temp.displayType == 'select' && temp.parentParameterName == null) {
                        intializeParams(temp, {});
                    } else if (temp.displayType == 'date') {
                        scope.reportDateParams.push(temp);
                    } else if (temp.displayType == 'text') {
                        scope.reportTextParams.push(temp);
                    }
                }
            });

            if (scope.reportType == 'Pentaho') {
                resourceFactory.reportsResource.get({id: scope.reportId, fields: 'reportParameters'}, function (data) {
                    scope.pentahoReportParameters = data.reportParameters || [];
                });
            }

            function getSuccuessFunction(paramData) {
                var tempDataObj = new Object();
                var successFunction = function (data) {
                    var selectData = [];
                    var isExistedRecord = false;
                    for (var i in data.data) {
                        selectData.push({id: data.data[i].row[0], name: data.data[i].row[1]});
                    }
                    for (var j in scope.reportParams) {
                        if (scope.reportParams[j].name == paramData.name) {
                            scope.reportParams[j].selectOptions = selectData;
                            isExistedRecord = true;
                        }
                    }
                    if (!isExistedRecord) {
                        if(paramData.selectAll == 'Y'){
                            selectData.push({id: "-1", name: "All"});
                        }
                        paramData.selectOptions = selectData;
                        scope.reportParams.push(paramData);
                    }
                };
                return successFunction;
            }

            function intializeParams(paramData, params) {
                scope.errorStatus = undefined;
                scope.errorDetails = [];
                params.reportSource = paramData.name;
                params.parameterType = true;
                var successFunction = getSuccuessFunction(paramData);
                resourceFactory.runReportsResource.getReport(params, successFunction);
            }

            scope.getDependencies = function (paramData) {
                for (var i = 0; i < scope.reqFields.length; i++) {
                    var temp = scope.reqFields[i];
                    if (temp.parentParameterName == paramData.name) {
                        if (temp.displayType == 'select') {
                            var parentParamValue = this.formData[paramData.inputName];
                            if (parentParamValue != undefined) {
                                eval("var params={};params." + paramData.inputName + "='" + parentParamValue + "';");
                                intializeParams(temp, params);
                            }
                        } else if (temp.displayType == 'date') {
                            scope.reportDateParams.push(temp);
                        }
                    }
                }
            };

            scope.checkStatus = function () {
                var collapsed = false;
                if (scope.isCollapsed) {
                    collapsed = true;
                }
                return collapsed;
            };

            function invalidDate(checkDate) {
                // validates for yyyy-mm-dd returns true if invalid, false is valid
                var dateformat = /^\d{4}(\-|\/|\.)\d{1,2}\1\d{1,2}$/;

                if (!(dateformat.test(checkDate))) {
                    return true;
                } else {
                    var dyear = checkDate.substring(0, 4);
                    var dmonth = checkDate.substring(5, 7) - 1;
                    var dday = checkDate.substring(8);

                    var newDate = new Date(dyear, dmonth, dday);
                    return !((dday == newDate.getDate()) && (dmonth == newDate.getMonth()) && (dyear == newDate.getFullYear()));
                }
            }

            function removeErrors() {
                var $inputs = $(':input');
                $inputs.each(function () {
                    $(this).removeClass("validationerror");
                });
            }

            function parameterValidationErrors() {
                var tmpStartDate = "";
                var tmpEndDate = "";
                scope.errorDetails = [];
                for (var i in scope.reqFields) {
                    var paramDetails = scope.reqFields[i];
                    switch (paramDetails.displayType) {
                        case "select":
                            var selectedVal = scope.formData[paramDetails.inputName];
                            if (selectedVal == undefined || selectedVal == 0) {
                                var fieldId = '#' + paramDetails.inputName;
                                $(fieldId).addClass("validationerror");
                                var errorObj = new Object();
                                errorObj.field = paramDetails.inputName;
                                errorObj.code = 'error.message.report.parameter.required';
                                errorObj.args = {params: []};
                                errorObj.args.params.push({value: paramDetails.label});
                                scope.errorDetails.push(errorObj);
                            }
                            break;
                        case "date":
                            var tmpDate = scope.formData[paramDetails.inputName];
                            if (tmpDate == undefined || !(tmpDate > "")) {
                                var fieldId = '#' + paramDetails.inputName;
                                $(fieldId).addClass("validationerror");
                                var errorObj = new Object();
                                errorObj.field = paramDetails.inputName;
                                errorObj.code = 'error.message.report.parameter.required';
                                errorObj.args = {params: []};
                                errorObj.args.params.push({value: paramDetails.label});
                                scope.errorDetails.push(errorObj);
                            }
                            if (tmpDate && invalidDate(tmpDate) == true) {
                                var fieldId = '#' + paramDetails.inputName;
                                $(fieldId).addClass("validationerror");
                                var errorObj = new Object();
                                errorObj.field = paramDetails.inputName;
                                errorObj.code = 'error.message.report.invalid.value.for.parameter';
                                errorObj.args = {params: []};
                                errorObj.args.params.push({value: paramDetails.label});
                                scope.errorDetails.push(errorObj);
                            }

                            if (paramDetails.variable == "startDate") tmpStartDate = tmpDate;
                            if (paramDetails.variable == "endDate") tmpEndDate = tmpDate;
                            break;
                        case "text":
                            var selectedVal = scope.formData[paramDetails.inputName];
                            if (selectedVal == undefined || selectedVal == 0) {
                                var fieldId = '#' + paramDetails.inputName;
                                $(fieldId).addClass("validationerror");
                                var errorObj = new Object();
                                errorObj.field = paramDetails.inputName;
                                errorObj.code = 'error.message.report.parameter.required';
                                errorObj.args = {params: []};
                                errorObj.args.params.push({value: paramDetails.label});
                                scope.errorDetails.push(errorObj);
                            }
                            break;
                        default:
                            var errorObj = new Object();
                            errorObj.field = paramDetails.inputName;
                            errorObj.code = 'error.message.report.parameter.invalid';
                            errorObj.args = {params: []};
                            errorObj.args.params.push({value: paramDetails.label});
                            scope.errorDetails.push(errorObj);
                            break;
                    }
                }

                if (tmpStartDate > "" && tmpEndDate > "") {
                    if (tmpStartDate > tmpEndDate) {
                        var errorObj = new Object();
                        errorObj.field = paramDetails.inputName;
                        errorObj.code = 'error.message.report.incorrect.values.for.date.fields';
                        errorObj.args = {params: []};
                        errorObj.args.params.push({value: paramDetails.label});
                        scope.errorDetails.push(errorObj);
                    }
                }
            }

            function buildReportParms() {
                var paramCount = 1;
                var reportParams = "";
                for (var i = 0; i < scope.reqFields.length; i++) {
                    var reqField = scope.reqFields[i];
                    for (var j = 0; j < scope.pentahoReportParameters.length; j++) {
                        var tempParam = scope.pentahoReportParameters[j];
                        if (reqField.name == tempParam.parameterName) {
                            var paramName = "R_" + tempParam.reportParameterName;
                            if (paramCount > 1) reportParams += "&"
                            reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.formData[scope.reqFields[i].inputName]);
                            paramCount = paramCount + 1;
                        }
                    }
                }
                return reportParams;
            }

            scope.xFunction = function () {
                return function (d) {
                    return d.key;
                };
            };
            scope.yFunction = function () {
                return function (d) {
                    return d.values;
                };
            };
            scope.setTypePie = function () {
                if (scope.type == 'bar') {
                    scope.type = 'pie';
                }
            };
            scope.setTypeBar = function () {
                if (scope.type == 'pie') {
                    scope.type = 'bar';
                }
            };
            scope.colorFunctionPie = function () {
                return function (d, i) {
                    return colorArrayPie[i];
                };
            };
            scope.isDecimal = function(index){
                if(scope.reportData.columnHeaders && scope.reportData.columnHeaders.length > 0){
                    for(var i=0; i<scope.reportData.columnHeaders.length; i++){
                        if(scope.reportData.columnHeaders[index].columnType == 'DECIMAL'){
                            return true;
                        }
                    }
                }
                return false;
            };
            scope.runReport = function () {
                //clear the previous errors
                scope.errorDetails = [];
                removeErrors();

                //update date fields with proper dateformat
                for (var i in scope.reportDateParams) {
                    if (scope.formData[scope.reportDateParams[i].inputName]) {
                        scope.formData[scope.reportDateParams[i].inputName] = dateFilter(scope.formData[scope.reportDateParams[i].inputName], 'yyyy-MM-dd');
                    }
                }

                //Custom validation for report parameters
                parameterValidationErrors();

                if (scope.errorDetails.length == 0) {
                    scope.isCollapsed = true;
                    switch (scope.reportType) {
                        case "Table":
                        case "SMS":
                            scope.hideTable = false;
                            scope.hidePentahoReport = true;
                            scope.hideChart = true;
                            scope.formData.reportSource = scope.reportName;
                            resourceFactory.runReportsResource.getReport(scope.formData, function (data) {
                                //clear the csvData array for each request
                                scope.csvData = [];
                                scope.reportData.columnHeaders = data.columnHeaders;
                                scope.reportData.data = data.data;
                                for (var i in data.columnHeaders) {
                                    scope.row.push(data.columnHeaders[i].columnName);
                                }
                                scope.csvData.push(scope.row);
                                for (var k in data.data) {
                                    scope.csvData.push(data.data[k].row);
                                }
                            });
                            break;

                        case "Pentaho":
                            scope.hideTable = true;
                            scope.hidePentahoReport = false;
                            scope.hideChart = true;

                            var reportURL = $rootScope.hostUrl + API_VERSION + "/runreports/" + encodeURIComponent(scope.reportName);
                            reportURL += "?output-type=" + encodeURIComponent(scope.formData.outputType) + "&tenantIdentifier=" + $rootScope.tenantIdentifier + "&locale=" + scope.optlang.code + "&dateFormat=" + scope.df;

                            var inQueryParameters = buildReportParms();
                            if (inQueryParameters > "") reportURL += "&" + inQueryParameters;

                            // Allow untrusted urls for the ajax request.
                            // http://docs.angularjs.org/error/$sce/insecurl
                            reportURL = $sce.trustAsResourceUrl(reportURL);
                            reportURL = $sce.valueOf(reportURL);
                            http.get(reportURL, {responseType: 'arraybuffer'})
                                .then(function(response) {
                                    let data = response.data;
                                    let status = response.status;
                                    let headers = response.headers;
                                    let config = response.config;
                                    var contentType = headers('Content-Type');
                                    var file = new Blob([data], {type: contentType});
                                    var fileContent = URL.createObjectURL(file);

                                    // Pass the form data to the iframe as a data url.
                                    scope.baseURL = $sce.trustAsResourceUrl(fileContent);
                              })
                            .catch(function(error){
                                $log.error(`Error loading ${scope.reportType} report`);
                                $log.error(error);
                            });
                            break;
                        case "Chart":
                            scope.hideTable = true;
                            scope.hidePentahoReport = true;
                            scope.hideChart = false;
                            scope.formData.reportSource = scope.reportName;
                            resourceFactory.runReportsResource.getReport(scope.formData, function (data) {
                                scope.reportData.columnHeaders = data.columnHeaders;
                                scope.reportData.data = data.data;
                                scope.chartData = [];
                                scope.barData = [];
                                var l = data.data.length;
                                for (var i = 0; i < l; i++) {
                                    scope.row = {};
                                    scope.row.key = data.data[i].row[0];
                                    scope.row.values = data.data[i].row[1];
                                    scope.chartData.push(scope.row);
                                }
                                var x = {};
                                x.key = "summary";
                                x.values = [];
                                for (var m = 0; m < l; m++) {
                                    var inner = [data.data[m].row[0], data.data[m].row[1]];
                                    x.values.push(inner);
                                }
                                scope.barData.push(x);
                            });
                            break;
                        default:
                            var errorObj = new Object();
                            errorObj.field = scope.reportType;
                            errorObj.code = 'error.message.report.type.is.invalid';
                            errorObj.args = {params: []};
                            errorObj.args.params.push({value: scope.reportType});
                            scope.errorDetails.push(errorObj);
                            break;
                    }
                }
            };
        }
    });
    mifosX.ng.application.controller('RunReportsController', ['$scope', '$routeParams', 'ResourceFactory', '$location', 'dateFilter', '$http', 'API_VERSION', '$rootScope', '$sce', '$log', mifosX.controllers.RunReportsController]).run(function ($log) {
        $log.info("RunReportsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewReportsController: function (scope, routeParams, resourceFactory,  location, anchorScroll, route) {
            scope.reports = [];
            scope.type = routeParams.type;
            //to display type of report on breadcrumb
            var typeReport = routeParams.type.replace(routeParams.type[0], routeParams.type[0].toUpperCase()) + " " + "Reports";
            scope.type = typeReport;

            scope.routeTo = function (report) {
                location.path('/run_report/' + report.report_name).search({reportId: report.report_id, type: report.report_type});
            };

            scope.scrollto = function (link){
                location.hash(link);
                anchorScroll();

            };

            if (!scope.searchCriteria.reports) {
                scope.searchCriteria.reports = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.reports || '';

            scope.addLocaleReportName = function (){
                if(document.getElementsByName("locale_name") != undefined && scope.reports){
                    if(scope.reports[0].report_locale_name == undefined){
                        var result = document.getElementsByName("locale_name");
                        for(var i=0; i<result.length; i++) {
                            scope.reports[i].report_locale_name = result[i].value;
                        }
                        //console.log(JSON.stringify(scope.reports));
                    }
                    scope.onFilter();
                }
            };

            scope.filterByReportSubType = function(report) {
                return !(report.report_subtype === 'Triggered');
            }

            scope.onFilter = function () {
                scope.searchCriteria.reports = scope.filterText;
                scope.saveSC();
            };

            if (routeParams.type == 'all') {
                resourceFactory.runReportsResource.get({reportSource: 'FullReportList', parameterType: true, genericResultSet: false}, function (data) {
                    scope.reports = scope.getReports(data);
                });
            } else if (routeParams.type == 'clients') {
                resourceFactory.runReportsResource.get({reportSource: 'reportCategoryList', R_reportCategory: 'Client', parameterType: true, genericResultSet: false}, function (data) {
                    scope.reports = scope.getReports(data);
                });
            } else if (routeParams.type == 'loans') {
                resourceFactory.runReportsResource.get({reportSource: 'reportCategoryList', R_reportCategory: 'Loan', parameterType: true, genericResultSet: false}, function (data) {
                    scope.reports = scope.getReports(data);
                });
            } else if (routeParams.type == 'savings') {
                resourceFactory.runReportsResource.get({reportSource: 'reportCategoryList', R_reportCategory: 'Savings', parameterType: true, genericResultSet: false}, function (data) {
                    scope.reports = scope.getReports(data);
                });
            } else if (routeParams.type == 'funds') {
                resourceFactory.runReportsResource.get({reportSource: 'reportCategoryList', R_reportCategory: 'Fund', parameterType: true, genericResultSet: false}, function (data) {
                    scope.reports = scope.getReports(data);
                });
            } else if (routeParams.type == 'accounting') {
                resourceFactory.runReportsResource.get({reportSource: 'reportCategoryList', R_reportCategory: 'Accounting', parameterType: true, genericResultSet: false}, function (data) {
                    scope.reports = scope.getReports(data);
                });
            }

            scope.ReportsPerPage = 15;

            // Remove the duplicate entries from the array. The reports api returns same report multiple times if it have more than one parameter.
            scope.getReports = function (data) {
                var prevId = -1;
                var currId;
                var reports = [];
                for (var i = 0; i < data.length; i++) {
                    currId = data[i].report_id;
                    if (currId != prevId)
                        reports.push(data[i]);
                    prevId = currId;
                }
                return reports;
            };
        }
    });
    mifosX.ng.application.controller('ViewReportsController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$route', '$anchorScroll' ,mifosX.controllers.ViewReportsController]).run(function ($log) {
        $log.info("ViewReportsController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        XBRLController: function (scope, resourceFactory, location, dateFilter, route, http, API_VERSION, $rootScope, localStorageService, $timeout) {
            scope.offices = [];
            scope.date = {};
            scope.restrictDate = new Date();
            scope.formData = {};
            scope.mixtaxonomyArray = [];
            resourceFactory.xbrlMixtaxonomyResource.get(function (data) {
                scope.mixtaxonomyArray = data;
                http({
                    method: 'GET',
                    url: $rootScope.hostUrl + API_VERSION + '/mixmapping'
                })
                    .then(function onSuccess(response) {
                        var data = response.data;
                        var mappingJson = data.config;
                        if (mappingJson != undefined && mappingJson.length > 0) {
                            for (var i = scope.mixtaxonomyArray.length - 1; i >= 0; i--) {
                                var taxonomyId = scope.mixtaxonomyArray[i]["id"];
                                var mapping = ($.parseJSON(mappingJson))['' + taxonomyId];
                                if (mapping != undefined) {
                                    scope.mixtaxonomyArray[i].mapping = mapping;
                                }

                            }
                        }
                    }).catch(function onError(response) {
                        console.log("Error Detected: ", response.data)
                    });
            });

            resourceFactory.accountCoaResource.getAllAccountCoas(function (data) {
                scope.glaccounts = [];

                for (var i = 0; i < data.length; i++) {
                    var glaccount = {};
                    glaccount.label = "{" + data[i].glCode + "}" + " - " + data[i].name;
                    glaccount.value = "{" + data[i].glCode + "}";
                    scope.glaccounts.push(glaccount);
                }

            });

            if (localStorageService.getFromLocalStorage('XbrlReportSaveSuccess') == 'true') {
                scope.savesuccess = true;
                localStorageService.removeFromLocalStorage('XbrlReportSaveSuccess');
                scope.XbrlSuccess = true;
                $timeout(function () {
                    scope.XbrlSuccess = false;
                }, 3000);

            }

            scope.isPortfolio = function (mixtaxonomy) {
                if (mixtaxonomy.type === 0) {
                    return true;
                } else {
                    return false;
                }
            };

            scope.isBalanceSheet = function (mixtaxonomy) {
                if (mixtaxonomy.type === 1) {
                    return true;
                } else {
                    return false;
                }
            };

            scope.isIncome = function (mixtaxonomy) {
                if (mixtaxonomy.type === 2) {
                    return true;
                } else {
                    return false;
                }
            };

            scope.isExpense = function (mixtaxonomy) {
                if (mixtaxonomy.type === 3) {
                    return true;
                } else {
                    return false;
                }
            };

            scope.run = function () {
                scope.startDate = dateFilter(scope.date.startDate, 'yyyy-MM-dd');
                scope.endDate = dateFilter(scope.date.endDate, 'yyyy-MM-dd');

                if (scope.startDate === undefined) {
                    scope.startDate = "";
                }
                if (scope.endDate === undefined) {
                    scope.endDate = "";
                }

                http({
                    method: 'GET',
                    url: $rootScope.hostUrl + API_VERSION + '/mixreport?startDate=' + scope.startDate + '&endDate=' + scope.endDate
                }).then(function onSuccess(response) {
                        var data = response.data;
                        var parser = new DOMParser();
                        var xmlDoc = parser.parseFromString(data, "text/xml");
                        $rootScope.xmlData = xmlDoc;
                        location.path('/xbrlreport');
                    }) .catch( function onError(response) {
                        console.log("Error Detected: ", response.data)
                    });
            };

            scope.submit = function () {
                var config = {};
                var serialObject = {};
                for (var i = scope.mixtaxonomyArray.length - 1; i >= 0; i--) {
                    var taxonomyId = scope.mixtaxonomyArray[i]["id"];
                    var mapping = scope.mixtaxonomyArray[i].mapping;
                    config["" + taxonomyId] = mapping;
                }
                serialObject["config"] = JSON.stringify(config);
                serialObject["identifier"] = "default";
                resourceFactory.xbrlMixMappingResource.update({}, JSON.stringify(serialObject), function (data) {
                    localStorageService.addToLocalStorage('XbrlReportSaveSuccess', true);
                    route.reload();
                });
            };
        }
    });
    mifosX.ng.application.controller('XBRLController', ['$scope', 'ResourceFactory', '$location', 'dateFilter', '$route', '$http', 'API_VERSION', '$rootScope',
            'localStorageService', '$timeout', mifosX.controllers.XBRLController]).run(function ($log) {
            $log.info("XBRLController initialized");
        });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        XBRLReportController: function (scope, resourceFactory, location, $rootScope) {

            scope.xmlData = $rootScope.xmlData;
            var html = "<table width='100%' border='1'><tr><th>Title</th><th>Dimension</th><th>Value</th></tr>";
            $(scope.xmlData).find("*[contextRef]").each(function (i) {
                var contextId = $(this).attr("contextRef");
                var context = $(scope.xmlData).find("#" + contextId).find("scenario").text();
                html += '<tr>';
                html += '<td>' + this.tagName + '</td>';
                html += '<td>' + context + '</td>';
                var inputId = this.tagName + "|" + contextId;
                html += '<td><input type="text" class="report" id="' + inputId + '" value="' + $(this).text() + '" ></td>';
                html += '</tr>';
            });
            $("#xbrlreport").html(html);

            scope.saveReport = function () {
                var string = (new XMLSerializer()).serializeToString(scope.xmlData);
                window.location.href = 'data:Application/octet-stream;Content-Disposition:attachment;filename=file.xml,' + escape(string);
            };


        }
    });
    mifosX.ng.application.controller('XBRLReportController', ['$scope', 'ResourceFactory', '$location', '$rootScope', mifosX.controllers.XBRLReportController]).run(function ($log) {
        $log.info("XBRLReportController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddNewMemberToGSIMController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.accountId = routeParams.gsimChildAccountId;
            scope.groupId=routeParams.groupId;
            scope.gsimAccountNo=routeParams.parentGSIMAccounNo;
            scope.charges = [];
            scope.restrictDate = new Date();
            scope.childAccounts=[];
            scope.group=[];
            scope.group.clients=[];
            resourceFactory.savingsResource.get({accountId: scope.accountId, template: 'true', associations: 'charges',staffInSelectedOfficeOnly:'true'}, function (data) {
                scope.data = data;
                scope.charges = data.charges || [];
                if (scope.charges) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == "Monthly Fee") {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            scope.charges[i].dueDate = new Date(dateFilter(scope.charges[i].dueDate, scope.df));
                        }
                    }
                }

                if (data.clientId) {
                    scope.formData.clientId = data.clientId;
                    scope.clientName = data.clientName;
                }
                if (data.groupId) {
                    scope.formData.groupId = data.groupId;
                    scope.groupName = data.groupName;
                }
                scope.formData.productId = data.savingsProductId;
                scope.products = data.productOptions;
                if (data.fieldOfficerId != 0)scope.formData.fieldOfficerId = data.fieldOfficerId;
                if (data.timeline) {
                    var submittedOnDate = dateFilter(data.timeline.submittedOnDate, scope.df);
                    scope.formData.submittedOnDate = new Date(submittedOnDate);
                }
                scope.formData.externalId = data.externalId;
                scope.fieldOfficers = data.fieldOfficerOptions;
                scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                scope.formData.minRequiredOpeningBalance = data.minRequiredOpeningBalance;
                scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                scope.formData.withdrawalFeeAmount = data.withdrawalFeeAmount;
                scope.formData.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;
                scope.formData.allowOverdraft = data.allowOverdraft;
                scope.formData.overdraftLimit = data.overdraftLimit;
                scope.formData.nominalAnnualInterestRateOverdraft = data.nominalAnnualInterestRateOverdraft;
                scope.formData.minOverdraftForInterestCalculation = data.minOverdraftForInterestCalculation;
                scope.formData.enforceMinRequiredBalance = data.enforceMinRequiredBalance;
                scope.formData.minRequiredBalance = data.minRequiredBalance;
                scope.formData.withHoldTax = data.withHoldTax;

                if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;
            });

            scope.changeProduct = function () {
                var inparams = {productId: scope.formData.productId};
                if (scope.formData.clientId) inparams.clientId = scope.formData.clientId;
                if (scope.formData.groupId) inparams.groupId = scope.formData.groupId;
                resourceFactory.savingsTemplateResource.get(inparams, function (data) {

                    scope.data = data;
                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                    scope.formData.minRequiredOpeningBalance = data.minRequiredOpeningBalance;
                    scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                    scope.formData.withdrawalFeeAmount = data.withdrawalFeeAmount;
                    scope.formData.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;
                    scope.formData.withHoldTax = data.withHoldTax;

                    if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                    if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                    if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                    if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                    if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                    if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;
                });
            }

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        if (data.chargeTimeType.value == "Annual Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        } else if (data.chargeTimeType.value == "Monthly Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        }

                        delete data.id;
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/viewsavingaccount/' + scope.accountId);
            }

            scope.clientsNotPresentInGSIM=[];
            scope.childGSIMAccounts=[];
            resourceFactory.groupClients.get({groupId:scope.groupId,associations:'activeClientMembers'}, function (data) {

                scope.group= data;
                scope.group.clients= data.activeClientMembers;

                resourceFactory.groupGSIMAccountResource.get({groupId:scope.groupId,parentGSIMAccountNo:scope.gsimAccountNo}, function (data1) {

                    scope.childGSIMAccounts=data1[0].childGSIMAccounts;

                    for(var i=0;i<scope.group.clients.length;i++)
                    {

                        if(scope.childGSIMAccounts[i] == null)
                        {
                            scope.clientsNotPresentInGSIM.push(scope.group.clients[i]);

                        }
                        else
                        {
                            if(scope.childGSIMAccounts[i].clientId!=scope.group.clients[i].id)
                            {
                                scope.clientsNotPresentInGSIM.push(scope.group.clients[i]);
                            }
                        }
                    }
                });
            });

            scope.checkerInboxAllCheckBoxesMet = function() {
                if(!angular.isUndefined(scope.clientsNotPresentInGSIM)) {
                    var count = 0;
                    for (var i in scope.clientsNotPresentInGSIM) {
                        if(scope.clientsNotPresentInGSIM[i].isSelected){
                            count++;
                        }
                    }
                    scope.isAllClientSelected = (scope.clientsNotPresentInGSIM.length==count);
                    return scope.isAllClientSelected;
                }
            }

            scope.checkerInboxAllCheckBoxesClicked = function() {
                scope.isAllClientSelected = !scope.isAllClientSelected;
                if(!angular.isUndefined(scope.clientsNotPresentInGSIM)) {
                    for (var i in scope.clientsNotPresentInGSIM) {
                        scope.clientsNotPresentInGSIM[i].isSelected = scope.isAllClientSelected;
                    }
                }
            }

            scope.submit = function () {
                if (this.formData.submittedOnDate)  this.formData.submittedOnDate = dateFilter(this.formData.submittedOnDate, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.monthDayFormat = "dd MMM";
                scope.formData.charges = [];
                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM')});
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                dueDate: dateFilter(scope.charges[i].dueDate, scope.df)});
                        } else if (scope.charges[i].chargeTimeType.value == 'Monthly Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM'), feeInterval: scope.charges[i].feeInterval});
                        } else {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount});
                        }
                    }
                }

                resourceFactory.savingsResource.update({'accountId': scope.accountId}, this.formData, function (data) {
                    location.path('/viewsavingaccount/' + data.savingsId);
                });
            };
        }
    });
    mifosX.ng.application.controller('AddNewMemberToGSIMController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.AddNewMemberToGSIMController]).run(function ($log) {
        $log.info("AddNewMemberToGSIMController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddNewSavingsChargeController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.offices = [];
            scope.cancelRoute = routeParams.id;
            scope.date = {};

            resourceFactory.savingsChargeResource.get({accountId: routeParams.id, resourceType: 'template'}, function (data) {
                scope.chargeOptions = data.chargeOptions;
            });

            scope.chargeSelected = function (id) {
                resourceFactory.chargeResource.get({chargeId: id, template: 'true'}, function (data) {
                    scope.chargeCalculationType = data.chargeCalculationType.id;
                    scope.chargeTimeType = data.chargeTimeType.id;
                    scope.chargeDetails = data;
                    scope.formData.amount = data.amount;
                    if(data.chargeTimeType.value === "Withdrawal Fee"
                        || data.chargeTimeType.value === "Saving No Activity Fee"){
                        scope.dueDateNotRequired = true;
                    }
                    scope.formData.feeInterval = data.feeInterval;
                    if (data.chargeTimeType.value === "Annual Fee" || data.chargeTimeType.value === "Monthly Fee") {
                        scope.chargeTimeTypeAnnualOrMonth = true;
                    }
                });
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                if (scope.dueDateNotRequired !== true) {
                    if (scope.chargeTimeTypeAnnualOrMonth === true) {
                        this.formData.monthDayFormat = "dd MMMM";
                        if (scope.date.due) {
                            this.formData.feeOnMonthDay = dateFilter(scope.date.due, 'dd MMMM');
                        } else {
                            this.formData.feeOnMonthDay = "";
                        }
                    } else {
                        this.formData.dateFormat = scope.df;
                        if (scope.date.specificduedate) {
                            this.formData.dueDate = dateFilter(scope.date.specificduedate, scope.df);
                        } else {
                            this.formData.dueDate = "";
                        }
                    }
                }
                resourceFactory.savingsChargeResource.save({accountId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewsavingaccount/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('AddNewSavingsChargeController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.AddNewSavingsChargeController]).run(function ($log) {
        $log.info("AddNewSavingsChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AssignSavingsOfficerController: function (scope, resourceFactory, routeParams, location, dateFilter) {

            scope.loanOfficers = [];
            scope.formData = {};
            scope.staffData = {};
            scope.paramData = {};
            scope.accountNo = routeParams.id;


            resourceFactory.savingsResource.get({accountId: routeParams.id, template: 'true'}, function (data) {
                if(data.fieldOfficerOptions) {
                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData.toSavingsOfficerId = data.fieldOfficerOptions[0].id;
                }
                scope.data = data;
            });


            scope.cancel = function () {
                location.path('/viewsavingaccount/' + scope.data.accountNo);
            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.fromSavingsOfficerId = scope.data.fieldOfficerId || "";
                this.formData.assignmentDate = dateFilter(this.formData.assignmentDate, scope.df);
                resourceFactory.savingsResource.save({accountId: routeParams.id, command: 'assignSavingsOfficer'}, this.formData, function (data) {
                    location.path('/viewsavingaccount/' + scope.data.accountNo);
                });
            };

        }
    });
    mifosX.ng.application.controller('AssignSavingsOfficerController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.AssignSavingsOfficerController]).run(function ($log) {
        $log.info("AssignSavingsOfficerController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportSavingsAccountController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/savingsaccounts/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams += '&officeId=' + scope.formData.officeId;
                    }else {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }

            };

            scope.changeStaff = function() {
                if(scope.formData.staffId) {
                    if (scope.first.queryParams.indexOf("staffId")==-1) {
                        scope.first.queryParams = scope.first.queryParams + '&staffId=' + scope.formData.staffId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&staffId=\d+/i,"&staffId="+ scope.formData.staffId);
                    }
                } else {
                    if(scope.formData.officeId)
                        scope.first.queryParams = '&' + 'officeId=' + scope.formData.officeId;
                    else
                        scope.first.queryParams = '&';
                }
            };
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "savingsaccount"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };


            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/savingsaccounts/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportSavingsAccountController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportSavingsAccountController]).run(function ($log) {
        $log.info("BulkImportSavingsAccountController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportSavingsAccountsTransactionsController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/savingsaccounts/transactions/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        scope.first.queryParams += 'officeId=' + scope.formData.officeId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }
            };
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "savingstransactions"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };
            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/savingsaccounts/transactions/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportSavingsAccountsTransactionsController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportSavingsAccountsTransactionsController]).run(function ($log) {
        $log.info("BulkImportSavingsAccountsTransactionsController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateGSIMAccountController: function (scope, resourceFactory, location, routeParams, dateFilter, WizardHandler) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData1 = {};
            scope.formData = {};
            scope.formDat = {};
            scope.restrictDate = new Date();
            scope.clientId = routeParams.clientId;
            scope.groupId = routeParams.groupId;
            scope.date = {};
            scope.date.submittedOnDate = new Date();
            scope.datatables = [];
            scope.noOfTabs = 1;
            scope.step = '-';
            scope.formData1.datatables = [];
            scope.formDat.datatables = [];
            scope.tf = "HH:mm";
            scope.tempDataTables = [];
            scope.isAllClientSelected = false;
            scope.group={};
            scope.group.clients=[];

            if (routeParams.centerEntity) {
                scope.centerEntity = true;
            }
            scope.charges = [];
            scope.inparams = {};
            if (scope.clientId) {
                scope.inparams.clientId = scope.clientId
            }
            ;
            if (scope.groupId) {
                scope.inparams.groupId = scope.groupId
            }
            ;
            if (scope.centerId) {
                scope.inparams.centerId = scope.centerId
            }
            ;

            scope.inparams.staffInSelectedOfficeOnly = true;

            resourceFactory.groupClients.get({groupId:scope.groupId,associations:'activeClientMembers'}, function (data) {

                scope.group= data;
                scope.group.clients= data.activeClientMembers;
            });

            scope.checkerInboxAllCheckBoxesMet = function() {
                if(!angular.isUndefined(scope.group.clients)) {
                    var count = 0;
                    for (var i in scope.group.clients) {
                        if(scope.group.clients[i].isSelected){
                            count++;
                        }
                    }
                    scope.isAllClientSelected = (scope.group.clients.length==count);
                    return scope.isAllClientSelected;
                }
            }
            scope.checkerInboxAllCheckBoxesClicked = function() {
                scope.isAllClientSelected = !scope.isAllClientSelected;
                if(!angular.isUndefined(scope.group.clients)) {
                    for (var i in scope.group.clients) {
                        scope.group.clients[i].isSelected = scope.isAllClientSelected;
                    }
                }
            }
            resourceFactory.savingsTemplateResource.get(scope.inparams, function (data) {
                scope.products = data.productOptions;
                scope.chargeOptions = data.chargeOptions;
                scope.clientName = data.clientName;
                scope.groupName = data.groupName;
                scope.datatables = data.datatables;
                scope.handleDatatables(scope.datatables);
            });

            scope.handleDatatables = function (datatables) {
                if (!_.isUndefined(datatables) && datatables.length > 0) {
                    scope.formData1.datatables = [];
                    scope.formDat.datatables = [];
                    scope.noOfTabs = datatables.length + 1;
                    angular.forEach(datatables, function (datatable, index) {
                        scope.updateColumnHeaders(datatable.columnHeaderData);
                        angular.forEach(datatable.columnHeaderData, function (colHeader, i) {
                            if (_.isEmpty(scope.formDat.datatables[index])) {
                                scope.formDat.datatables[index] = {data: {}};
                            }

                            if (_.isEmpty(scope.formData1.datatables[index])) {
                                scope.formData1.datatables[index] = {
                                    registeredTableName: datatable.registeredTableName,
                                    data: {locale: scope.optlang.code}
                                };
                            }

                            if (datatable.columnHeaderData[i].columnDisplayType == 'DATETIME') {
                                scope.formDat.datatables[index].data[datatable.columnHeaderData[i].columnName] = {};
                            }
                        });
                    });
                }
            };

            scope.updateColumnHeaders = function(columnHeaderData) {
                var colName = columnHeaderData[0].columnName;
                if (colName == 'id') {
                    columnHeaderData.splice(0, 1);
                }

                colName = columnHeaderData[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    columnHeaderData.splice(0, 1);
                }
            };

            scope.changeProduct = function () {
                _.isUndefined(scope.datatables) ? scope.tempDataTables = [] : scope.tempDataTables = scope.datatables;
                WizardHandler.wizard().removeSteps(1, scope.tempDataTables.length);
                scope.inparams.productId = scope.formData1.productId;
                resourceFactory.savingsTemplateResource.get(scope.inparams, function (data) {

                    scope.data = data;
                    scope.charges = data.charges;

                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value === "Annual Fee" && scope.charges[i].feeOnMonthDay) {
                            scope.charges[i].feeOnMonthDay.push('2013');
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        }
                    }
                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData1.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                    scope.formData1.minRequiredOpeningBalance = data.minRequiredOpeningBalance;
                    scope.formData1.lockinPeriodFrequency = data.lockinPeriodFrequency;
                    scope.formData1.withdrawalFeeAmount = data.withdrawalFeeAmount;
                    scope.formData1.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;
                    scope.formData1.allowOverdraft = data.allowOverdraft;
                    scope.formData1.overdraftLimit = data.overdraftLimit;
                    scope.formData1.nominalAnnualInterestRateOverdraft = data.nominalAnnualInterestRateOverdraft;
                    scope.formData1.minOverdraftForInterestCalculation = data.minOverdraftForInterestCalculation;
                    scope.formData1.enforceMinRequiredBalance = data.enforceMinRequiredBalance;
                    scope.formData1.minRequiredBalance = data.minRequiredBalance;
                    scope.formData1.withHoldTax = data.withHoldTax;

                    if (data.interestCompoundingPeriodType) scope.formData1.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                    if (data.interestPostingPeriodType) scope.formData1.interestPostingPeriodType = data.interestPostingPeriodType.id;
                    if (data.interestCalculationType) scope.formData1.interestCalculationType = data.interestCalculationType.id;
                    if (data.interestCalculationDaysInYearType) scope.formData1.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                    if (data.lockinPeriodFrequencyType) scope.formData1.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                    if (data.withdrawalFeeType) scope.formData1.withdrawalFeeType = data.withdrawalFeeType.id;
                    scope.datatables = data.datatables;
                    scope.handleDatatables(scope.datatables);
                });
            };

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        if (data.chargeTimeType.value == "Annual Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        } else if (data.chargeTimeType.value == "Monthly Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        }
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            var applicationId= Math.floor((Math.random() * 9999999999) + 1);
            scope.submit = function () {

                if (scope.date) {
                    this.formData1.submittedOnDate = dateFilter(scope.date.submittedOnDate, scope.df);
                }
                this.formData1.locale = scope.optlang.code;
                this.formData1.dateFormat = scope.df;
                this.formData1.monthDayFormat = "dd MMM";
                this.formData1.charges = [];

                if (scope.charges.length > 0) {

                    for (var i in scope.charges) {

                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            this.formData1.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM')});
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            this.formData1.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                dueDate: dateFilter(scope.charges[i].dueDate, scope.df)});
                        } else if (scope.charges[i].chargeTimeType.value == 'Monthly Fee') {
                            this.formData1.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM'), feeInterval: scope.charges[i].feeInterval});
                        } else if (scope.charges[i].chargeTimeType.value == 'Weekly Fee') {
                            this.formData1.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount, dueDate: dateFilter(scope.charges[i].dueDate, scope.df), feeInterval: scope.charges[i].feeInterval});
                        }
                        else {
                            this.formData1.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount});
                        }
                    }
                }

                if (!_.isUndefined(scope.datatables) && scope.datatables.length > 0) {
                    angular.forEach(scope.datatables, function (datatable, index) {
                        scope.columnHeaders = datatable.columnHeaderData;
                        angular.forEach(scope.columnHeaders, function (colHeader, i) {
                            scope.dateFormat = scope.df + " " + scope.tf
                            if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName])) {
                                    scope.formData1.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName],
                                        scope.dateFormat);
                                    scope.formData1.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            } else if (scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date) && !_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time)) {
                                    scope.formData1.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date, scope.df)
                                        + " " + dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time, scope.tf);
                                    scope.formData1.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            }
                        });
                    });
                } else {
                    delete scope.formData1.datatables;
                }

                //count the number of selected applications
                var applicationCount=0;
                // count number of application
                for (var i in scope.group.clients) {
                    if (scope.group.clients[i].isSelected) {

                        applicationCount=applicationCount+1;
                    }
                }
                console.log('application count is'+applicationCount);
                scope.formData1.isGSIM=true;
                this.formData.clientArray=[];
                scope.formData1.groupId = scope.groupId; //
                scope.formData1.applicationId=applicationId; //
                var count=0;
                scope.formData1.lastApplication=true;
                var z=0;
                for(var c in scope.group.clients)
                {
                    if(scope.group.clients[c].isSelected)
                    {
                        if(z===0)
                        {
                            scope.formData1.isParentAccount=true;
                        }
                        z++;
                        if(z===applicationCount)
                        {
                            console.log("z is"+z);
                            console.log("val of z"+applicationCount);
                            scope.formData1.lastApplication=true; //
                        }
                        var temp={};
                        temp=JSON.parse(JSON.stringify(scope.formData1));
                        temp.clientId=scope.group.clients[c].id;
                        if(z!=applicationCount)
                        {
                            delete temp.lastApplication;
                        }
                        this.formData.clientArray[count++]=temp;

                        if(z==1)
                        {
                            delete scope.formData1.isParentAccount;
                        }

                    }
                }

                resourceFactory.gsimResource.save(this.formData, function (data) {
                    location.path('/viewgroup/'+ scope.groupId);
                });
            };

            scope.cancel = function () {
                if (scope.clientId) {
                    location.path('/viewclient/' + scope.clientId);
                } else if (scope.centerEntity) {
                    location.path('/viewcenter/' + scope.groupId);
                } else {
                    location.path('/viewgroup/' + scope.groupId);
                }
            }
        }
    });
    mifosX.ng.application.controller('CreateGSIMAccountController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', 'WizardHandler', mifosX.controllers.CreateGSIMAccountController]).run(function ($log) {
        $log.info("CreateGSIMAccountController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateSavingAccountController: function (scope, $rootScope, resourceFactory, location, routeParams, dateFilter,WizardHandler) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.formDat = {};
            scope.savingdetails = {};
            scope.restrictDate = new Date();
            scope.clientId = routeParams.clientId;
            scope.groupId = routeParams.groupId;
			scope.date = {};
			scope.date.submittedOnDate = new Date();
            scope.datatables = [];
            scope.noOfTabs = 1;
            scope.step = '-';
            scope.formData.datatables = [];
            scope.formDat.datatables = [];
            scope.tf = "HH:mm";
            scope.tempDataTables = [];
            scope.disabled = true;

            if (routeParams.centerEntity) {
                scope.centerEntity = true;
            }
            scope.charges = [];
            scope.inparams = {};
            if (scope.clientId) {
                scope.inparams.clientId = scope.clientId
            }

            if (scope.groupId) {
                scope.inparams.groupId = scope.groupId
            }

            if (scope.centerId) {
                scope.inparams.centerId = scope.centerId
            }


            scope.inparams.staffInSelectedOfficeOnly = true;
            
            resourceFactory.savingsTemplateResource.get(scope.inparams, function (data) {
                scope.products = data.productOptions;
                scope.chargeOptions = data.chargeOptions;
                scope.clientName = data.clientName;
                scope.groupName = data.groupName;
            });

            scope.handleDatatables = function (datatables) {
                if (!_.isUndefined(datatables) && datatables.length > 0) {
                    scope.formData.datatables = [];
                    scope.formDat.datatables = [];
                    scope.noOfTabs = datatables.length + 1;
                    angular.forEach(datatables, function (datatable, index) {
                        scope.updateColumnHeaders(datatable.columnHeaderData);
                        angular.forEach(datatable.columnHeaderData, function (colHeader, i) {
                            if (_.isEmpty(scope.formDat.datatables[index])) {
                                scope.formDat.datatables[index] = {data: {}};
                            }

                            if (_.isEmpty(scope.formData.datatables[index])) {
                                scope.formData.datatables[index] = {
                                    registeredTableName: datatable.registeredTableName,
                                    data: {locale: scope.optlang.code}
                                };
                            }

                            if (datatable.columnHeaderData[i].columnDisplayType == 'DATETIME') {
                                scope.formDat.datatables[index].data[datatable.columnHeaderData[i].columnName] = {};
                            }
                        });
                    });
                }
            };

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
            }

            scope.updateColumnHeaders = function(columnHeaderData) {
                var colName = columnHeaderData[0].columnName;
                if (colName == 'id') {
                    columnHeaderData.splice(0, 1);
                }

                colName = columnHeaderData[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    columnHeaderData.splice(0, 1);
                }
            };

            scope.formValue = function(array,model,findattr,retAttr){
                findattr = findattr ? findattr : 'id';
                retAttr = retAttr ? retAttr : 'value';
                console.log(findattr,retAttr,model);
                return _.find(array, function (obj) {
                    return obj[findattr] === model;
                })[retAttr];
            };

            scope.changeProduct = function () {
                // _.isUndefined(scope.datatables) ? scope.tempDataTables = [] : scope.tempDataTables = scope.datatables;
                scope.inparams.productId = scope.formData.productId;
                resourceFactory.savingsTemplateResource.get(scope.inparams, function (data) {

                    scope.data = data;
                    scope.charges = data.charges;

                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value === "Annual Fee" && scope.charges[i].feeOnMonthDay) {
                            scope.charges[i].feeOnMonthDay.push('2013');
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        }
                    }
                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                    scope.formData.minRequiredOpeningBalance = data.minRequiredOpeningBalance;
                    scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                    /* FIX-ME: uncomment annualFeeAmount when datepicker avialable, because it depends on the date field 'annualFeeOnMonthDay'*/
                    //scope.formData.annualFeeAmount = data.annualFeeAmount;
                    scope.formData.withdrawalFeeAmount = data.withdrawalFeeAmount;
                    scope.formData.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;
                    scope.formData.allowOverdraft = data.allowOverdraft;
                    scope.formData.overdraftLimit = data.overdraftLimit;
                    scope.formData.nominalAnnualInterestRateOverdraft = data.nominalAnnualInterestRateOverdraft;
                    scope.formData.minOverdraftForInterestCalculation = data.minOverdraftForInterestCalculation;
                    scope.formData.enforceMinRequiredBalance = data.enforceMinRequiredBalance;
                    scope.formData.minRequiredBalance = data.minRequiredBalance;
                    scope.formData.withHoldTax = data.withHoldTax;

                    if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                    if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                    if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                    if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                    if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                    if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;
                    scope.datatables = data.datatables;
                    scope.handleDatatables(scope.datatables);
                    scope.disabled = false;
                    scope.savingdetails = angular.copy(scope.formData);
                    scope.savingdetails.productName = scope.formValue(scope.products,scope.formData.productId,'id','name');
                    scope.savingdetails.interestCompoundingPeriodTypeValue = scope.formValue(data.interestCompoundingPeriodTypeOptions,scope.formData.interestCompoundingPeriodType);
                    scope.savingdetails.interestPostingPeriodTypeValue = scope.formValue(data.interestPostingPeriodTypeOptions,scope.formData.interestPostingPeriodType);
                    scope.savingdetails.interestCalculationTypeValue = scope.formValue(data.interestCalculationTypeOptions,scope.formData.interestCalculationType);
                    scope.savingdetails.interestCalculationDaysInYearTypeValue = scope.formValue(data.interestCalculationDaysInYearTypeOptions,scope.formData.interestCalculationDaysInYearType);
                });
            };

            scope.$watch('formData',function(newVal){
               scope.savingdetails = angular.extend(scope.savingdetails,newVal);
            });

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        if (data.chargeTimeType.value == "Annual Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        } else if (data.chargeTimeType.value == "Monthly Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        }
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            //return input type
            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.submit = function () {
                if (scope.date) {
                    this.formData.submittedOnDate = dateFilter(scope.date.submittedOnDate, scope.df);
                }
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.monthDayFormat = "dd MMM";
                this.formData.charges = [];

                if (scope.clientId) this.formData.clientId = scope.clientId;
                if (scope.groupId) this.formData.groupId = scope.groupId;
                if (scope.centerId) this.formData.centerId = scope.centerId;

                if (scope.charges.length > 0) {

                    for (var i in scope.charges) {
                        
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM')});
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                dueDate: dateFilter(scope.charges[i].dueDate, scope.df)});
                        } else if (scope.charges[i].chargeTimeType.value == 'Monthly Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM'), feeInterval: scope.charges[i].feeInterval});
                        } else if (scope.charges[i].chargeTimeType.value == 'Weekly Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount, dueDate: dateFilter(scope.charges[i].dueDate, scope.df), feeInterval: scope.charges[i].feeInterval});                            
                        }
                        else {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount});
                        }
                    }
                }

                if (!_.isUndefined(scope.datatables) && scope.datatables.length > 0) {
                    angular.forEach(scope.datatables, function (datatable, index) {
                        scope.columnHeaders = datatable.columnHeaderData;
                        angular.forEach(scope.columnHeaders, function (colHeader, i) {
                            scope.dateFormat = scope.df + " " + scope.tf
                            if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName])) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName],
                                        scope.dateFormat);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            } else if (scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                                if (!_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date) && !_.isUndefined(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time)) {
                                    scope.formData.datatables[index].data[scope.columnHeaders[i].columnName] = dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].date, scope.df)
                                        + " " + dateFilter(scope.formDat.datatables[index].data[scope.columnHeaders[i].columnName].time, scope.tf);
                                    scope.formData.datatables[index].data.dateFormat = scope.dateFormat;
                                }
                            }
                        });
                    });
                } else {
                    delete scope.formData.datatables;
                }

                resourceFactory.savingsResource.save(this.formData, function (data) {
                    location.path('/viewsavingaccount/' + data.savingsId);
                });
            };

            scope.cancel = function () {
                if (scope.clientId) {
                    location.path('/viewclient/' + scope.clientId);
                } else if (scope.centerEntity) {
                    location.path('/viewcenter/' + scope.groupId);
                } else {
                    location.path('/viewgroup/' + scope.groupId);
                }
            }
        }
    });
    mifosX.ng.application.controller('CreateSavingAccountController', ['$scope','$rootScope','ResourceFactory', '$location', '$routeParams', 'dateFilter', 'WizardHandler',mifosX.controllers.CreateSavingAccountController]).run(function ($log) {
        $log.info("CreateSavingAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditGSIMAccountController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.accountId = routeParams.gsimChildAccountId;
            scope.parentAccountId=routeParams.parentGSIMId;
            scope.groupId=routeParams.groupId;
            scope.gsimAccountNumber=routeParams.gsimAccountNumber;
            scope.charges = [];
            scope.restrictDate = new Date();
            resourceFactory.savingsResource.get({accountId: scope.accountId, template: 'true', associations: 'charges',staffInSelectedOfficeOnly:'true'}, function (data) {
                scope.data = data;
                scope.charges = data.charges || [];
                if (scope.charges) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == "Monthly Fee") {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            scope.charges[i].dueDate = new Date(dateFilter(scope.charges[i].dueDate, scope.df));
                        }
                    }
                }

                if (data.clientId) {
                    scope.formData.clientId = data.clientId;
                    scope.clientName = data.clientName;
                }
                if (data.groupId) {
                    scope.formData.groupId = data.groupId;
                    scope.groupName = data.groupName;
                }
                scope.formData.productId = data.savingsProductId;
                scope.products = data.productOptions;
                if (data.fieldOfficerId != 0)scope.formData.fieldOfficerId = data.fieldOfficerId;
                if (data.timeline) {
                    var submittedOnDate = dateFilter(data.timeline.submittedOnDate, scope.df);
                    scope.formData.submittedOnDate = new Date(submittedOnDate);
                }
                scope.formData.externalId = data.externalId;
                scope.fieldOfficers = data.fieldOfficerOptions;
                scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                scope.formData.minRequiredOpeningBalance = data.minRequiredOpeningBalance;
                scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                /* FIX-ME: uncomment annualFeeAmount when datepicker avialable, because it depends on the date field 'annualFeeOnMonthDay'*/
                scope.formData.withdrawalFeeAmount = data.withdrawalFeeAmount;
                scope.formData.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;
                scope.formData.allowOverdraft = data.allowOverdraft;
                scope.formData.overdraftLimit = data.overdraftLimit;
                scope.formData.nominalAnnualInterestRateOverdraft = data.nominalAnnualInterestRateOverdraft;
                scope.formData.minOverdraftForInterestCalculation = data.minOverdraftForInterestCalculation;
                scope.formData.enforceMinRequiredBalance = data.enforceMinRequiredBalance;
                scope.formData.minRequiredBalance = data.minRequiredBalance;
                scope.formData.withHoldTax = data.withHoldTax;

                if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;

            });

            scope.changeProduct = function () {
                var inparams = {productId: scope.formData.productId};
                if (scope.formData.clientId) inparams.clientId = scope.formData.clientId;
                if (scope.formData.groupId) inparams.groupId = scope.formData.groupId;
                resourceFactory.savingsTemplateResource.get(inparams, function (data) {

                    scope.data = data;

                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                    scope.formData.minRequiredOpeningBalance = data.minRequiredOpeningBalance;
                    scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                    /* FIX-ME: uncomment annualFeeAmount when datepicker avialable, because it depends on the date field 'annualFeeOnMonthDay'*/
                    scope.formData.withdrawalFeeAmount = data.withdrawalFeeAmount;
                    scope.formData.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;
                    scope.formData.withHoldTax = data.withHoldTax;

                    if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                    if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                    if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                    if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                    if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                    if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;
                });
            }

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        if (data.chargeTimeType.value == "Annual Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        } else if (data.chargeTimeType.value == "Monthly Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        }

                        delete data.id;
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/viewgsimaccount/' + scope.groupId+'/'+scope.gsimAccountNumber);
            }

            scope.submit = function () {
                if (this.formData.submittedOnDate)  this.formData.submittedOnDate = dateFilter(this.formData.submittedOnDate, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.monthDayFormat = "dd MMM";
                scope.formData.charges = [];
                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM')});
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                dueDate: dateFilter(scope.charges[i].dueDate, scope.df)});
                        } else if (scope.charges[i].chargeTimeType.value == 'Monthly Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM'), feeInterval: scope.charges[i].feeInterval});
                        } else {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount});
                        }
                    }
                }

                resourceFactory.gsimResource.update({'parentAccountId':  scope.parentAccountId}, this.formData, function (data) {
                    location.path('/viewsavingaccount/' + data.savingsId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditGSIMAccountController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.EditGSIMAccountController]).run(function ($log) {
        $log.info("EditGSIMAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditSavingAccountController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.accountId = routeParams.id;
            scope.charges = [];
            scope.restrictDate = new Date();
            resourceFactory.savingsResource.get({accountId: scope.accountId, template: 'true', associations: 'charges',staffInSelectedOfficeOnly:'true'}, function (data) {
                scope.data = data;
                scope.charges = data.charges || [];
                if (scope.charges) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == "Monthly Fee") {
                            scope.charges[i].feeOnMonthDay.push(2013);
                            scope.charges[i].feeOnMonthDay = new Date(dateFilter(scope.charges[i].feeOnMonthDay, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            scope.charges[i].dueDate = new Date(dateFilter(scope.charges[i].dueDate, scope.df));
                        } else if (scope.charges[i].chargeTimeType.value == 'Weekly Fee') {
                            scope.charges[i].dueDate = new Date(dateFilter(scope.charges[i].dueDate, scope.df));
                        }
                    }
                }

                if (data.clientId) {
                    scope.formData.clientId = data.clientId;
                    scope.clientName = data.clientName;
                }
                if (data.groupId) {
                    scope.formData.groupId = data.groupId;
                    scope.groupName = data.groupName;
                }
                scope.formData.productId = data.savingsProductId;
                scope.products = data.productOptions;
                if (data.fieldOfficerId != 0)scope.formData.fieldOfficerId = data.fieldOfficerId;
                if (data.timeline) {
                    var submittedOnDate = dateFilter(data.timeline.submittedOnDate, scope.df);
                    scope.formData.submittedOnDate = new Date(submittedOnDate);
                }
                scope.formData.externalId = data.externalId;
                scope.fieldOfficers = data.fieldOfficerOptions;
                scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                scope.formData.minRequiredOpeningBalance = data.minRequiredOpeningBalance;
                scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                /* FIX-ME: uncomment annualFeeAmount when datepicker avialable, because it depends on the date field 'annualFeeOnMonthDay'*/
                //scope.formData.annualFeeAmount = data.annualFeeAmount;
                scope.formData.withdrawalFeeAmount = data.withdrawalFeeAmount;
                scope.formData.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;
                scope.formData.allowOverdraft = data.allowOverdraft;
                scope.formData.overdraftLimit = data.overdraftLimit;
                scope.formData.nominalAnnualInterestRateOverdraft = data.nominalAnnualInterestRateOverdraft;
                scope.formData.minOverdraftForInterestCalculation = data.minOverdraftForInterestCalculation;
                scope.formData.enforceMinRequiredBalance = data.enforceMinRequiredBalance;
                scope.formData.minRequiredBalance = data.minRequiredBalance;
                scope.formData.withHoldTax = data.withHoldTax;

                if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;

            });

            scope.changeProduct = function () {
                var inparams = {productId: scope.formData.productId};
                if (scope.formData.clientId) inparams.clientId = scope.formData.clientId;
                if (scope.formData.groupId) inparams.groupId = scope.formData.groupId;
                resourceFactory.savingsTemplateResource.get(inparams, function (data) {

                    scope.data = data;

                    scope.fieldOfficers = data.fieldOfficerOptions;
                    scope.formData.nominalAnnualInterestRate = data.nominalAnnualInterestRate;
                    scope.formData.minRequiredOpeningBalance = data.minRequiredOpeningBalance;
                    scope.formData.lockinPeriodFrequency = data.lockinPeriodFrequency;
                    /* FIX-ME: uncomment annualFeeAmount when datepicker avialable, because it depends on the date field 'annualFeeOnMonthDay'*/
                    //scope.formData.annualFeeAmount = data.annualFeeAmount;
                    scope.formData.withdrawalFeeAmount = data.withdrawalFeeAmount;
                    scope.formData.withdrawalFeeForTransfers = data.withdrawalFeeForTransfers;
                    scope.formData.withHoldTax = data.withHoldTax;

                    if (data.interestCompoundingPeriodType) scope.formData.interestCompoundingPeriodType = data.interestCompoundingPeriodType.id;
                    if (data.interestPostingPeriodType) scope.formData.interestPostingPeriodType = data.interestPostingPeriodType.id;
                    if (data.interestCalculationType) scope.formData.interestCalculationType = data.interestCalculationType.id;
                    if (data.interestCalculationDaysInYearType) scope.formData.interestCalculationDaysInYearType = data.interestCalculationDaysInYearType.id;
                    if (data.lockinPeriodFrequencyType) scope.formData.lockinPeriodFrequencyType = data.lockinPeriodFrequencyType.id;
                    if (data.withdrawalFeeType) scope.formData.withdrawalFeeType = data.withdrawalFeeType.id;

                });
            }

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        if (data.chargeTimeType.value == "Annual Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        } else if (data.chargeTimeType.value == "Monthly Fee") {
                            if (data.feeOnMonthDay) {
                                data.feeOnMonthDay.push(2013);
                                data.feeOnMonthDay = new Date(dateFilter(data.feeOnMonthDay, scope.df));
                            }
                        }

                        delete data.id;
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.cancel = function () {
                location.path('/viewsavingaccount/' + scope.accountId);
            }

            scope.submit = function () {
                if (this.formData.submittedOnDate)  this.formData.submittedOnDate = dateFilter(this.formData.submittedOnDate, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.monthDayFormat = "dd MMM";
                scope.formData.charges = [];
                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {
                        if (scope.charges[i].chargeTimeType.value == 'Annual Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM')});
                        } else if (scope.charges[i].chargeTimeType.value == 'Specified due date') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                dueDate: dateFilter(scope.charges[i].dueDate, scope.df)});
                        } else if (scope.charges[i].chargeTimeType.value == 'Weekly Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                dueDate: dateFilter(scope.charges[i].dueDate, scope.df), feeInterval: scope.charges[i].feeInterval});
                        } else if (scope.charges[i].chargeTimeType.value == 'Monthly Fee') {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount,
                                feeOnMonthDay: dateFilter(scope.charges[i].feeOnMonthDay, 'dd MMMM'), feeInterval: scope.charges[i].feeInterval});
                        } else {
                            this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount});
                        }
                    }
                }

                resourceFactory.savingsResource.update({'accountId': scope.accountId}, this.formData, function (data) {
                    location.path('/viewsavingaccount/' + data.savingsId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditSavingAccountController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.EditSavingAccountController]).run(function ($log) {
        $log.info("EditSavingAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        GSIMAccountActionsController: function (scope, resourceFactory, location, routeParams, dateFilter) {

            scope.groupId=routeParams.groupId;
            scope.gsimAccountNumber=routeParams.gsimAccountNumber;
            scope.action = routeParams.action || "";
            scope.accountId = routeParams.childId;
            scope.parentAccountId = routeParams.parentId;
            scope.formData = {};
            scope.restrictDate = new Date();
            // Transaction UI Related
            scope.isTransaction = false;
            scope.transactionAmountField = false;
            scope.showPaymentDetails = false;
            scope.paymentTypes = [];

            switch (scope.action) {
                case "approve":
                    scope.title = 'label.heading.approvesavingaccount';
                    scope.labelName = 'label.input.savingaccountapprovedOnDate';
                    scope.modelName = 'approvedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'APPROVE_SAVINGSACCOUNT';
                    break;
                case "reject":
                    scope.title = 'label.heading.rejectsavingaccount';
                    scope.labelName = 'label.input.rejectedon';
                    scope.modelName = 'rejectedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'REJECT_SAVINGSACCOUNT';
                    break;
                case "withdrawnByApplicant":
                    scope.title = 'label.heading.withdrawsavingaccount';
                    scope.labelName = 'label.input.withdrawnon';
                    scope.modelName = 'withdrawnOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'WITHDRAW_SAVINGSACCOUNT';
                    break;
                case "undoapproval":
                    scope.title = 'label.heading.undoapprovesavingaccount';
                    scope.showDateField = false;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'APPROVALUNDO_SAVINGSACCOUNT';
                    break;
                case "activate":
                    scope.title = 'label.heading.activatesavingaccount';
                    scope.labelName = 'label.input.activatedon';
                    scope.modelName = 'activatedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.taskPermissionName = 'ACTIVATE_SAVINGSACCOUNT';
                    break;
                case "deposit":
                    resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                    });
                    scope.title = 'label.heading.depositmoneytosavingaccount';
                    scope.labelName = 'label.input.transactiondate';
                    scope.modelName = 'transactionDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.isTransaction = true;
                    scope.transactionAmountField = true;
                    scope.showPaymentDetails = false;
                    scope.taskPermissionName = 'DEPOSIT_SAVINGSACCOUNT';
                    break;
                case "gsimDeposit":
                    scope.depositArray=[];
                    scope.showDepositTable=true;
                    scope.parentGSIM=[];
                    resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                    });
                    resourceFactory.groupGSIMAccountResource.get({groupId: 2,parentGSIMId:scope.parentAccountId}, function (data) {
                        scope.gsimAccounts = data[0].childGSIMAccounts;
                        scope.parentGSIM=data[0];

                        if(scope.depositArray.length!=0)
                        {
                            scope.depositArray=[];

                        }
                        for(i=0;i<scope.gsimAccounts.length;i++)
                        {
                            var temp={};
                            temp.childAccountId=scope.gsimAccounts[i].id;
                            temp.accountNo=scope.gsimAccounts[i].accountNo;
                            temp.accountBalance=scope.gsimAccounts[i].accountBalance;
                            scope.depositArray.push(temp);

                        }
                    });
                    scope.title = 'label.heading.depositmoneytosavingaccount';
                    scope.labelName = 'label.input.transactiondate';
                    scope.modelName = 'transactionDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.isTransaction = true;
                    scope.showvoucherNumberField = false;
                    scope.showpaymentDescriptionField = false;
                    scope.transactionAmountField = true;
                    scope.showPaymentDetails = false;
                    scope.taskPermissionName = 'DEPOSIT_SAVINGSACCOUNT';
                    break;
                case "postInterestAsOn":
                    resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                        scope.accountnumber=data.accountNo;
                    });
                    scope.labelName = 'label.input.transactiondate';
                    scope.modelName = 'transactionDate';
                    scope.showDateField = true;
                    scope.showAccountNumber=true;
                    break;
                case "withdrawal":
                    resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                    });
                    scope.title = 'label.heading.withdrawmoneyfromsavingaccount';
                    scope.labelName = 'label.input.transactiondate';
                    scope.modelName = 'transactionDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.isTransaction = true;
                    scope.transactionAmountField = true;
                    scope.showPaymentDetails = false;
                    scope.taskPermissionName = 'WITHDRAWAL_SAVINGSACCOUNT';
                    break;
                case "applyAnnualFees":
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId},
                        function (data) {
                            scope.formData.amount = data.amount;
                            if (data.dueDate) {
                                var dueDate = dateFilter(data.dueDate, scope.df);
                                scope.formData.dueDate = new Date(dueDate);
                            }
                        });
                    scope.title = 'label.heading.savingaccountapplyannualFee';
                    scope.labelName = 'label.input.annualfeetransactiondate';
                    scope.modelName = 'dueDate';
                    scope.showDateField = true;
                    scope.showAnnualAmountField = true;
                    scope.showAmountField = false;
                    scope.showNoteField = false;
                    scope.taskPermissionName = 'APPLYANNUALFEE_SAVINGSACCOUNT';
                    break;
                case "close":
                    resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                    });
                    resourceFactory.savingsResource.get({accountId: routeParams.id, fields:'summary'}, function (accountData) {
                        scope.accountBalance = accountData.summary.accountBalance;
                    });
                    scope.title = 'label.heading.closesavingaccount';
                    scope.labelName = 'label.input.closedon';
                    scope.modelName = 'closedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.withdrawBalance = true;
                    scope.postInterestValidationOnClosure = true;
                    scope.formData.postInterestValidationOnClosure = true;
                    scope.taskPermissionName = 'CLOSE_SAVINGSACCOUNT';
                    break;
                case "modifytransaction":
                    resourceFactory.savingsTrxnsResource.get({savingsId: scope.accountId, transactionId: routeParams.transactionId, template: 'true'},
                        function (data) {
                            scope.title = 'label.heading.editsavingaccounttransaction';
                            scope.labelName = 'label.input.transactiondate';
                            scope.modelName = 'transactionDate';
                            scope.formData[scope.modelName] = new Date(data.date) || new Date();
                            scope.paymentTypes = data.paymentTypeOptions;
                            scope.formData.transactionAmount = data.amount;
                            if (data.paymentDetailData) {
                                if (data.paymentDetailData.paymentType) {
                                    scope.formData.paymentTypeId = data.paymentDetailData.paymentType.id;
                                }
                                scope.formData.accountNumber = data.paymentDetailData.accountNumber;
                                scope.formData.checkNumber = data.paymentDetailData.checkNumber;
                                scope.formData.routingCode = data.paymentDetailData.routingCode;
                                scope.formData.receiptNumber = data.paymentDetailData.receiptNumber;
                                scope.formData.bankNumber = data.paymentDetailData.bankNumber;
                            }
                        });
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.isTransaction = true;
                    scope.transactionAmountField = true;
                    scope.showPaymentDetails = false;
                    scope.taskPermissionName = 'ADJUSTTRANSACTION_SAVINGSACCOUNT';
                    break;
                case "editsavingcharge":
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId},
                        function (data) {
                            scope.formData.amount = data.amount;
                            if (data.feeOnMonthDay) {
                                scope.dateArray = [];
                                scope.dateArray.push(2013)
                                for (var i in data.feeOnMonthDay) {
                                    scope.dateArray.push(data.feeOnMonthDay[i]);
                                }
                                var feeOnMonthDay = dateFilter(scope.dateArray, scope.df);
                                scope.formData.feeOnMonthDayFullDate = new Date(feeOnMonthDay);
                                scope.labelName = 'label.heading.savingaccounttransactionDate';
                                scope.modelName = 'feeOnMonthDayFullDate';
                                scope.showDateField = true;
                                scope.showAnnualAmountField = true;
                                scope.showAmountField = false;
                            } else {
                                scope.labelName = 'label.input.amount';
                                scope.modelName = 'amount';
                                scope.showDateField = false;
                                scope.showAnnualAmountField = false;
                                scope.showAmountField = true;
                            }
                        });
                    scope.taskPermissionName = 'UPDATE_SAVINGSACCOUNTCHARGE';
                    break;
                case "deletesavingcharge":
                    scope.showDelete = true;
                    scope.taskPermissionName = 'DELETE_SAVINGSACCOUNTCHARGE';
                    break;
                case "paycharge":
                    scope.formData.dueDate = new Date();
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId,
                        command: 'paycharge'}, function (data) {
                        scope.formData.amount = data.amountOutstanding;
                    });
                    scope.labelName = 'label.input.amount';
                    scope.showAmountField = true;
                    scope.paymentDatefield = true;
                    scope.modelName = 'dueDate';
                    scope.taskPermissionName = 'PAY_SAVINGSACCOUNTCHARGE';
                    break;
                case "inactivate":
                    scope.inactivateCharge = true;
                    scope.taskPermissionName = 'INACTIVATE_SAVINGSACCOUNTCHARGE';
                    break;
                case "waive":
                    scope.waiveCharge = true;
                    scope.taskPermissionName = 'WAIVE_SAVINGSACCOUNTCHARGE';
                    break;
            }

            scope.cancel = function () {
                location.path('/viewgsimaccount/' + scope.groupId+'/'+scope.gsimAccountNumber);
            };

            scope.submit = function () {

                scope.savingsArray=[];
                scope.childAccounts=[];

                var params = {command: scope.action};
                if (scope.action != "undoapproval" && scope.action!="gsimDeposit") {
                    this.formData.locale = scope.optlang.code;
                    this.formData.dateFormat = scope.df;
                }

                if(scope.action=="gsimDeposit")
                {
                    for(var j=0;j<scope.gsimAccounts.length;j++)
                    {
                        if(scope.depositArray[j].transactionAmount)
                        {
                            var temp={};
                            temp.locale = scope.optlang.code;
                            temp.dateFormat = scope.df;
                            temp.transactionDate=dateFilter(this.formData.transactionDate, scope.df);
                            temp.transactionAmount=scope.depositArray[j].transactionAmount;
                            temp.childAccountId=scope.depositArray[j].childAccountId;
                            temp.voucherNumber=scope.depositArray[j].voucherNumber;
                            temp.paymentDescription=scope.depositArray[j].paymentDescription;
                            temp.paymentTypeId=scope.depositArray[j].paymentTypeId;
                            // scope.childAccounts.push(scope.gsimAccounts[j].id);
                            if(temp.transactionAmount!=0 )
                            {
                                scope.savingsArray.push(temp);
                            }
                        }
                    }

                    params.savingsId=scope.parentAccountId;
                    this.formData.savingsArray=scope.savingsArray;
                    this.formData.childAccounts=scope.childAccounts;

                    resourceFactory.savingsTrxnsResource.save(params, this.formData, function (data) {
                        location.path('/viewgsimaccount/' + scope.parentGSIM.groupId+'/'+scope.parentGSIM.accountNumber);

                    });
                }
                else
                if (scope.action == "deposit" || scope.action == "withdrawal" || scope.action == "modifytransaction" || scope.action=="postInterestAsOn") {
                    if (scope.action == "withdrawal") {
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                    } else if (scope.action == "deposit") {
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                    }
                    if (scope.action == "modifytransaction") {
                        params.command = 'modify';
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                        params.transactionId = routeParams.transactionId;
                    }
                    if(scope.action=="postInterestAsOn"){
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                        this.formData.isPostInterestAsOn=true;
                    }
                    params.savingsId = scope.accountId;

                    resourceFactory.savingsTrxnsResource.save(params, this.formData, function (data) {
                        location.path('/viewsavingaccount/' + data.savingsId);
                    });
                } else if (scope.action == "editsavingcharge") {
                    if (this.formData.feeOnMonthDayFullDate) {
                        this.formData.feeOnMonthDay = dateFilter(this.formData.feeOnMonthDayFullDate, scope.df);
                        this.formData.monthDayFormat = "dd MMM";
                        this.formData.feeOnMonthDay = this.formData.feeOnMonthDay.substring(0, this.formData.feeOnMonthDay.length - 5);
                        delete this.formData.feeOnMonthDayFullDate;
                    }
                    resourceFactory.savingsResource.update({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewsavingaccount/' + data.savingsId);
                        });
                } else if (scope.action == "deletesavingcharge") {
                    resourceFactory.savingsResource.delete({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewsavingaccount/' + data.savingsId);
                        });
                } else if (scope.action == "paycharge" || scope.action == "waive" || scope.action == "inactivate") {
                    params = {accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, command: scope.action};
                    if (this.formData.dueDate) {
                        this.formData.dueDate = dateFilter(this.formData.dueDate, scope.df);
                    } else if(this.formData.inactivationOnDate){
                        this.formData.inactivationOnDate = dateFilter(this.formData.inactivationOnDate, scope.df);
                    }
                    resourceFactory.savingsResource.save(params, this.formData, function (data) {
                        location.path('/viewgsimaccount/' + scope.parentGSIM.groupId+'/'+scope.parentGSIM.accountNumber);
                    });
                } else {
                    params.parentAccountId = scope.parentAccountId;

                    if (scope.action == "approve") {
                        params.command='approve';
                        if (this.formData.approvedOnDate) {
                            this.formData.approvedOnDate = dateFilter(this.formData.approvedOnDate, scope.df);
                        }
                    } else if (scope.action == "withdrawnByApplicant") {
                        if (this.formData.withdrawnOnDate) {
                            this.formData.withdrawnOnDate = dateFilter(this.formData.withdrawnOnDate, scope.df);
                        }
                    } else if (scope.action == "reject") {
                        params.command='reject';
                        if (this.formData.rejectedOnDate) {
                            this.formData.rejectedOnDate = dateFilter(this.formData.rejectedOnDate, scope.df);
                        }
                    } else if (scope.action == "activate") {
                        if (this.formData.activatedOnDate) {
                            this.formData.activatedOnDate = dateFilter(this.formData.activatedOnDate, scope.df);
                        }
                    } else if (scope.action == "applyAnnualFees" || scope.action == "paycharge" || scope.action == "waivecharge") {
                        params = {accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, command: 'paycharge'};
                        if (this.formData.dueDate) {
                            this.formData.dueDate = dateFilter(this.formData.dueDate, scope.df);
                        }
                    } else if (scope.action == "close") {

                        if (this.formData.closedOnDate) {
                            this.formData.closedOnDate = dateFilter(this.formData.closedOnDate, scope.df);
                        }
                    }

                    resourceFactory.gsimCommandsResource.save(params, this.formData, function (data) {
                        location.path('/viewgsimaccount/' + scope.groupId+'/'+scope.gsimAccountNumber);
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('GSIMAccountActionsController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.GSIMAccountActionsController]).run(function ($log) {
        $log.info("GSIMAccountActionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ListOnHoldTransactionController: function (scope, resourceFactory, paginatorService, routeParams, dateFilter) {

            scope.fromPath = routeParams.fromPath;
            scope.fromPathId = routeParams.fromPathId;
            scope.transactions = [];

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.dateFormat = scope.df;
                params.guarantorFundingId = routeParams.fundingId;
                params.savingsId = routeParams.savingsId;

                resourceFactory.savingsOnHoldTrxnsResource.get(params, callback);
            };

            scope.transactions = paginatorService.paginate(fetchFunction, 14);
        }
    });
    mifosX.ng.application.controller('ListOnHoldTransactionController', ['$scope', 'ResourceFactory', 'PaginatorService', '$routeParams', 'dateFilter', mifosX.controllers.ListOnHoldTransactionController]).run(function ($log) {
        $log.info("ListOnHoldTransactionController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        SavingAccountActionsController: function (scope, rootScope, resourceFactory, location, routeParams, dateFilter) {

            scope.action = routeParams.action || "";
            scope.accountId = routeParams.id;
            scope.savingAccountId = routeParams.id;
            scope.formData = {};
            scope.entityformData = {};
            scope.entityformData.datatables = {};
            scope.restrictDate = new Date();
            // Transaction UI Related
            scope.isTransaction = false;
            scope.transactionAmountField = false;
            scope.showPaymentDetails = false;
            scope.paymentTypes = [];
            scope.submittedDatatables = [];
            scope.tf = "HH:mm";
            var submitStatus = [];

            rootScope.RequestEntities = function(entity,status,productId){
                resourceFactory.entityDatatableChecksResource.getAll({limit:-1},function (response) {
                    scope.entityDatatableChecks = _.filter(response.pageItems , function(datatable){
                        var specificProduct = (datatable.entity == entity && datatable.status.value == status && datatable.productId == productId);
                        var AllProducts = (datatable.entity == entity && datatable.status.value == status);
                        return (datatable.productId?specificProduct:AllProducts);
                    });
                    scope.entityDatatableChecks = _.pluck(scope.entityDatatableChecks,'datatableName');
                    scope.datatables = [];
                    var k=0;
                    _.each(scope.entityDatatableChecks,function(entitytable) {
                        resourceFactory.DataTablesResource.getTableDetails({datatablename:entitytable,entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                            data.registeredTableName = entitytable;
                            var colName = data.columnHeaders[0].columnName;
                            if (colName == 'id') {
                                data.columnHeaders.splice(0, 1);
                            }

                            colName = data.columnHeaders[0].columnName;
                            if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                                data.columnHeaders.splice(0, 1);
                                scope.isCenter = (colName == 'center_id') ? true : false;
                            }


                            data.noData = (data.data.length == 0);
                            if(data.noData){
                                scope.datatables.push(data);
                                scope.entityformData.datatables[k] = {data:{}};
                                submitStatus[k] = "save";
                                _.each(data.columnHeaders,function(Header){
                                    if(Header.columnDisplayType == 'DATETIME'){
                                        scope.entityformData.datatables[k].data[Header.columnName] = {};
                                    }
                                    else {
                                        scope.entityformData.datatables[k].data[Header.columnName] = "";
                                    }
                                });
                                k++;
                                scope.isEntityDatatables = true;
                            }
                        });


                    });

                });
            };

            scope.fetchEntities = function(entity,status,productId){
                if(!productId){
                    resourceFactory.savingsResource.get({accountId: routeParams.id, associations: 'all'},
                        function (data) {
                            scope.productId = data.savingsProductId;
                            rootScope.RequestEntities(entity,status,scope.productId);
                        });
                }
                else{
                    rootScope.RequestEntities(entity,status,productId);
                }
            };

            function asyncLoop(iterations, func, callback) {
                var index = 0;
                var done = false;
                var loop = {
                    next: function() {
                        if (done) {
                            return;
                        }

                        if (index < iterations) {
                            index++;
                            func(loop);

                        } else {
                            done = true;
                            callback();
                        }
                    },

                    iteration: function() {
                        return index - 1;
                    },

                    break: function() {
                        done = true;
                    }
                };
                loop.next();
                return loop;
            }

            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };


            switch (scope.action) {
                case "approve":
                    scope.title = 'label.heading.approvesavingaccount';
                    scope.labelName = 'label.input.savingaccountapprovedOnDate';
                    scope.modelName = 'approvedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'APPROVE_SAVINGSACCOUNT';
                    scope.fetchEntities('m_savings_account','APPROVE');
                    break;
                case "reject":
                    scope.title = 'label.heading.rejectsavingaccount';
                    scope.labelName = 'label.input.rejectedon';
                    scope.modelName = 'rejectedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'REJECT_SAVINGSACCOUNT';
                    scope.fetchEntities('m_savings_account','REJECT');
                    break;
                case "withdrawnByApplicant":
                    scope.title = 'label.heading.withdrawsavingaccount';
                    scope.labelName = 'label.input.withdrawnon';
                    scope.modelName = 'withdrawnOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'WITHDRAW_SAVINGSACCOUNT';
                    break;
                case "undoapproval":
                    scope.title = 'label.heading.undoapprovesavingaccount';
                    scope.showDateField = false;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'APPROVALUNDO_SAVINGSACCOUNT';
                    break;
                case "activate":
                    scope.title = 'label.heading.activatesavingaccount';
                    scope.labelName = 'label.input.activatedon';
                    scope.modelName = 'activatedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.taskPermissionName = 'ACTIVATE_SAVINGSACCOUNT';
                    scope.fetchEntities('m_savings_account','ACTIVATE');
                    break;
                case "deposit":
                    resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                    });
                    scope.title = 'label.heading.depositmoneytosavingaccount';
                    scope.labelName = 'label.input.transactiondate';
                    scope.modelName = 'transactionDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.isTransaction = true;
                    scope.transactionAmountField = true;
                    scope.showPaymentDetails = false;
                    scope.taskPermissionName = 'DEPOSIT_SAVINGSACCOUNT';
                    break;
                case "postInterestAsOn":
                    resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                       scope.accountnumber=data.accountNo;
                    });
                    scope.labelName = 'label.input.transactiondate';
                    scope.modelName = 'transactionDate';
                    scope.showDateField = true;
                    scope.showAccountNumber=true;
                    scope.taskPermissionName = 'POSTINTEREST_SAVINGSACCOUNT';
                    break;
                case "withdrawal":
                    resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                    });
                    scope.title = 'label.heading.withdrawmoneyfromsavingaccount';
                    scope.labelName = 'label.input.transactiondate';
                    scope.modelName = 'transactionDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.isTransaction = true;
                    scope.transactionAmountField = true;
                    scope.showPaymentDetails = false;
                    scope.taskPermissionName = 'WITHDRAWAL_SAVINGSACCOUNT';
                    scope.fetchEntities('m_savings_account','WITHDRAWN');
                    break;
                case "applyAnnualFees":
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId},
                        function (data) {
                            scope.formData.amount = data.amount;
                            if (data.dueDate) {
                                var dueDate = dateFilter(data.dueDate, scope.df);
                                scope.formData.dueDate = new Date(dueDate);
                            }
                        });
                    scope.title = 'label.heading.savingaccountapplyannualFee';
                    scope.labelName = 'label.input.annualfeetransactiondate';
                    scope.modelName = 'dueDate';
                    scope.showDateField = true;
                    scope.showAnnualAmountField = true;
                    scope.showAmountField = false;
                    scope.showNoteField = false;
                    scope.taskPermissionName = 'APPLYANNUALFEE_SAVINGSACCOUNT';
                    break;
                case "close":
                    resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                    });
                    resourceFactory.savingsResource.get({accountId: routeParams.id, fields:'summary'}, function (accountData) {
                        scope.accountBalance = accountData.summary.accountBalance;
                    });
                    scope.title = 'label.heading.closesavingaccount';
                    scope.labelName = 'label.input.closedon';
                    scope.modelName = 'closedOnDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.withdrawBalance = true;
                    scope.postInterestValidationOnClosure = true;
                    scope.formData.postInterestValidationOnClosure = true;
                    scope.taskPermissionName = 'CLOSE_SAVINGSACCOUNT';
                    scope.fetchEntities('m_savings_account','CLOSE');
                    break;
                case "modifytransaction":
                    resourceFactory.savingsTrxnsResource.get({savingsId: scope.accountId, transactionId: routeParams.transactionId, template: 'true'},
                        function (data) {
                            scope.title = 'label.heading.editsavingaccounttransaction';
                            scope.labelName = 'label.input.transactiondate';
                            scope.modelName = 'transactionDate';
                            scope.formData[scope.modelName] = new Date(data.date) || new Date();
                            scope.paymentTypes = data.paymentTypeOptions;
                            scope.formData.transactionAmount = data.amount;
                            if (data.paymentDetailData) {
                                if (data.paymentDetailData.paymentType) {
                                    scope.formData.paymentTypeId = data.paymentDetailData.paymentType.id;
                                }
                                scope.formData.accountNumber = data.paymentDetailData.accountNumber;
                                scope.formData.checkNumber = data.paymentDetailData.checkNumber;
                                scope.formData.routingCode = data.paymentDetailData.routingCode;
                                scope.formData.receiptNumber = data.paymentDetailData.receiptNumber;
                                scope.formData.bankNumber = data.paymentDetailData.bankNumber;
                            }
                        });
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.isTransaction = true;
                    scope.transactionAmountField = true;
                    scope.showPaymentDetails = false;
                    scope.taskPermissionName = 'ADJUSTTRANSACTION_SAVINGSACCOUNT';
                    break;
                case "editsavingcharge":
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId},
                        function (data) {
                            scope.formData.amount = data.amount;
                            if (data.feeOnMonthDay) {
                                scope.dateArray = [];
                                scope.dateArray.push(2013)
                                for (var i in data.feeOnMonthDay) {
                                    scope.dateArray.push(data.feeOnMonthDay[i]);
                                }
                                var feeOnMonthDay = dateFilter(scope.dateArray, scope.df);
                                scope.formData.feeOnMonthDayFullDate = new Date(feeOnMonthDay);
                                scope.labelName = 'label.heading.savingaccounttransactionDate';
                                scope.modelName = 'feeOnMonthDayFullDate';
                                scope.showDateField = true;
                                scope.showAnnualAmountField = true;
                                scope.showAmountField = false;
                            } else {
                                scope.labelName = 'label.input.amount';
                                scope.modelName = 'amount';
                                scope.showDateField = false;
                                scope.showAnnualAmountField = false;
                                scope.showAmountField = true;
                            }
                        });
                    scope.taskPermissionName = 'UPDATE_SAVINGSACCOUNTCHARGE';
                    break;
                case "deletesavingcharge":
                    scope.showDelete = true;
                    scope.taskPermissionName = 'DELETE_SAVINGSACCOUNTCHARGE';
                    break;
                case "paycharge":
                    scope.formData.dueDate = new Date();
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId,
                        command: 'paycharge'}, function (data) {
                        scope.formData.amount = data.amountOutstanding;
                    });
                    scope.labelName = 'label.input.amount';
                    scope.showAmountField = true;
                    scope.paymentDatefield = true;
                    scope.modelName = 'dueDate';
                    scope.taskPermissionName = 'PAY_SAVINGSACCOUNTCHARGE';
                    break;
                case "inactivate":
                    scope.inactivateCharge = true;
                    scope.taskPermissionName = 'INACTIVATE_SAVINGSACCOUNTCHARGE';
                    break;
                case "waive":
                    scope.waiveCharge = true;
                    scope.taskPermissionName = 'WAIVE_SAVINGSACCOUNTCHARGE';
                    break;
            }

            scope.cancel = function () {
                location.path('/viewsavingaccount/' + routeParams.id);
            };

            scope.submit = function () {
                var params = {command: scope.action};
                if (scope.action != "undoapproval") {
                    this.formData.locale = scope.optlang.code;
                    this.formData.dateFormat = scope.df;
                }
                if (scope.action == "deposit" || scope.action == "withdrawal" || scope.action == "modifytransaction" || scope.action=="postInterestAsOn") {
                    if (scope.action == "withdrawal") {
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                    } else if (scope.action == "deposit") {
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                    }
                    if (scope.action == "modifytransaction") {
                        params.command = 'modify';
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                        params.transactionId = routeParams.transactionId;
                    }
                    if(scope.action=="postInterestAsOn"){
                        if (this.formData.transactionDate) {
                            this.formData.transactionDate = dateFilter(this.formData.transactionDate, scope.df);
                        }
                        this.formData.isPostInterestAsOn=true;
                    }
                    params.savingsId = scope.accountId;

                    resourceFactory.savingsTrxnsResource.save(params, this.formData, function (data) {
                        location.path('/viewsavingaccount/' + data.savingsId);
                    });
                } else if (scope.action == "editsavingcharge") {
                    if (this.formData.feeOnMonthDayFullDate) {
                        this.formData.feeOnMonthDay = dateFilter(this.formData.feeOnMonthDayFullDate, scope.df);
                        this.formData.monthDayFormat = "dd MMM";
                        this.formData.feeOnMonthDay = this.formData.feeOnMonthDay.substring(0, this.formData.feeOnMonthDay.length - 5);
                        delete this.formData.feeOnMonthDayFullDate;
                    }
                    resourceFactory.savingsResource.update({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewsavingaccount/' + data.savingsId);
                        });
                } else if (scope.action == "deletesavingcharge") {
                    resourceFactory.savingsResource.delete({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewsavingaccount/' + data.savingsId);
                        });
                } else if (scope.action == "paycharge" || scope.action == "waive" || scope.action == "inactivate") {
                    params = {accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, command: scope.action};
                    if (this.formData.dueDate) {
                        this.formData.dueDate = dateFilter(this.formData.dueDate, scope.df);
                    } else if(this.formData.inactivationOnDate){
                        this.formData.inactivationOnDate = dateFilter(this.formData.inactivationOnDate, scope.df);
                    }
                    resourceFactory.savingsResource.save(params, this.formData, function (data) {
                        location.path('/viewsavingaccount/' + data.savingsId);
                    });
                } else {
                    params.accountId = scope.accountId;
                    if (scope.action == "approve") {
                        if (this.formData.approvedOnDate) {
                            this.formData.approvedOnDate = dateFilter(this.formData.approvedOnDate, scope.df);
                        }
                    } else if (scope.action == "withdrawnByApplicant") {
                        if (this.formData.withdrawnOnDate) {
                            this.formData.withdrawnOnDate = dateFilter(this.formData.withdrawnOnDate, scope.df);
                        }
                    } else if (scope.action == "reject") {
                        if (this.formData.rejectedOnDate) {
                            this.formData.rejectedOnDate = dateFilter(this.formData.rejectedOnDate, scope.df);
                        }
                    } else if (scope.action == "activate") {
                        if (this.formData.activatedOnDate) {
                            this.formData.activatedOnDate = dateFilter(this.formData.activatedOnDate, scope.df);
                        }
                    } else if (scope.action == "applyAnnualFees" || scope.action == "paycharge" || scope.action == "waivecharge") {
                        params = {accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, command: 'paycharge'};
                        if (this.formData.dueDate) {
                            this.formData.dueDate = dateFilter(this.formData.dueDate, scope.df);
                        }
                    } else if (scope.action == "close") {
                        if (this.formData.closedOnDate) {
                            this.formData.closedOnDate = dateFilter(this.formData.closedOnDate, scope.df);

                        }
                    }

                    resourceFactory.savingsResource.save(params, this.formData, function (data) {
                        location.path('/viewsavingaccount/' + data.savingsId);
                    });
                }
            };

            scope.submitDatatable = function(){
                if(scope.datatables) {
                    asyncLoop(Object.keys(scope.entityformData.datatables).length,function(loop){
                        var cnt = loop.iteration();
                        var formData = scope.entityformData.datatables[cnt];
                        formData.registeredTableName = scope.datatables[cnt].registeredTableName;

                        var params = {
                            datatablename: formData.registeredTableName,
                            entityId: routeParams.id,
                            genericResultSet: 'true'
                        };

                        angular.extend(formData.data,{dateFormat: scope.df, locale: scope.optlang.code});

                        _.each(formData.data, function (columnHeader) {
                            if (columnHeader.dateType) {
                                columnHeader = dateFilter(columnHeader.dateType.date, params.dateFormat);
                            }
                            else if (columnHeader.dateTimeType) {
                                columnHeader = dateFilter(columnHeader.dateTimeType.date, scope.df)
                                    + " " + dateFilter(columnHeader.dateTimeType.time, scope.tf);
                            }
                        });
                        console.log(scope.entityformData);
                        var action = submitStatus[cnt];
                        resourceFactory.DataTablesResource[action](params, formData.data, function (data) {

                            submitStatus[cnt] = "update";
                            scope.submittedDatatables.push(scope.datatables[cnt].registeredTableName);
                            loop.next();
                        },function(){
                            rootScope.errorDetails[0].push({datatable:scope.datatables[cnt].registeredTableName});
                            loop.break();
                        });

                    },function(){
                        scope.submit();
                    });
                }
                else{
                    scope.submit();
                }
            };
        }
    });
    mifosX.ng.application.controller('SavingAccountActionsController', ['$scope','$rootScope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.SavingAccountActionsController]).run(function ($log) {
        $log.info("SavingAccountActionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        UnAssignSavingsOfficerController: function (scope, resourceFactory, routeParams, location, dateFilter) {

            scope.loanOfficers = [];
            scope.formData = {};
            scope.staffData = {};
            scope.accountNo = routeParams.id;

            /*resourceFactory.savingsResource.get({accountId: routeParams.id, template: 'true'}, function (data) {
                scope.data = data;
            });*/

            scope.cancel = function () {
                location.path('/viewsavingaccount/' + scope.accountNo);
            };

            scope.submit = function () {
                scope.staffData.staffId = scope.formData.fieldOfficerId;
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.unassignedDate = dateFilter(this.formData.unassignedDate, scope.df);
                resourceFactory.savingsResource.save({accountId: routeParams.id, command:'unassignSavingsOfficer'}, this.formData, function (data) {
                    location.path('/viewsavingaccount/' + scope.accountNo);
                });

            };

        }
    });
    mifosX.ng.application.controller('UnAssignSavingsOfficerController', ['$scope', 'ResourceFactory', '$routeParams', '$location', 'dateFilter', mifosX.controllers.UnAssignSavingsOfficerController]).run(function ($log) {
        $log.info("UnAssignSavingsOfficerController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewGSIMaccountController: function (scope, routeParams, route, location, resourceFactory, dateFilter, $uibModal) {

            scope.groupId=routeParams.groupId;
            scope.gsimAccountNumber=routeParams.gsimAccountNumber;
            scope.savingaccountdetails = [];
            var gsimChildAccountId=0;
            scope.staffData = {};
            scope.formData = {};
            scope.date = {};
            var parentGSIMId=0;


            scope.convertDateArrayToObject = function(dateFieldName){
                for(var i in scope.savingaccountdetails.transactions){
                    scope.savingaccountdetails.transactions[i][dateFieldName] = new Date(scope.savingaccountdetails.transactions[i].date);
                }
            };

            resourceFactory.groupGSIMAccountResource.get({groupId: scope.groupId,parentGSIMAccountNo:scope.gsimAccountNumber}, function (data) {
                scope.groupAccounts = data[0];
                gsimChildAccountId=data[0].childGSIMAccounts[0].id;
                parentGSIMId=scope.groupAccounts.gsimId;

                resourceFactory.savingsResource.get({accountId: gsimChildAccountId, associations: 'all'}, function (data) {
                    scope.savingaccountdetails = data;
                    scope.convertDateArrayToObject('date');
                    if(scope.savingaccountdetails.groupId) {
                        resourceFactory.groupResource.get({groupId: scope.savingaccountdetails.groupId}, function (data) {
                            scope.groupLevel = data.groupLevel;
                        });
                    }
                    scope.showonhold = true;
                    if(angular.isUndefined(data.onHoldFunds)){
                        scope.showonhold = false;
                    }
                    scope.staffData.staffId = data.staffId;
                    scope.date.toDate = new Date();
                    scope.date.fromDate = new Date(data.timeline.activatedOnDate);

                    scope.status = data.status.value;
                    if (scope.status == "Submitted and pending approval" || scope.status == "Active" || scope.status == "Approved") {
                        scope.choice = true;
                    }
                    scope.chargeAction = data.status.value == "Submitted and pending approval" ? true : false;
                    scope.chargePayAction = data.status.value == "Active" ? true : false;
                    if (scope.savingaccountdetails.charges) {
                        scope.charges = scope.savingaccountdetails.charges;
                        scope.chargeTableShow = true;
                    } else {
                        scope.chargeTableShow = false;
                    }
                    if (data.status.value == "Submitted and pending approval") {
                        scope.buttons = { singlebuttons: [
                            {
                                name: "button.modifyapplication",
                                icon: "fa fa-pencil ",
                                taskPermissionName:"UPDATE_SAVINGSACCOUNT"
                            },
                            {
                                name: "button.approve",
                                icon: "fa fa-check",
                                taskPermissionName:"APPROVE_SAVINGSACCOUNT"
                            },
                            {
                                name: "button.reject",
                                icon: "fa fa-remove-circle",
                                taskPermissionName:"REJECT_SAVINGSACCOUNT"
                            }
                        ]
                        };
                    }

                    if (data.status.value == "Approved") {
                        scope.buttons = { singlebuttons: [
                            {
                                name: "button.undoapproval",
                                icon: "fa faf-undo",
                                taskPermissionName:"APPROVALUNDO_SAVINGSACCOUNT"
                            },
                            {
                                name: "button.activate",
                                icon: "fa fa-check",
                                taskPermissionName:"ACTIVATE_SAVINGSACCOUNT"
                            }
                        ]
                        };
                    }

                    if (data.status.value == "Active") {
                        scope.buttons = { singlebuttons: [

                            {
                                name: "button.deposit",
                                icon: "fa fa-arrow-right",
                                taskPermissionName:"DEPOSIT_SAVINGSACCOUNT"
                            },
                            {
                                name: "button.close",
                                icon :"fa fa-ban-circle",
                                taskPermissionName:"CLOSE_SAVINGSACCOUNT"
                            }
                        ]
                        };
                    }
                    if (data.annualFee) {
                        var annualdueDate = [];
                        annualdueDate = data.annualFee.feeOnMonthDay;
                        annualdueDate.push(new Date().getFullYear());
                        scope.annualdueDate = new Date(annualdueDate);
                    };
                });
            });

            scope.routeToSaving = function (id) {
                location.path('/viewsavingaccount/' + id);
            };
            console.log("outer"+parentGSIMId);

            scope.clickEvent = function (eventName, accountId) {
                eventName = eventName || "";
                switch (eventName) {
                    case "modifyapplication":
                        location.path('/editgsimaccount/' + parentGSIMId+'/'+gsimChildAccountId+'/'+scope.groupId+'/'+scope.gsimAccountNumber);
                        break;
                    case "approve":
                        location.path('/gsimaccount/'+parentGSIMId +'/'+gsimChildAccountId+ '/approve/'+scope.groupId+'/'+scope.gsimAccountNumber);
                        break;
                    case "reject":
                        location.path('/gsimaccount/'+parentGSIMId +'/'+gsimChildAccountId+ '/reject/'+scope.groupId+'/'+scope.gsimAccountNumber);
                        break;
                    case "withdrawnbyclient":
                        location.path('/savingaccount/' + accountId + '/withdrawnByApplicant');
                        break;
                    case "delete":
                        resourceFactory.savingsResource.delete({accountId: accountId}, {}, function (data) {
                            var destination = '/viewgroup/' + data.groupId;
                            if (data.clientId) destination = '/viewclient/' + data.clientId;
                            location.path(destination);
                        });
                        break;
                    case "undoapproval":
                        location.path('/gsimaccount/'+parentGSIMId +'/'+gsimChildAccountId+ '/undoapproval/'+scope.groupId+'/'+scope.gsimAccountNumber);
                        break;
                    case "activate":
                        location.path('/gsimaccount/'+parentGSIMId +'/'+gsimChildAccountId+ '/activate/'+scope.groupId+'/'+scope.gsimAccountNumber);
                        break;
                    case "deposit":
                        location.path('/gsimaccount/'+parentGSIMId +'/'+gsimChildAccountId+  '/gsimDeposit/'+scope.groupId+'/'+scope.gsimAccountNumber);
                        break;
                    case "withdraw":
                        location.path('/gsimaccount/'+parentGSIMId +'/'+gsimChildAccountId+  '/gsimWithdrawal/'+scope.groupId+'/'+scope.gsimAccountNumber);
                        break;
                    case "addcharge":
                        location.path('/savingaccounts/' + accountId + '/charges');
                        break;
                    case "calculateInterest":
                        resourceFactory.savingsResource.save({accountId: accountId, command: 'calculateInterest'}, {}, function (data) {
                            route.reload();
                        });
                        break;
                    case "postInterest":
                        resourceFactory.savingsResource.save({accountId: accountId, command: 'postInterest'}, {}, function (data) {
                            route.reload();
                        });
                        break;
                    case "applyAnnualFees":
                        location.path('/savingaccountcharge/' + accountId + '/applyAnnualFees/' + scope.annualChargeId);
                        break;
                    case "transferFunds":
                        if (scope.savingaccountdetails.clientId) {
                            location.path('/accounttransfers/fromsavings/' + accountId);
                        }
                        break;
                    case "close":
                        location.path('/gsimaccount/'+parentGSIMId +'/'+gsimChildAccountId+ '/close');
                        break;
                    case "assignSavingsOfficer":
                        location.path('/assignsavingsofficer/' + accountId);
                        break;
                    case "unAssignSavingsOfficer":
                        location.path('/unassignsavingsofficer/' + accountId);
                        break;
                    case "enableWithHoldTax":
                        var changes = {
                            withHoldTax:true
                        };
                        resourceFactory.savingsResource.update({accountId: accountId, command: 'updateWithHoldTax'}, changes, function (data) {
                            route.reload();
                        });
                        break;
                    case "disableWithHoldTax":
                        var changes = {
                            withHoldTax:false
                        };
                        resourceFactory.savingsResource.update({accountId: accountId, command: 'updateWithHoldTax'}, changes, function (data) {
                            route.reload();
                        });
                        break;
                    case "postInterestAsOn":
                        location.path('/savingaccount/' + accountId + '/postInterestAsOn');
                        break;
                }
            };

        }
    });
    mifosX.ng.application.controller('ViewGSIMaccountController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', 'dateFilter', '$uibModal', mifosX.controllers.ViewGSIMaccountController]).run(function ($log) {
        $log.info("ViewGSIMaccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewSavingChargeController: function (scope, resourceFactory, routeParams, location, $uibModal) {

            scope.savingId = routeParams.savingId;
            scope.chargeId = routeParams.id;

            resourceFactory.savingsResource.get({ resourceType: 'charges', accountId: scope.savingId, chargeId: scope.chargeId}, function (data) {
                scope.charge = data;
                if (routeParams.status == 'Submitted and pending approval') {
                    scope.showEditButtons = true;
                }
                if (routeParams.status == 'Active') {
                    scope.showWaiveButton = true;
                    if(scope.charge.amountOutstanding == 0){
                        scope.showWaiveButton = false;
                    }
                }
                if (scope.showWaiveButton) {
                    scope.isRecurringCharge = scope.charge.chargeTimeType.value == 'Monthly Fee'
                        || scope.charge.chargeTimeType.value == 'Annual Fee'
                        || scope.charge.chargeTimeType.value == 'Weekly Fee';
                }

            });
            scope.deleteCharge = function () {
                $uibModal.open({
                    templateUrl: 'deletecharge.html',
                    controller: ChargeDeleteCtrl
                });
            };
            var ChargeDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.savingsResource.delete({ resourceType: 'charges', accountId: scope.savingId, chargeId: scope.chargeId}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/viewsavingaccount/' + scope.savingId);
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.waiveCharge = function () {
                resourceFactory.savingsResource.save({ resourceType: 'charges', accountId: scope.savingId, chargeId: scope.chargeId}, {}, function (data) {
                    location.path('/viewsavingaccount/' + scope.savingId);
                });
            };

        }
    });
    mifosX.ng.application.controller('ViewSavingChargeController', ['$scope', 'ResourceFactory', '$routeParams', '$location', '$uibModal', mifosX.controllers.ViewSavingChargeController]).run(function ($log) {
        $log.info("ViewSavingChargeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewSavingDetailsController: function (scope, routeParams, resourceFactory, paginatorService, location, $uibModal, route, dateFilter, $sce, $rootScope, API_VERSION) {
            scope.report = false;
            scope.hidePentahoReport = true;
            scope.showActiveCharges = true;
            scope.formData = {};
            scope.date = {};
            scope.staffData = {};
            scope.fieldOfficers = [];
            scope.savingaccountdetails = [];
            scope.isDebit = function (savingsTransactionType) {
                return savingsTransactionType.withdrawal == true || savingsTransactionType.feeDeduction == true
                    || savingsTransactionType.overdraftInterest == true || savingsTransactionType.withholdTax == true;
            };

            scope.routeTo = function (savingsAccountId, transactionId, accountTransfer, transferId) {
                if (accountTransfer) {
                    location.path('/viewaccounttransfers/' + transferId);
                } else {
                    location.path('/viewsavingtrxn/' + savingsAccountId + '/trxnId/' + transactionId);
                }
            };

            /***
             * we are using orderBy(https://docs.angularjs.org/api/ng/filter/orderBy) filter to sort fields in ui
             * api returns dates in array format[yyyy, mm, dd], converting the array of dates to date object
             * @param dateFieldName
             */
            scope.convertDateArrayToObject = function(dateFieldName){
                for(var i in scope.savingaccountdetails.transactions){
                    scope.savingaccountdetails.transactions[i][dateFieldName] = new Date(scope.savingaccountdetails.transactions[i].date);
                }
            };
            scope.isRecurringCharge = function (charge) {
                return charge.chargeTimeType.value == 'Monthly Fee' || charge.chargeTimeType.value == 'Annual Fee' || charge.chargeTimeType.value == 'Weekly Fee';
            }

            scope.viewCharge = function (id){
                location.path('/savings/'+scope.savingaccountdetails.id+'/viewcharge/'+id).search({'status':scope.savingaccountdetails.status.value});
            }

            scope.clickEvent = function (eventName, accountId) {
                eventName = eventName || "";
                switch (eventName) {
                    case "modifyapplication":
                        location.path('/editsavingaccount/' + accountId);
                        break;
                    case "approve":
                        location.path('/savingaccount/' + accountId + '/approve');
                        break;
                    case "reject":
                        location.path('/savingaccount/' + accountId + '/reject');
                        break;
                    case "withdrawnbyclient":
                        location.path('/savingaccount/' + accountId + '/withdrawnByApplicant');
                        break;
                    case "delete":
                        resourceFactory.savingsResource.delete({accountId: accountId}, {}, function (data) {
                            var destination = '/viewgroup/' + data.groupId;
                            if (data.clientId) destination = '/viewclient/' + data.clientId;
                            location.path(destination);
                        });
                        break;
                    case "undoapproval":
                        location.path('/savingaccount/' + accountId + '/undoapproval');
                        break;
                    case "activate":
                        location.path('/savingaccount/' + accountId + '/activate');
                        break;
                    case "deposit":
                        location.path('/savingaccount/' + accountId + '/deposit');
                        break;
                    case "withdraw":
                        location.path('/savingaccount/' + accountId + '/withdrawal');
                        break;
                    case "addcharge":
                        location.path('/savingaccounts/' + accountId + '/charges');
                        break;
                    case "calculateInterest":
                        resourceFactory.savingsResource.save({accountId: accountId, command: 'calculateInterest'}, {}, function (data) {
                            route.reload();
                        });
                        break;
                    case "postInterest":
                        resourceFactory.savingsResource.save({accountId: accountId, command: 'postInterest'}, {}, function (data) {
                            route.reload();
                        });
                        break;
                    case "applyAnnualFees":
                        location.path('/savingaccountcharge/' + accountId + '/applyAnnualFees/' + scope.annualChargeId);
                        break;
                    case "transferFunds":
                        if (scope.savingaccountdetails.clientId) {
                            location.path('/accounttransfers/fromsavings/' + accountId);
                        }
                        break;
                    case "close":
                        location.path('/savingaccount/' + accountId + '/close');
                        break;
                    case "assignSavingsOfficer":
                        location.path('/assignsavingsofficer/' + accountId);
                        break;
                    case "unAssignSavingsOfficer":
                        location.path('/unassignsavingsofficer/' + accountId);
                        break;
                    case "enableWithHoldTax":
                        var changes = {
                            withHoldTax:true
                        };
                        resourceFactory.savingsResource.update({accountId: accountId, command: 'updateWithHoldTax'}, changes, function (data) {
                            route.reload();
                        });
                        break;
                    case "disableWithHoldTax":
                        var changes = {
                            withHoldTax:false
                        };
                        resourceFactory.savingsResource.update({accountId: accountId, command: 'updateWithHoldTax'}, changes, function (data) {
                            route.reload();
                        });
                        break;
                    case "postInterestAsOn":
                        location.path('/savingaccount/' + accountId + '/postInterestAsOn');
                        break;

                }
            };


            resourceFactory.savingsResource.get({accountId: routeParams.id, associations: 'all'}, function (data) {
                scope.savingaccountdetails = data;
                scope.savingaccountdetails.availableBalance = scope.savingaccountdetails.enforceMinRequiredBalance?(scope.savingaccountdetails.summary.accountBalance - scope.savingaccountdetails.minRequiredOpeningBalance):scope.savingaccountdetails.summary.accountBalance;
                scope.convertDateArrayToObject('date');
                if(scope.savingaccountdetails.groupId) {
                    resourceFactory.groupResource.get({groupId: scope.savingaccountdetails.groupId}, function (data) {
                        scope.groupLevel = data.groupLevel;
                    });
                }
                scope.showonhold = true;
                if(angular.isUndefined(data.onHoldFunds)){
                    scope.showonhold = false;
                }
                scope.staffData.staffId = data.staffId;
                scope.date.toDate = new Date();
                scope.date.fromDate = new Date(data.timeline.activatedOnDate);

                scope.status = data.status.value;
                if (scope.status == "Submitted and pending approval" || scope.status == "Active" || scope.status == "Approved") {
                    scope.choice = true;
                }
                scope.chargeAction = data.status.value == "Submitted and pending approval" ? true : false;
                scope.chargePayAction = data.status.value == "Active" ? true : false;
                if (scope.savingaccountdetails.charges) {
                    scope.charges = scope.savingaccountdetails.charges;
                    scope.chargeTableShow = true;
                } else {
                    scope.chargeTableShow = false;
                }
                if (data.status.value == "Submitted and pending approval") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.modifyapplication",
                            icon: "fa fa-pencil ",
                            taskPermissionName:"UPDATE_SAVINGSACCOUNT"
                        },
                        {
                            name: "button.approve",
                            icon: "fa fa-check",
                            taskPermissionName:"APPROVE_SAVINGSACCOUNT"
                        }
                    ],
                        options: [
                            {
                                name: "button.reject",
                                taskPermissionName:"REJECT_SAVINGSACCOUNT"
                            },
                            {
                                name: "button.withdrawnbyclient",
                                taskPermissionName:"WITHDRAW_SAVINGSACCOUNT"
                            },
                            {
                                name: "button.addcharge",
                                taskPermissionName:"CREATE_SAVINGSACCOUNTCHARGE"
                            },
                            {
                                name: "button.delete",
                                taskPermissionName:"DELETE_SAVINGSACCOUNT"
                            }
                        ]
                    };
                }

                if (data.status.value == "Approved") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.undoapproval",
                            icon: "fa faf-undo",
                            taskPermissionName:"APPROVALUNDO_SAVINGSACCOUNT"
                        },
                        {
                            name: "button.activate",
                            icon: "fa fa-check",
                            taskPermissionName:"ACTIVATE_SAVINGSACCOUNT"
                        },
                        {
                            name: "button.addcharge",
                            icon: "fa fa-plus",
                            taskPermissionName:"CREATE_SAVINGSACCOUNTCHARGE"
                        }
                    ]
                    };
                }

                if (data.status.value == "Active") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.postInterestAsOn",
                            icon: "icon-arrow-right",
                            taskPermissionName:"POSTINTEREST_SAVINGSACCOUNT"
                        },
                        {
                            name: "button.deposit",
                            icon: "fa fa-arrow-up",
                            taskPermissionName:"DEPOSIT_SAVINGSACCOUNT"
                        },
                        {
                            name: "button.withdraw",
                            icon: "fa fa-arrow-down",
                            taskPermissionName:"WITHDRAW_SAVINGSACCOUNT"
                        },
                        {
                            name: "button.calculateInterest",
                            icon: "fa fa-table",
                            taskPermissionName:"CALCULATEINTEREST_SAVINGSACCOUNT"
                        }
                    ],
                        options: [
                            {
                                name: "button.postInterest",
                                taskPermissionName:"POSTINTEREST_SAVINGSACCOUNT"
                            },
                            {
                                name: "button.addcharge",
                                taskPermissionName:"CREATE_SAVINGSACCOUNTCHARGE"
                            },
                            {
                                name: "button.close",
                                taskPermissionName:"CLOSE_SAVINGSACCOUNT"
                            }
                        ]

                    };
                    if (data.clientId) {
                        scope.buttons.options.push({
                            name: "button.transferFunds",
                            taskPermissionName:"CREATE_ACCOUNTTRANSFER"
                        });
                    }
                    if (data.charges) {
                        for (var i in scope.charges) {
                            if (scope.charges[i].name == "Annual fee - INR") {
                                scope.buttons.options.push({
                                    name: "button.applyAnnualFees",
                                    taskPermissionName:"APPLYANNUALFEE_SAVINGSACCOUNT"
                                });
                                scope.annualChargeId = scope.charges[i].id;
                            }
                        }
                    }
                    if(data.taxGroup){
                        if(data.withHoldTax){
                            scope.buttons.options.push({
                                name: "button.disableWithHoldTax",
                                taskPermissionName:"UPDATEWITHHOLDTAX_SAVINGSACCOUNT"
                            });
                        }else{
                            scope.buttons.options.push({
                                name: "button.enableWithHoldTax",
                                taskPermissionName:"UPDATEWITHHOLDTAX_SAVINGSACCOUNT"
                            });
                        }
                    }
                }
                if (data.annualFee) {
                    var annualdueDate = [];
                    annualdueDate = data.annualFee.feeOnMonthDay;
                    annualdueDate.push(new Date().getFullYear());
                    scope.annualdueDate = new Date(annualdueDate);
                };

                resourceFactory.standingInstructionTemplateResource.get({fromClientId: scope.savingaccountdetails.clientId,fromAccountType: 2,fromAccountId: routeParams.id},function (response) {
                    scope.standinginstruction = response;
                    scope.searchTransaction();
                });
            });

            var fetchFunction = function (offset, limit, callback) {
                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.locale = scope.optlang.code;
                params.fromAccountId = routeParams.id;
                params.fromAccountType = 2;
                params.clientId = scope.savingaccountdetails.clientId;
                params.clientName = scope.savingaccountdetails.clientName;
                params.dateFormat = scope.df;

                resourceFactory.standingInstructionResource.search(params, callback);
            };

            scope.searchTransaction = function () {
                scope.displayResults = true;
                scope.instructions = paginatorService.paginate(fetchFunction, 14);
                scope.isCollapsed = false;
            };

            resourceFactory.DataTablesResource.getAllDataTables({apptable: 'm_savings_account'}, function (data) {
                scope.savingdatatables = data;
            });
            /*// Saving notes not yet implemented
            resourceFactory.savingsResource.getAllNotes({accountId: routeParams.id,resourceType:'notes'}, function (data) {
                scope.savingNotes = data;
            });

            scope.saveNote = function () {
                resourceFactory.savingsResource.save({accountId: routeParams.id, resourceType: 'notes'}, this.formData, function (data) {
                    var today = new Date();
                    temp = { id: data.resourceId, note: scope.formData.note, createdByUsername: "test", createdOn: today };
                    scope.savingNotes.push(temp);
                    scope.formData.note = "";
                    scope.predicate = '-id';
                });
            };*/

            scope.dataTableChange = function (datatable) {
                resourceFactory.DataTablesResource.getTableDetails({datatablename: datatable.registeredTableName,
                    entityId: routeParams.id, genericResultSet: 'true'}, function (data) {
                    scope.datatabledetails = data;
                    scope.datatabledetails.isData = data.data.length > 0 ? true : false;
                    scope.datatabledetails.isMultirow = data.columnHeaders[0].columnName == "id" ? true : false;
                    scope.showDataTableAddButton = !scope.datatabledetails.isData || scope.datatabledetails.isMultirow;
                    scope.showDataTableEditButton = scope.datatabledetails.isData && !scope.datatabledetails.isMultirow;
                    scope.singleRow = [];
                    for (var i in data.columnHeaders) {
                        if (scope.datatabledetails.columnHeaders[i].columnCode) {
                            for (var j in scope.datatabledetails.columnHeaders[i].columnValues) {
                                for (var k in data.data) {
                                    if (data.data[k].row[i] == scope.datatabledetails.columnHeaders[i].columnValues[j].id) {
                                        data.data[k].row[i] = scope.datatabledetails.columnHeaders[i].columnValues[j].value;
                                    }
                                }
                            }
                        }
                    }
                    if (scope.datatabledetails.isData) {
                        for (var i in data.columnHeaders) {
                            if (!scope.datatabledetails.isMultirow) {
                                var row = {};
                                row.key = data.columnHeaders[i].columnName;
                                row.value = data.data[0].row[i];
                                scope.singleRow.push(row);
                            }
                        }
                    }
                });
            };

            scope.export = function () {
                scope.report = true;
                scope.printbtn = false;
                scope.viewReport = false;
                scope.viewSavingReport = true;
                scope.viewTransactionReport = false;
            };

            scope.viewJournalEntries = function(){
                location.path("/searchtransaction/").search({savingsId: scope.savingaccountdetails.id});
            };

            scope.viewDataTable = function (registeredTableName,data){
                if (scope.datatabledetails.isMultirow) {
                    location.path("/viewdatatableentry/"+registeredTableName+"/"+scope.savingaccountdetails.id+"/"+data.row[0]);
                }else{
                    location.path("/viewsingledatatableentry/"+registeredTableName+"/"+scope.savingaccountdetails.id);
                }
            };

            scope.viewSavingDetails = function () {

                scope.report = false;
                scope.hidePentahoReport = true;
                scope.viewReport = false;

            };

            scope.viewPrintDetails = function () {
                //scope.printbtn = true;
                scope.report = true;
                scope.viewTransactionReport = false;
                scope.viewReport = true;
                scope.hidePentahoReport = true;
                scope.formData.outputType = 'PDF';
                scope.baseURL = $rootScope.hostUrl + API_VERSION + "/runreports/" + encodeURIComponent("Client Saving Transactions");
                scope.baseURL += "?output-type=" + encodeURIComponent(scope.formData.outputType) + "&tenantIdentifier=" + $rootScope.tenantIdentifier+"&locale="+scope.optlang.code;

                var reportParams = "";
                scope.startDate = dateFilter(scope.date.fromDate, 'yyyy-MM-dd');
                scope.endDate = dateFilter(scope.date.toDate, 'yyyy-MM-dd');
                var paramName = "R_startDate";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.startDate)+ "&";
                paramName = "R_endDate";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.endDate)+ "&";
                paramName = "R_savingsAccountId";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.savingaccountdetails.accountNo);
                if (reportParams > "") {
                    scope.baseURL += "&" + reportParams;
                }

                // allow untrusted urls for iframe http://docs.angularjs.org/error/$sce/insecurl
                scope.viewReportDetails = $sce.trustAsResourceUrl(scope.baseURL);

            };

            scope.viewSavingsTransactionReceipts = function (transactionId) {
                scope.report = true;
                scope.viewTransactionReport = true;
                scope.viewSavingReport = false;
                scope.printbtn = false;
                scope.viewReport = true;
                scope.hidePentahoReport = true;
                scope.formData.outputType = 'PDF';
                scope.baseURL = $rootScope.hostUrl + API_VERSION + "/runreports/" + encodeURIComponent("Savings Transaction Receipt");
                scope.baseURL += "?output-type=" + encodeURIComponent(scope.formData.outputType) + "&tenantIdentifier=" + $rootScope.tenantIdentifier+"&locale="+scope.optlang.code;

                var reportParams = "";
                var paramName = "R_transactionId";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(transactionId);
                if (reportParams > "") {
                    scope.baseURL += "&" + reportParams;
                }
                // allow untrusted urls for iframe http://docs.angularjs.org/error/$sce/insecurl
                scope.viewReportDetails = $sce.trustAsResourceUrl(scope.baseURL);

            };

            scope.deletestandinginstruction = function (id) {
                $uibModal.open({
                    templateUrl: 'delInstruction.html',
                    controller: DelInstructionCtrl,
                    resolve: {
                        ids: function () {
                            return id;
                        }
                    }
                });
            };

            var DelInstructionCtrl = function ($scope, $uibModalInstance, ids) {
                $scope.delete = function () {
                    resourceFactory.standingInstructionResource.cancel({standingInstructionId: ids}, function (data) {
                        scope.searchTransaction();
                        $uibModalInstance.close('delete');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.printReport = function () {
                window.print();
                window.close();
            };

            scope.deleteAll = function (apptableName, entityId) {
                resourceFactory.DataTablesResource.delete({datatablename: apptableName, entityId: entityId, genericResultSet: 'true'}, {}, function (data) {
                    route.reload();
                });
            };

            scope.modifyTransaction = function (accountId, transactionId) {
                location.path('/savingaccount/' + accountId + '/modifytransaction?transactionId=' + transactionId);
            };

            scope.transactionSort = {
                column: 'date',
                descending: true
            };

            scope.changeTransactionSort = function(column) {
                var sort = scope.transactionSort;
                if (sort.column == column) {
                    sort.descending = !sort.descending;
                } else {
                    sort.column = column;
                    sort.descending = true;
                }
            };

            scope.checkStatus = function(){
                if(scope.status == 'Active' || scope.status == 'Closed' || scope.status == 'Transfer in progress' ||
                scope.status == 'Transfer on hold' || scope.status == 'Premature Closed' || scope.status == 'Matured'){
                    return true;
                }
                return false;
            };

        }
    });
    mifosX.ng.application.controller('ViewSavingDetailsController', ['$scope', '$routeParams', 'ResourceFactory','PaginatorService' , '$location','$uibModal', '$route', 'dateFilter', '$sce', '$rootScope', 'API_VERSION', mifosX.controllers.ViewSavingDetailsController]).run(function ($log) {
        $log.info("ViewSavingDetailsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewSavingsTransactionController: function (scope, resourceFactory, location, routeParams, dateFilter, $uibModal) {
            scope.flag = false;
            resourceFactory.savingsTrxnsResource.get({savingsId: routeParams.accountId, transactionId: routeParams.id}, function (data) {
                scope.transaction = data;
                if (scope.transaction.transactionType.value == 'Transfer' || scope.transaction.reversed == 'true' || scope.transaction.transactionType.id==3 || scope.transaction.transactionType.id==17) {
                    scope.flag = true;
                }
            });
            
            scope.undo = function (accountId, transactionId) {
                $uibModal.open({
                    templateUrl: 'undotransaction.html',
                    controller: UndoTransactionModel,
                    resolve: {
                        accountId: function () {
                          return accountId;
                        },
                        transactionId: function () {
                          return transactionId;
                        }
                    }
                });
            };
            
            var UndoTransactionModel = function ($scope, $uibModalInstance, accountId, transactionId) {
                $scope.undoTransaction = function () {
                    var params = {savingsId: accountId, transactionId: transactionId, command: 'undo'};
                    var formData = {dateFormat: scope.df, locale: scope.optlang.code, transactionAmount: 0};
                    formData.transactionDate = dateFilter(new Date(), scope.df);
                    resourceFactory.savingsTrxnsResource.save(params, formData, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/viewsavingaccount/' + data.savingsId);
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewSavingsTransactionController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', '$uibModal', mifosX.controllers.ViewSavingsTransactionController]).run(function ($log) {
        $log.info("ViewSavingsTransactionController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateSelfServiceUserController: function (scope, resourceFactory, routeParams,$uibModal) {
            // TODO: Add Account Is Active Logic through email validation
            scope.accountActive = false;    
            scope.available = [];
            scope.selected = [];
            scope.selectedRoles = [] ;
            scope.availableRoles = [];
            scope.formData = {
                isSelfServiceUser: true,
                sendPasswordToEmail: true,
                roles: []
            };
            scope.clientId = routeParams.clientId;
            resourceFactory.userTemplateResource.get(function (data) {
                scope.availableRoles = data.availableRoles;
                // Assign the Self Service User Role to user
                scope.selectedRoles = scope.availableRoles.filter(function (role) {
                    return role.name == "Self Service User";
                });
            });
            resourceFactory.clientResource.get({clientId: scope.clientId},function(data){
                scope.formData.firstname = data.firstname;
                scope.formData.lastname = data.lastname;
                scope.formData.email = '';
                scope.formData.officeId = data.officeId;
                scope.formData.staffId = data.staffId;
                scope.formData.clients = [scope.clientId];
            });

            scope.submit = function(){
                for (var i in scope.selectedRoles) {
                    scope.formData.roles.push(scope.selectedRoles[i].id) ;
                }
                resourceFactory.userListResource.save(this.formData, function (data) {
                    scope.accountActive = true;
                    $uibModal.open({
                        templateUrl: 'selfserviceModal.html',
                        controller: SuccessModalCtrl,
                    });
                });
                
            }

            var SuccessModalCtrl = function ($scope, $uibModalInstance) {
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('CreateSelfServiceUserController', ['$scope', 'ResourceFactory', '$routeParams','$uibModal', mifosX.controllers.CreateSelfServiceUserController]).run(function ($log) {
        $log.info("CreateSelfServiceUserController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportShareAccountController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/accounts/share/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        scope.first.queryParams += 'officeId=' + scope.formData.officeId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }
            };

            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "shareaccounts"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };

            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/accounts/share/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportShareAccountController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportShareAccountController]).run(function ($log) {
        $log.info("BulkImportShareAccountController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateShareAccountController: function (scope, resourceFactory, location, routeParams, dateFilter,WizardHandler) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.sharedetails = {};
            scope.restrictDate = new Date();
            scope.clientId = routeParams.clientId;
            scope.date = {};
            scope.date.submittedOnDate = new Date();
            scope.charges = [];
            scope.inparams = {};
            if (scope.clientId) {
                scope.inparams.clientId = scope.clientId
            }
            scope.disabled = true;
            resourceFactory.shareAccountTemplateResource.get(scope.inparams, function (data) {
                scope.products = data.productOptions;
                scope.chargeOptions = data.chargeOptions;
                scope.clientName = data.clientName;
            });

            scope.changeProduct = function () {
                scope.inparams.productId = scope.formData.productId;
                resourceFactory.shareAccountTemplateResource.get(scope.inparams, function (data) {
                    scope.data = data;
                    scope.formData.unitPrice = data.currentMarketPrice ;
                    scope.formData.requestedShares = data.defaultShares ;
                    scope.charges = data.charges;
                    scope.sharedetails = angular.copy(scope.formData);
                    scope.sharedetails.productName = scope.formValue(scope.products,scope.formData.productId,'id','name');
                });
                scope.disabled = false;

            };

            scope.goNext = function(form){
                WizardHandler.wizard().checkValid(form);
            }

            scope.$watch('formData',function(newVal){
               scope.sharedetails = angular.extend(scope.sharedetails,newVal);
            });

            scope.formValue = function(array,model,findattr,retAttr){
                findattr = findattr ? findattr : 'id';
                retAttr = retAttr ? retAttr : 'value';
                console.log(findattr,retAttr,model);
                return _.find(array, function (obj) {
                    return obj[findattr] === model;
                })[retAttr];
            };

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.submit = function () {
                this.formData.submittedDate = dateFilter(this.formData.submittedDate, scope.df);
                this.formData.applicationDate = dateFilter(this.formData.applicationDate, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.charges = [];

                if (scope.clientId) this.formData.clientId = scope.clientId;
                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {
                        this.formData.charges.push({ chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amount});
                    }
                }
                resourceFactory.sharesAccount.save(this.formData, function (data) {
                    location.path('/viewshareaccount/' + data.resourceId);
                });
            };

            scope.cancel = function () {
                location.path('/viewclient/' + scope.clientId);
            }
        }
    });
    mifosX.ng.application.controller('CreateShareAccountController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter','WizardHandler', mifosX.controllers.CreateShareAccountController]).run(function ($log) {
        $log.info("CreateShareAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditShareAccountController: function (scope, resourceFactory, location, routeParams, dateFilter) {
            scope.products = [];
            scope.fieldOfficers = [];
            scope.formData = {};
            scope.restrictDate = new Date();
            scope.clientId = routeParams.clientId;
            scope.date = {};
            scope.date.submittedOnDate = new Date();
            scope.charges = [];
            scope.inparams = {};
            resourceFactory.sharesAccount.get({shareAccountId: routeParams.accountId, template: 'true'}, function (data) {
                scope.data = data;
                scope.formData.submittedDate = new Date(data.timeline.submittedOnDate) ;
                scope.products = data.productOptions;
                scope.chargeOptions = data.chargeOptions;
                scope.charges = data.charges ;
                scope.formData.productId = data.productId ;
                scope.formData.savingsAccountId = data.savingsAccountId ;
                scope.formData.applicationDate = new Date(data.purchasedShares[0].purchasedDate) ;
                scope.formData.requestedShares = data.purchasedShares[0].numberOfShares ;
                scope.formData.unitPrice = data.purchasedShares[0].purchasedPrice ;
                scope.formData.externalId = data.externalId ;
                scope.formData.minimumActivePeriod = data.minimumActivePeriod ;
                scope.formData.minimumActivePeriodFrequencyType = data.minimumActivePeriodTypeEnum.id ;
                scope.formData.lockinPeriodFrequency = data.lockinPeriod ;
                scope.formData.lockinPeriodFrequencyType = data.lockPeriodTypeEnum.id ;
                scope.formData.allowDividendCalculationForInactiveClients = data.allowDividendCalculationForInactiveClients ;
                scope.clientName = data.clientName;
                scope.clientId = data.clientId ;

                if (data.clientId) {
                    scope.inparams.clientId = data.clientId ;
                }
            });

            scope.changeProduct = function () {
                scope.inparams.productId = scope.formData.productId;
                resourceFactory.shareAccountTemplateResource.get(scope.inparams, function (data) {
                    scope.data = data;
                });
            };

            scope.addCharge = function (chargeId) {
                scope.errorchargeevent = false;
                if (chargeId) {
                    resourceFactory.chargeResource.get({chargeId: chargeId, template: 'true'}, function (data) {
                        data.chargeId = data.id;
                        delete data.id ;
                        scope.charges.push(data);
                        scope.chargeId = undefined;
                    });
                } else {
                    scope.errorchargeevent = true;
                    scope.labelchargeerror = "selectcharge";
                }
            }

            scope.deleteCharge = function (index) {
                scope.charges.splice(index, 1);
            }

            scope.submit = function () {
                this.formData.submittedDate = dateFilter(this.formData.submittedDate, scope.df);
                this.formData.applicationDate = dateFilter(this.formData.applicationDate, scope.df);
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.df;
                this.formData.charges = [];

                if (scope.clientId) this.formData.clientId = scope.clientId;
                if (scope.charges.length > 0) {
                    for (var i in scope.charges) {
                        this.formData.charges.push({ id: scope.charges[i].id, chargeId: scope.charges[i].chargeId, amount: scope.charges[i].amountOrPercentage});
                    }
                }
                resourceFactory.sharesAccount.put({shareAccountId: routeParams.accountId}, this.formData, function (data) {
                    location.path('/viewshareaccount/' + data.resourceId);
                });
            };

            scope.cancel = function () {
                location.path('/viewshareaccount/' + routeParams.accountId);
            }
        }
    });
    mifosX.ng.application.controller('EditShareAccountController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.EditShareAccountController]).run(function ($log) {
        $log.info("EditShareAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ShareAccountActionsController: function (scope, resourceFactory, location, routeParams, dateFilter) {

            scope.action = routeParams.action || "";
            scope.accountId = routeParams.accountId;
            scope.shareAccountId = routeParams.accountId;
            scope.purchasedSharesId = routeParams.purchasedSharesId ;
            scope.formData = {};
            scope.restrictDate = new Date();
            // Transaction UI Related
            scope.isTransaction = false;
            scope.transactionAmountField = false;
            scope.showPaymentDetails = false;
            scope.paymentTypes = [];

            switch (scope.action) {
                case "approve":
                    scope.title = 'label.heading.approveshareaccount';
                    scope.labelName = 'label.input.savingaccountapprovedOnDate';
                    scope.modelName = 'approvedDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'APPROVE_SHAREACCOUNT';
                    break;
                case "reject":
                    scope.title = 'label.heading.rejectshareaccount';
                    scope.labelName = 'label.input.rejectedon';
                    scope.modelName = 'rejectedDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.taskPermissionName = 'REJECT_SHARESACCOUNT';
                    break;
                case "undoapproval":
                    scope.title = 'label.heading.undoapproveshareaccount';
                    scope.showDateField = false;
                    scope.showNoteField = false;
                    scope.taskPermissionName = 'UNDOAPPROVAL_SHAREACCOUNT';
                    break;
                case "activate":
                    scope.title = 'label.heading.activateshareaccount';
                    scope.labelName = 'label.input.activatedon';
                    scope.modelName = 'activatedDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.taskPermissionName = 'ACTIVATE_SHAREACCOUNT';
                    break;
                case "applyadditionalshares":
                    resourceFactory.sharesAccount.get({shareAccountId: routeParams.accountId}, function (data) {
                        scope.shareaccountdetails = data;
                        scope.formData.unitPrice = data.currentMarketPrice ;
                    }) ;
                    scope.title = 'label.heading.applyadditionalshares';
                    scope.labelName = 'label.input.requesteddate';
                    scope.modelName = 'requestedDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.requestedShares = true ;
                    scope.taskPermissionName = 'APPROVE_SHAREACCOUNT';
                    break ;
                case "approveadditionalshares":
                    resourceFactory.sharesAccount.get({shareAccountId: routeParams.accountId}, function (data) {
                        scope.shareaccountdetails = data;
                        var purchasedShares = [] ;
                        for(var i in data.purchasedShares) {
                            if(scope.shareaccountdetails.purchasedShares[i].status.code=='purchasedSharesStatusType.applied' &&
                                scope.shareaccountdetails.purchasedShares[i].type.code == 'purchasedSharesType.purchased') {
                                purchasedShares.push(data.purchasedShares[i]) ;
                            }
                        }
                        scope.purchasedShares = purchasedShares ;
                    }) ;
                    scope.title = 'label.heading.approvesharespurchase';
                    scope.labelName = 'label.input.savingaccountapprovedOnDate';
                    scope.modelName = 'approvedDate';
                    scope.showDateField = false;
                    scope.showNoteField = false;
                    scope.showPendingShares = true ;
                    scope.taskPermissionName = 'APPROVEADDITIONALSHARES';
                    break;

                case "rejectadditionalshares":
                    resourceFactory.sharesAccount.get({shareAccountId: routeParams.accountId}, function (data) {
                        var purchasedShares = [] ;
                        scope.shareaccountdetails = data;
                        for(var i in data.purchasedShares) {
                            if(scope.shareaccountdetails.purchasedShares[i].status.code=='purchasedSharesStatusType.applied' &&
                                scope.shareaccountdetails.purchasedShares[i].type.code == 'purchasedSharesType.purchased') {
                                purchasedShares.push(data.purchasedShares[i]) ;
                            }
                        }
                        scope.purchasedShares = purchasedShares ;
                    }) ;
                    scope.title = 'label.heading.rejectsharespurchase';
                    scope.modelName = 'approvedDate';
                    scope.showDateField = false;
                    scope.showNoteField = false;
                    scope.showPendingShares = true ;
                    scope.taskPermissionName = 'REJECTADDITIONALSHARES';
                    break;

                case "redeemshares":
                    resourceFactory.sharesAccount.get({shareAccountId: routeParams.accountId}, function (data) {
                        scope.shareaccountdetails = data;
                        scope.formData.unitPrice = data.currentMarketPrice ;
                    }) ;
                    scope.title = 'label.button.redeemshares';
                    scope.labelName = 'label.input.requesteddate';
                    scope.modelName = 'requestedDate';
                    scope.showDateField = true;
                    scope.showNoteField = false;
                    scope.requestedShares = true ;
                    scope.taskPermissionName = 'APPROVE_SHAREACCOUNT';
                    break ;
                case "close":
                   /* resourceFactory.savingsTrxnsTemplateResource.get({savingsId: scope.accountId}, function (data) {
                        scope.paymentTypes = data.paymentTypeOptions;
                    });
                    resourceFactory.savingsResource.get({accountId: routeParams.id, fields:'summary'}, function (accountData) {
                        scope.accountBalance = accountData.summary.accountBalance;
                    });*/
                    scope.title = 'label.heading.closeshareaccount';
                    scope.labelName = 'label.input.closedon';
                    scope.modelName = 'closedDate';
                    scope.showDateField = true;
                    scope.showNoteField = true;
                    scope.withdrawBalance = false;
                    scope.taskPermissionName = 'CLOSE_SHAREACCOUNT';
                    break;
                case "editsavingcharge":
                    resourceFactory.savingsResource.get({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId},
                        function (data) {
                            scope.formData.amount = data.amount;
                            if (data.feeOnMonthDay) {
                                scope.dateArray = [];
                                scope.dateArray.push(2013)
                                for (var i in data.feeOnMonthDay) {
                                    scope.dateArray.push(data.feeOnMonthDay[i]);
                                }
                                var feeOnMonthDay = dateFilter(scope.dateArray, scope.df);
                                scope.formData.feeOnMonthDayFullDate = new Date(feeOnMonthDay);
                                scope.labelName = 'label.heading.savingaccounttransactionDate';
                                scope.modelName = 'feeOnMonthDayFullDate';
                                scope.showDateField = true;
                                scope.showAnnualAmountField = true;
                                scope.showAmountField = false;
                            } else {
                                scope.labelName = 'label.input.amount';
                                scope.modelName = 'amount';
                                scope.showDateField = false;
                                scope.showAnnualAmountField = false;
                                scope.showAmountField = true;
                            }
                        });
                    scope.taskPermissionName = 'UPDATE_SAVINGSACCOUNTCHARGE';
                    break;
                case "deletesavingcharge":
                    scope.showDelete = true;
                    scope.taskPermissionName = 'DELETE_SAVINGSACCOUNTCHARGE';
                    break;
                case "inactivate":
                    scope.inactivateCharge = true;
                    scope.taskPermissionName = 'INACTIVATE_SAVINGSACCOUNTCHARGE';
                    break;
                case "waive":
                    scope.waiveCharge = true;
                    scope.taskPermissionName = 'WAIVE_SAVINGSACCOUNTCHARGE';
                    break;
            }

            scope.cancel = function () {
                location.path('/viewshareaccount/' + routeParams.accountId);
            };

            scope.submit = function () {
                var params = {command: scope.action};
                if (scope.action != "undoapproval") {
                    this.formData.locale = scope.optlang.code;
                    this.formData.dateFormat = scope.df;
                }
                 if (scope.action == "editsavingcharge") {
                    if (this.formData.feeOnMonthDayFullDate) {
                        this.formData.feeOnMonthDay = dateFilter(this.formData.feeOnMonthDayFullDate, scope.df);
                        this.formData.monthDayFormat = "dd MMM";
                        this.formData.feeOnMonthDay = this.formData.feeOnMonthDay.substring(0, this.formData.feeOnMonthDay.length - 5);
                        delete this.formData.feeOnMonthDayFullDate;
                    }
                    resourceFactory.savingsResource.update({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewsavingaccount/' + data.savingsId);
                        });
                } else if (scope.action == "deletesavingcharge") {
                    resourceFactory.savingsResource.delete({accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId}, this.formData,
                        function (data) {
                            location.path('/viewsavingaccount/' + data.savingsId);
                        });
                } else if (scope.action == "paycharge" || scope.action == "waive" || scope.action == "inactivate") {
                    params = {accountId: routeParams.id, resourceType: 'charges', chargeId: routeParams.chargeId, command: scope.action};
                    if (this.formData.dueDate) {
                        this.formData.dueDate = dateFilter(this.formData.dueDate, scope.df);
                    } else if(this.formData.inactivationOnDate){
                        this.formData.inactivationOnDate = dateFilter(this.formData.inactivationOnDate, scope.df);
                    }
                    resourceFactory.savingsResource.save(params, this.formData, function (data) {
                        location.path('/viewsavingaccount/' + data.savingsId);
                    });
                } else {
                    params.shareAccountId = scope.accountId;
                    if (scope.action == "approve") {
                        if (this.formData.approvedDate) {
                            this.formData.approvedDate = dateFilter(this.formData.approvedDate, scope.df);
                        }
                    } else if (scope.action == "reject") {
                        if (this.formData.rejectedOnDate) {
                            this.formData.rejectedOnDate = dateFilter(this.formData.rejectedOnDate, scope.df);
                        }
                    } else if (scope.action == "activate") {
                        if (this.formData.activatedDate) {
                            this.formData.activatedDate = dateFilter(this.formData.activatedDate, scope.df);
                        }
                    } else if (scope.action == "close") {
                        if (this.formData.closedDate) {
                            this.formData.closedDate = dateFilter(this.formData.closedDate, scope.df);
                        }
                    }else if(scope.action == 'applyadditionalshares') {
                        this.formData.requestedDate = dateFilter(this.formData.requestedDate, scope.df);
                    }else if(scope.action == 'approveadditionalshares') {
                        this.formData.requestedDate = dateFilter(this.formData.requestedDate, scope.df);
                        var requestedShares = [] ;
                        for(var i in scope.purchasedShares) {
                            if(scope.purchasedShares[i].isApproved) {
                                var obj = {} ;
                                obj.id = scope.purchasedShares[i].id ;
                                requestedShares.push(obj) ;
                            }
                        }
                        this.formData.requestedShares = requestedShares ;
                    }else if(scope.action == 'rejectadditionalshares') {
                        var requestedShares = [] ;
                        for(var i in scope.purchasedShares) {
                            if(scope.purchasedShares[i].isApproved) {
                                var obj = {} ;
                                obj.id = scope.purchasedShares[i].id ;
                                requestedShares.push(obj) ;
                            }
                        }
                        this.formData.requestedShares = requestedShares ;
                    }else if(scope.action == 'redeemshares') {
                        this.formData.requestedDate = dateFilter(this.formData.requestedDate, scope.df);
                    }
                    resourceFactory.sharesAccount.save(params, this.formData, function (data) {
                        location.path('/viewshareaccount/' + data.resourceId);
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('ShareAccountActionsController', ['$scope', 'ResourceFactory', '$location', '$routeParams', 'dateFilter', mifosX.controllers.ShareAccountActionsController]).run(function ($log) {
        $log.info("ShareAccountActionsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewShareAccountController: function (scope, routeParams, resourceFactory, location, $uibModal, route, dateFilter, $sce, $rootScope, API_VERSION) {
            scope.report = false;
            scope.hidePentahoReport = true;
            scope.showActiveCharges = true;
            scope.formData = {};
            scope.date = {};
            scope.staffData = {};
            scope.fieldOfficers = [];
            scope.shareaccountdetails = [];

            scope.routeTo = function (savingsAccountId, transactionId, accountTransfer, transferId) {
                if (accountTransfer) {
                    location.path('/viewaccounttransfers/' + transferId);
                } else {
                    location.path('/viewsavingtrxn/' + savingsAccountId + '/trxnId/' + transactionId);
                }
            };

            /***
             * we are using orderBy(https://docs.angularjs.org/api/ng/filter/orderBy) filter to sort fields in ui
             * api returns dates in array format[yyyy, mm, dd], converting the array of dates to date object
             * @param dateFieldName
             */
            scope.convertDateArrayToObject = function(dateFieldName){
                for(var i in scope.shareaccountdetails.transactions){
                    scope.shareaccountdetails.transactions[i][dateFieldName] = new Date(scope.shareaccountdetails.transactions[i].date);
                }
            };
            scope.isRecurringCharge = function (charge) {
                return charge.chargeTimeType.value == 'Monthly Fee' || charge.chargeTimeType.value == 'Annual Fee' || charge.chargeTimeType.value == 'Weekly Fee';
            }

            scope.viewCharge = function (id){
                location.path('/savings/'+scope.shareaccountdetails.id+'/viewcharge/'+id).search({'status':scope.shareaccountdetails.status.value});
            }

            scope.clickEvent = function (eventName, accountId) {
                eventName = eventName || "";
                switch (eventName) {
                    case "modifyapplication":
                        location.path('/editshareaccount/' + accountId);
                        break;
                    case "approve":
                        location.path('/shareaccount/' + accountId + '/approve');
                        break;
                    case "reject":
                        location.path('/shareaccount/' + accountId + '/reject');
                        break;
                    case "delete":
                        resourceFactory.savingsResource.delete({accountId: accountId}, {}, function (data) {
                            var destination = '/viewgroup/' + data.groupId;
                            if (data.clientId) destination = '/viewclient/' + data.clientId;
                            location.path(destination);
                        });
                        break;
                    case "undoapproval":
                        location.path('/shareaccount/' + accountId + '/undoapproval');
                        break;
                    case "activate":
                        location.path('/shareaccount/' + accountId + '/activate');
                        break;
                    case "applyadditionalshares":
                        location.path('/shareaccount/' + accountId + '/applyadditionalshares');
                        break;
                    case "approveadditionalshares":
                        location.path('/shareaccount/' + accountId + '/approveadditionalshares');
                        break;
                    case "rejectadditionalshares":
                        location.path('/shareaccount/' + accountId + '/rejectadditionalshares');
                        break;
                    case "redeemshares":
                        location.path('/shareaccount/' + accountId + '/redeemshares');
                        break;
                    case "addcharge":
                        location.path('/shareaccount/' + accountId + '/charges');
                        break;
                    case "close":
                        location.path('/shareaccount/' + accountId + '/close');
                        break;
                    case "assignSavingsOfficer":
                        location.path('/assignshareofficer/' + accountId);
                        break;
                    case "unAssignSavingsOfficer":
                        location.path('/unassignshareofficer/' + accountId);
                        break;

                }
            };

            resourceFactory.sharesAccount.get({shareAccountId: routeParams.id}, function (data) {
                scope.shareaccountdetails = data;
                scope.convertDateArrayToObject('date');
                scope.staffData.staffId = data.staffId;
                scope.date.toDate = new Date();
                scope.date.fromDate = new Date(data.timeline.activatedDate);
                scope.status = data.status.value;

                if(scope.shareaccountdetails.dividends && scope.shareaccountdetails.dividends.length > 0) {
                    scope.showDividends = true ;
                    scope.dividends = scope.shareaccountdetails.dividends;
                }
                if (scope.status == "Submitted and pending approval" || scope.status == "Active" || scope.status == "Approved") {
                    scope.choice = true;
                }
                scope.chargeAction = data.status.value == "Submitted and pending approval" ? true : false;
                scope.chargePayAction = data.status.value == "Active" ? true : false;
                scope.sharesPendingForApproval = false ;

                if(scope.shareaccountdetails.purchasedShares) {
                    scope.purchasedShares = scope.shareaccountdetails.purchasedShares;
                    for (var i in scope.shareaccountdetails.purchasedShares) {
                        if(scope.shareaccountdetails.purchasedShares[i].status.code=='purchasedSharesStatusType.applied' &&
                            scope.shareaccountdetails.purchasedShares[i].type.code == 'purchasedSharesType.purchased') {
                            scope.sharesPendingForApproval = true ;
                            break ;
                        }
                    }
                    scope.purchasedSharesTableShow = true;
                }else {
                    scope.purchasedSharesTableShow = false;
                }
                if (scope.shareaccountdetails.charges) {
                    scope.charges = scope.shareaccountdetails.charges;
                    scope.chargeTableShow = true;
                } else {
                    scope.chargeTableShow = false;
                }
                if (data.status.value == "Submitted and pending approval") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.modifyapplication",
                            icon: "fa fa-pencil ",
                            taskPermissionName:"UPDATE_SHAREACCOUNT"
                        },
                        {
                            name: "button.approve",
                            icon: "fa fa-check",
                            taskPermissionName:"APPROVE_SHAREACCOUNT"
                        }
                    ],
                        options: [
                            {
                                name: "button.reject",
                                taskPermissionName:"REJECT_SHAREACCOUNT"
                            },
                            {
                                name: "button.delete",
                                taskPermissionName:"DELETE_SHAREACCOUNT"
                            }
                        ]
                    };
                }

                if (data.status.value == "Approved") {
                    scope.buttons = { singlebuttons: [
                        {
                            name: "button.undoapproval",
                            icon: "fa fa-undo",
                            taskPermissionName:"APPROVALUNDO_SHAREACCOUNT"
                        },
                        {
                            name: "button.activate",
                            icon: "fa fa-check",
                            taskPermissionName:"ACTIVATE_SHAREACCOUNT"
                        }
                    ]
                    };
                }
                if (data.status.value == "Active") {
                    if(scope.sharesPendingForApproval) {

                        scope.buttons = { singlebuttons: [
                            {
                                name:"button.applyadditionalshares",
                                icon:"fa fa-arrow-right",
                                taskPermissionName:"APPLYADDITIONAL_SHAREACCOUNT"
                            },
                            {
                                name:"button.approveadditionalshares",
                                icon:"fa fa-arrow-right",
                                taskPermissionName:"APPROVEADDITIONAL_SHAREACCOUNT"
                            },
                            {
                                name:"button.rejectadditionalshares",
                                icon:"fa fa-arrow-right",
                                taskPermissionName:"REJECTADDITIONAL_SHAREACCOUNT"
                            },
                            {
                                name: "button.redeemshares",
                                icon: "fa fa-arrow-left",
                                taskPermissionName:"WITHDRAW_SAVINGSACCOUNT"
                            },
                        ],
                            options: [
                                {
                                    name: "button.close",
                                    taskPermissionName:"CLOSE_SHAREACCOUNT"
                                }
                            ]

                        };

                    }else {
                        scope.buttons = { singlebuttons: [
                            {
                                name:"button.applyadditionalshares",
                                icon:"fa fa-arrow-right",
                                taskPermissionName:"APPLYADDITIONAL_SHAREACCOUNT"
                            },
                            {
                                name: "button.redeemshares",
                                icon: "fa fa-arrow-left",
                                taskPermissionName:"WITHDRAW_SAVINGSACCOUNT"
                            },
                        ],
                            options: [
                                {
                                    name: "button.close",
                                    taskPermissionName:"CLOSE_SHAREACCOUNT"
                                }
                            ]

                        };
                    }

                    if (data.charges) {
                        for (var i in scope.charges) {
                            if (scope.charges[i].name == "Annual fee - INR") {
                                scope.buttons.options.push({
                                    name: "button.applyAnnualFees",
                                    taskPermissionName:"APPLYANNUALFEE_SAVINGSACCOUNT"
                                });
                                scope.annualChargeId = scope.charges[i].id;
                            }
                        }
                    }
                }
            });

            scope.viewJournalEntries = function(){
                location.path("/searchtransaction/").search({savingsId: scope.shareaccountdetails.id});
            };

            scope.viewDataTable = function (registeredTableName,data){
                if (scope.datatabledetails.isMultirow) {
                    location.path("/viewdatatableentry/"+registeredTableName+"/"+scope.shareaccountdetails.id+"/"+data.row[0]);
                }else{
                    location.path("/viewsingledatatableentry/"+registeredTableName+"/"+scope.shareaccountdetails.id);
                }
            };

            scope.viewSavingDetails = function () {

                scope.report = false;
                scope.hidePentahoReport = true;
                scope.viewReport = false;

            };

            scope.viewPrintDetails = function () {
                //scope.printbtn = true;
                scope.report = true;
                scope.viewTransactionReport = false;
                scope.viewReport = true;
                scope.hidePentahoReport = true;
                scope.formData.outputType = 'PDF';
                scope.baseURL = $rootScope.hostUrl + API_VERSION + "/runreports/" + encodeURIComponent("Client Saving Transactions");
                scope.baseURL += "?output-type=" + encodeURIComponent(scope.formData.outputType) + "&tenantIdentifier=" + $rootScope.tenantIdentifier+"&locale="+scope.optlang.code;

                var reportParams = "";
                scope.startDate = dateFilter(scope.date.fromDate, 'yyyy-MM-dd');
                scope.endDate = dateFilter(scope.date.toDate, 'yyyy-MM-dd');
                var paramName = "R_startDate";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.startDate)+ "&";
                paramName = "R_endDate";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.endDate)+ "&";
                paramName = "R_savingsAccountId";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(scope.shareaccountdetails.accountNo);
                if (reportParams > "") {
                    scope.baseURL += "&" + reportParams;
                }

                // allow untrusted urls for iframe http://docs.angularjs.org/error/$sce/insecurl
                scope.viewReportDetails = $sce.trustAsResourceUrl(scope.baseURL);

            };

            scope.viewSavingsTransactionReceipts = function (transactionId) {
                scope.report = true;
                scope.viewTransactionReport = true;
                scope.viewSavingReport = false;
                scope.printbtn = false;
                scope.viewReport = true;
                scope.hidePentahoReport = true;
                scope.formData.outputType = 'PDF';
                scope.baseURL = $rootScope.hostUrl + API_VERSION + "/runreports/" + encodeURIComponent("Savings Transaction Receipt");
                scope.baseURL += "?output-type=" + encodeURIComponent(scope.formData.outputType) + "&tenantIdentifier=" + $rootScope.tenantIdentifier+"&locale="+scope.optlang.code;

                var reportParams = "";
                var paramName = "R_transactionId";
                reportParams += encodeURIComponent(paramName) + "=" + encodeURIComponent(transactionId);
                if (reportParams > "") {
                    scope.baseURL += "&" + reportParams;
                }
                // allow untrusted urls for iframe http://docs.angularjs.org/error/$sce/insecurl
                scope.viewReportDetails = $sce.trustAsResourceUrl(scope.baseURL);

            };
            scope.printReport = function () {
                window.print();
                window.close();
            };

            scope.deleteAll = function (apptableName, entityId) {
                resourceFactory.DataTablesResource.delete({datatablename: apptableName, entityId: entityId, genericResultSet: 'true'}, {}, function (data) {
                    route.reload();
                });
            };

            scope.modifyTransaction = function (accountId, transactionId) {
                location.path('/savingaccount/' + accountId + '/modifytransaction?transactionId=' + transactionId);
            };

            scope.transactionSort = {
                column: 'date',
                descending: true
            };

            scope.changeTransactionSort = function(column) {
                var sort = scope.transactionSort;
                if (sort.column == column) {
                    sort.descending = !sort.descending;
                } else {
                    sort.column = column;
                    sort.descending = true;
                }
            };

            scope.checkStatus = function(){
                if(scope.status == 'Active' || scope.status == 'Closed' || scope.status == 'Transfer in progress' ||
                    scope.status == 'Transfer on hold' || scope.status == 'Premature Closed' || scope.status == 'Matured'){
                    return true;
                }
                return false;
            };

        }
    });
    mifosX.ng.application.controller('ViewShareAccountController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', '$route', 'dateFilter', '$sce', '$rootScope', 'API_VERSION', mifosX.controllers.ViewShareAccountController]).run(function ($log) {
        $log.info("ViewShareAccountController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AccountNumberPreferencesController: function (scope, resourceFactory, location) {
            scope.routeTo = function (id) {
                location.path('/viewaccountnumberpreferences/' + id);
            }

            if (!scope.searchCriteria.anp) {
                scope.searchCriteria.anp = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.anp || '';

            scope.onFilter = function () {
                scope.searchCriteria.anp = scope.filterText;
                scope.saveSC();
            }

            resourceFactory.accountNumberResources.getAllPreferences(function (data) {
                scope.preferences = data;
            });
        }
    });
    mifosX.ng.application.controller('AccountNumberPreferencesController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.AccountNumberPreferencesController]).run(function ($log) {
        $log.info("AccountNumberPreferencesController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddAccountNumberPreferencesController: function (scope, resourceFactory, location, routeParams) {
            scope.formData = {};
            scope.addPrefix = true;

            resourceFactory.accountNumberTemplateResource.get(function(data){
                scope.data = data;
                scope.accountTypeOptions = data.accountTypeOptions;
            });

            scope.getPrefixTypeOptions = function(accountType){
                if(accountType == 1){
                    scope.prefixTypeOptions = scope.data.prefixTypeOptions["accountType.client"];
                }
                if(accountType == 2){
                    scope.prefixTypeOptions = scope.data.prefixTypeOptions["accountType.loan"];
                }
                if(accountType == 3){
                    scope.prefixTypeOptions = scope.data.prefixTypeOptions["accountType.savings"];
                }
                if(accountType == 4){
                    scope.prefixTypeOptions = scope.data.prefixTypeOptions["accountType.center"];
                }
                if(accountType == 5){
                    scope.prefixTypeOptions = scope.data.prefixTypeOptions["accountType.group"];
                }
            }

            scope.cancel = function(){
                location.path('/accountnumberpreferences');
            }

            scope.submit = function(){
                resourceFactory.accountNumberResources.save(scope.formData,function (data) {
                    scope.resourceId = data.resourceId;
                    location.path('/viewaccountnumberpreferences/' + scope.resourceId );
                });
            }
        }
    });
    mifosX.ng.application.controller('AddAccountNumberPreferencesController', ['$scope', 'ResourceFactory', '$location','$routeParams',mifosX.controllers.AddAccountNumberPreferencesController]).run(function ($log) {
        $log.info("AddAccountNumberPreferencesController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        AddCodeController: function (scope, resourceFactory, location) {

            scope.submit = function () {
                resourceFactory.codeResources.save(this.formData, function (data) {
                    location.path('/viewcode/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('AddCodeController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.AddCodeController]).run(function ($log) {
        $log.info("AddCodeController initialized");
    });
}(mifosX.controllers || {}));

;(function (module) {
    mifosX.controllers = _.extend(module, {
        AuditController: function (scope, resourceFactory, paginatorService, dateFilter, location) {
            scope.formData = [];
            scope.isCollapsed = true;
            scope.date = {};
            scope.audit = [];
            scope.searchData = [];

            scope.routeTo = function (id) {
                location.path('viewaudit/' + id);
            };

            resourceFactory.auditResource.get({templateResource: 'searchtemplate'}, function (data) {
                scope.template = data;
            });

            scope.viewUser = function (item) {
                scope.formData.user = item.id;
            };

            if (!scope.searchCriteria.audit) {
                scope.searchCriteria.audit = [null, null, null, null, null, null, null, null, null, null];
                scope.saveSC();
            }
            scope.formData.user = scope.searchCriteria.audit[0];
            scope.date.first = scope.searchCriteria.audit[1];
            scope.date.third = scope.searchCriteria.audit[2];
            scope.formData.status = scope.searchCriteria.audit[3];
            if (scope.searchCriteria.audit[4])
                scope.formData.action = scope.searchCriteria.audit[4];
            scope.formData.resourceId = scope.searchCriteria.audit[5];
            scope.date.second = scope.searchCriteria.audit[6];
            scope.date.fourth = scope.searchCriteria.audit[7];
            if (scope.searchCriteria.audit[8])
                scope.formData.entity = scope.searchCriteria.audit[8];
            if (scope.searchCriteria.audit[9])
                scope.formData.checkedBy = scope.searchCriteria.audit[9];

            var fetchFunction = function (offset, limit, callback) {
                scope.isCollapsed = true;
                scope.displayResults = true;
                //date format not used here since the underlying api does not support localization of dates
                var reqFirstDate = dateFilter(scope.date.first, 'yyyy-MM-dd');
                var reqSecondDate = dateFilter(scope.date.second, 'yyyy-MM-dd');
                var reqThirdDate = dateFilter(scope.date.third, 'yyyy-MM-dd');
                var reqFourthDate = dateFilter(scope.date.fourth, 'yyyy-MM-dd');

                var params = {};
                params.offset = offset;
                params.limit = limit;
                params.paged = true;

                if (scope.formData.user) {
                    if (scope.formData.user != parseInt(scope.formData.user)) {
                        for (var i = 0; i < scope.template.appUsers.length; i++) {
                            if (scope.formData.user == scope.template.appUsers[i].username)
                                scope.formData.user = scope.template.appUsers[i].id;
                        }
                    }
                    params.makerId = scope.formData.user;
                    scope.searchCriteria.audit[0] = params.makerId;
                } else
                    scope.searchCriteria.audit[0] = null;

                if (scope.date.first) {
                    params.makerDateTimeFrom = reqFirstDate;
                    scope.searchCriteria.audit[1] = params.makerDateTimeFrom;
                } else
                    scope.searchCriteria.audit[1] = null;

                if (scope.date.third) {
                    params.checkerDateTimeFrom = reqThirdDate;
                    scope.searchCriteria.audit[2] = params.checkerDateTimeFrom;
                } else
                    scope.searchCriteria.audit[2] = null;

                if (scope.formData.status) {
                    params.processingResult = scope.formData.status;
                    scope.searchCriteria.audit[3] = params.processingResult;
                } else
                    scope.searchCriteria.audit[3] = null;

                if (scope.formData.action) {
                    params.actionName = scope.formData.action;
                    scope.searchCriteria.audit[4] = params.actionName;
                } else
                    scope.searchCriteria.audit[4] = null;

                if (scope.formData.resourceId) {
                    params.resourceId = scope.formData.resourceId;
                    scope.searchCriteria.audit[5] = params.resourceId;
                } else
                    scope.searchCriteria.audit[5] = null;

                if (scope.date.second) {
                    params.makerDateTimeTo = reqSecondDate;
                    scope.searchCriteria.audit[6] = params.makerDateTimeTo;
                } else
                    scope.searchCriteria.audit[6] = null;

                if (scope.date.fourth) {
                    params.checkerDateTimeTo = reqFourthDate;
                    scope.searchCriteria.audit[7] = params.checkerDateTimeTo;
                } else
                    scope.searchCriteria.audit[7] = null;

                if (scope.formData.entity) {
                    params.entityName = scope.formData.entity;
                    scope.searchCriteria.audit[8] = params.entityName;
                } else
                    scope.searchCriteria.audit[8] = null;

                if (scope.formData.checkedBy) {
                    params.checkerId = scope.formData.checkedBy;
                    scope.searchCriteria.audit[9] = params.checkerId;
                } else
                    scope.searchCriteria.audit[9] = null;

                scope.saveSC();
                resourceFactory.auditResource.search(params, function (data) {
                    scope.searchData.pageItems = data.pageItems;

                    if (scope.searchData.pageItems == '')
                        scope.flag = false;
                    else
                        scope.flag = true;

                    scope.row = [];
                    scope.csvData = [];

                    scope.row = ['Id', 'Resource Id', 'Status', 'Office', 'Made on', 'Maker', 'Checked on', 'Checker', 'Entity', 'Action', 'Client'];
                    scope.csvData.push(scope.row);
                    for (var i in scope.searchData.pageItems) {
                        scope.row = [scope.searchData.pageItems[i].id, scope.searchData.pageItems[i].resourceId, scope.searchData.pageItems[i].processingResult, scope.searchData.pageItems[i].officeName, dateFilter(scope.searchData.pageItems[i].madeOnDate, 'yyyy-MM-dd'), scope.searchData.pageItems[i].maker, dateFilter(scope.searchData.pageItems[i].checkedOnDate, 'yyyy-MM-dd hh:mm:ss'), scope.searchData.pageItems[i].checker, scope.searchData.pageItems[i].entityName, scope.searchData.pageItems[i].actionName, scope.searchData.pageItems[i].clientName];
                        scope.csvData.push(scope.row);
                    }
                    callback(data);
                });
            };

            scope.clearFilters = function () {
                scope.formData.user = null;
                scope.date.first = null;
                scope.date.third = null;
                scope.formData.status = null;
                scope.formData.action = "";
                scope.formData.resourceId = null;
                scope.date.second = null;
                scope.date.fourth = null;
                scope.formData.entity = "";
                scope.formData.checkedBy = "";
            };

            scope.searchAudit = function () {
                scope.audit = paginatorService.paginate(fetchFunction, 14);
            };
            scope.searchAudit();
        }
    });
    mifosX.ng.application.controller('AuditController', ['$scope', 'ResourceFactory', 'PaginatorService', 'dateFilter', '$location', mifosX.controllers.AuditController]).run(function ($log) {
        $log.info("AuditController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CodeController: function (scope, resourceFactory, location) {
            scope.codes = [];

            scope.routeTo = function (id) {
                location.path('/viewcode/' + id);
            }

            if (!scope.searchCriteria.codes) {
                scope.searchCriteria.codes = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.codes || '';

            scope.onFilter = function () {
                scope.searchCriteria.codes = scope.filterText;
                scope.saveSC();
            };

            scope.CodesPerPage = 15;
            resourceFactory.codeResources.getAllCodes(function (data) {
                scope.codes = data;
            });
        }
    });
    mifosX.ng.application.controller('CodeController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.CodeController]).run(function ($log) {
        $log.info("CodeController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateDataTableController: function (scope, routeParams, resourceFactory, location) {

            scope.columns = [];
            scope.columnnameerror = false;
            scope.columntypeerror = false;
            scope.datatableTemplate = {};
            scope.labelerror = "requiredfield";

            resourceFactory.codeResources.getAllCodes({}, function (data) {
                scope.codes = data;
            });

            scope.addColumn = function () {
                if (scope.datatableTemplate.columnName && scope.datatableTemplate.columnType) {
                    scope.columnnameerror = false;
                    scope.columntypeerror = false;
                    scope.columns.push({name: scope.datatableTemplate.columnName, type: scope.datatableTemplate.columnType, mandatory: false});
                    scope.datatableTemplate.columnName = undefined;
                    scope.datatableTemplate.columnType = undefined;
                } else if (!scope.datatableTemplate.columnName) {
                    scope.errorDetails = [];
                    scope.columnnameerror = true;
                    scope.labelerror = "columnnameerr";
                } else if (scope.datatableTemplate.columnName) {
                    scope.errorDetails = [];
                    scope.columntypeerror = true;
                    scope.labelerror = "columntypeerr";
                }
            };

            scope.removeColumn = function (index) {
                scope.columns.splice(index, 1);
            };

            scope.updateDepenedencies = function (index) {
                if (scope.columns[index].type != 'string') {
                    scope.columns[index].length = undefined;
                }
                if (scope.columns[index].type != 'dropdown') {
                    scope.columns[index].code = undefined;
                }
            };

            scope.submit = function () {
                if (scope.columns.length == 0) {
                    scope.errorDetails = [];
                    scope.errorDetails.push({code: 'error.msg.click.on.add.to.add.columns'});
                } else {
                    delete scope.errorDetails;
                    scope.formData.multiRow = scope.formData.multiRow || false;
                    scope.formData.columns = scope.columns;
                    resourceFactory.DataTablesResource.save(this.formData, function (data) {
                        location.path('/viewdatatable/' + data.resourceIdentifier);
                    });
                }
            };
        }
    });
    mifosX.ng.application.controller('CreateDataTableController', ['$scope', '$routeParams', 'ResourceFactory', '$location', mifosX.controllers.CreateDataTableController]).run(function ($log) {
        $log.info("CreateDataTableController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateHookController: function (scope, resourceFactory, location) {
            scope.templates = [];
            scope.groupings = [];
            scope.schemaInputs = [];
            scope.events = [];
            scope.ugdTemplateEntities = [];
            scope.ugdTemplates = [];
            scope.ugdTemplate = {};
            scope.showUgdTemplatesDropdown = false;

            resourceFactory.templateResource.get(function (data) {
                scope.allUgdTemplates = data;
            });

            resourceFactory.hookTemplateResource.get(function (data) {
                scope.templates = data.templates;
                scope.groupings = data.groupings;
                for (var i in data.templates) {
                    if(data.templates[i].name === "Web")
                        scope.template = data.templates[i];
                }
            });

            resourceFactory.templateResource.getTemplateDetails({resourceType: 'template'}, function (data) {
                scope.ugdTemplateEntities = data.entities;
            });

            scope.changeTemplate = function () {
                scope.schemaInputs = [];
                scope.changeEntity(scope.entity.name);
            };

            scope.resetActions = function () {
                scope.action = {};
            };

            scope.addEvent = function () {
                scope.events.push({ entityName : scope.entity.name, actionName : scope.action});
            };

            scope.deleteEvent = function (index) {
                scope.events.splice(index, 1);
            }

            scope.changeEntity = function(name) {
                scope.ugdTemplate = [];
                scope.ugdTemplates = [];
                for (var i = 0; i < scope.allUgdTemplates.length; ++i) {
                    if (scope.allUgdTemplates[i].entity === name.toLowerCase() &&
                        scope.allUgdTemplates[i].type === "SMS") {
                        scope.ugdTemplates.push({name: scope.allUgdTemplates[i].name, id: scope.allUgdTemplates[i].id});
                    }
                }
                scope.showUgdTemplatesDropdown = scope.ugdTemplateEntities.filter(function(entity) {
                    return entity.name === name.toLowerCase() &&
                    scope.template.name === "SMS Bridge" &&
                    scope.ugdTemplates.length > 0;
                });
            }

            scope.submit = function () {
                this.formData.name = scope.template.name;
                this.formData.config = {};
                this.formData.events = scope.events;
                if (scope.ugdTemplate !== null) {
                    this.formData.templateId = scope.ugdTemplate.id;
                }
                if (scope.template.schema.length > 0) {
                    for (var i in scope.template.schema) {
                        this.formData.config[scope.template.schema[i].fieldName] = scope.schemaInputs[i];
                    }
                }
                resourceFactory.hookResources.save(this.formData, function (data) {
                    location.path('/viewhook/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateHookController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.CreateHookController]).run(function ($log) {
        $log.info("CreateHookController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateReportController: function (scope, resourceFactory, location) {
            scope.formData = {};
            scope.reportParameters = [];
            scope.flag = false;
            resourceFactory.reportsResource.getReportDetails({resourceType: 'template'}, function (data) {
                scope.reportdetail = data;
                scope.formData.reportType = data.allowedReportTypes[0];
            });

            scope.parameterSelected = function (allowedParameterId) {
                scope.flag = true;
                for (var i in scope.reportdetail.allowedParameters) {
                    if (scope.reportdetail.allowedParameters[i].id == allowedParameterId) {
                        scope.reportParameters.push({parameterId: allowedParameterId,
                            id: "",
                            allowedParameterName: scope.reportdetail.allowedParameters[i].parameterName
                        });
                    }
                }
                scope.allowedParameterId = '';
            }

            function deepCopy(obj) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    var out = [], i = 0, len = obj.length;
                    for (; i < len; i++) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                if (typeof obj === 'object') {
                    var out = {}, i;
                    for (i in obj) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                return obj;
            }

            scope.deleteParameter = function (index) {
                scope.reportParameters.splice(index, 1);
            }

            scope.submit = function () {
                scope.temp = deepCopy(scope.reportParameters);
                for (var i in scope.temp) {
                    delete scope.temp[i].allowedParameterName;
                }
                this.formData.reportParameters = scope.temp;
                resourceFactory.reportsResource.save(this.formData, function (data) {
                    location.path('/system/viewreport/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('CreateReportController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.CreateReportController]).run(function ($log) {
        $log.info("CreateReportController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        DataTableController: function (scope, resourceFactory, location) {
            scope.routeTo = function (id) {
                location.path('/viewdatatable/' + id);
            };

            if (!scope.searchCriteria.datatables) {
                scope.searchCriteria.datatables = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.datatables || '';

            scope.onFilter = function () {
                scope.searchCriteria.datatables = scope.filterText;
                scope.saveSC();
            };

            scope.DataTablesPerPage = 15;
            resourceFactory.DataTablesResource.getAllDataTables(function (data) {
                scope.datatables = data;
            });
        }
    });
    mifosX.ng.application.controller('DataTableController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.DataTableController]).run(function ($log) {
        $log.info("DataTableController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        DataTableEntryController: function (scope, location, routeParams, route, resourceFactory, $uibModal, dateFilter) {

            if (routeParams.tableName) {
                scope.tableName = routeParams.tableName;
            }
            if (routeParams.entityId) {
                scope.entityId = routeParams.entityId;
            }
            if (routeParams.resourceId) {
                scope.resourceId = routeParams.resourceId;
            }
            scope.formDat = {};
            scope.columnHeaders = [];
            scope.formData = {};
            scope.isViewMode = true;
            scope.tf = "HH:mm";
            if(routeParams.mode && routeParams.mode == 'edit'){
                scope.isViewMode = false;
            }

            var reqparams = {datatablename: scope.tableName, entityId: scope.entityId, genericResultSet: 'true'};
            if (scope.resourceId) {
                reqparams.resourceId = scope.resourceId;
            }

            resourceFactory.DataTablesResource.getTableDetails(reqparams, function (data) {
                for (var i in data.columnHeaders) {
                    if (data.columnHeaders[i].columnCode) {
                        //logic for display codeValue instead of codeId in view datatable details
                        for (var j in data.columnHeaders[i].columnValues) {
                            if(data.columnHeaders[i].columnDisplayType=='CODELOOKUP'){
                                if (data.data[0].row[i] == data.columnHeaders[i].columnValues[j].id) {
                                    data.columnHeaders[i].value = data.columnHeaders[i].columnValues[j].value;
                                }
                            } else if(data.columnHeaders[i].columnDisplayType=='CODEVALUE'){
                                if (data.data[0].row[i] == data.columnHeaders[i].columnValues[j].value) {
                                    data.columnHeaders[i].value = data.columnHeaders[i].columnValues[j].value;
                                }
                            }
                        }
                    } else {
                        data.columnHeaders[i].value = data.data[0].row[i];
                    }
                }
                scope.columnHeaders = data.columnHeaders;
                if(routeParams.mode && routeParams.mode == 'edit'){
                    scope.editDatatableEntry();
                }
            });

            //return input type
            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.dateTimeFormat = function () {
                for (var i in scope.columnHeaders) {
                    if(scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                        return scope.df + " " + scope.tf;
                    }
                }
                return scope.df;
            };

            scope.editDatatableEntry = function () {
                scope.isViewMode = false;
                var colName = scope.columnHeaders[0].columnName;
                if (colName == 'id') {
                    scope.columnHeaders.splice(0, 1);
                }

                colName = scope.columnHeaders[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    scope.columnHeaders.splice(0, 1);
                    scope.isCenter = colName == 'center_id' ? true : false;
                }

                for (var i in scope.columnHeaders) {

                    if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                        scope.formDat[scope.columnHeaders[i].columnName] = scope.columnHeaders[i].value;
                    } else if (scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                        scope.formDat[scope.columnHeaders[i].columnName] = {};
                        if(scope.columnHeaders[i].value != null) {
                            scope.formDat[scope.columnHeaders[i].columnName] = {
                                date: dateFilter(new Date(scope.columnHeaders[i].value), scope.df),
                                time: new Date(scope.columnHeaders[i].value)
                            };
                        }
                    } else {
                        scope.formData[scope.columnHeaders[i].columnName] = scope.columnHeaders[i].value;
                    }
                    if (scope.columnHeaders[i].columnCode) {
                        for (var j in scope.columnHeaders[i].columnValues) {
                            if (scope.columnHeaders[i].value == scope.columnHeaders[i].columnValues[j].value) {
                                if(scope.columnHeaders[i].columnDisplayType=='CODELOOKUP'){
                                    scope.formData[scope.columnHeaders[i].columnName] = scope.columnHeaders[i].columnValues[j].id;
                                } else if(scope.columnHeaders[i].columnDisplayType=='CODEVALUE'){
                                    scope.formData[scope.columnHeaders[i].columnName] = scope.columnHeaders[i].columnValues[j].value;
                                }
                            }
                        }
                    }
                }
            };
            scope.deleteDatatableEntry = function () {
                $uibModal.open({
                    templateUrl: 'deletedatatable.html',
                    controller: DatatableDeleteCtrl
                });
            };
            var DatatableDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.DataTablesResource.delete(reqparams, {}, function (data) {
                        var destination = "";
                        if (data.loanId) {
                            destination = '/viewloanaccount/' + data.loanId;
                        } else if (data.savingsId) {
                            destination = '/viewsavingaccount/' + data.savingsId;
                        } else if (data.clientId) {
                            destination = '/viewclient/' + data.clientId;
                        } else if (data.groupId) {
                            if (scope.isCenter) {
                                destination = '/viewcenter/' + data.groupId;
                            } else {
                                destination = '/viewgroup/' + data.groupId;
                            }
                        } else if (data.officeId) {
                            destination = '/viewoffice/' + data.officeId;
                        }
                        $uibModalInstance.close('delete');
                        location.path(destination);
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            scope.cancel = function () {
                if(routeParams.mode){
                    window.history.back();
                } else{
                    route.reload();
                }

            };

            scope.submit = function () {
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.dateTimeFormat();
                for (var i = 0; i < scope.columnHeaders.length; i++) {
                    if (!_.contains(_.keys(this.formData), scope.columnHeaders[i].columnName)) {
                        this.formData[scope.columnHeaders[i].columnName] = "";
                    }
                    if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                        this.formData[scope.columnHeaders[i].columnName] = dateFilter(this.formDat[scope.columnHeaders[i].columnName], this.formData.dateFormat);
                    } else if(scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                        this.formData[scope.columnHeaders[i].columnName] = dateFilter(this.formDat[scope.columnHeaders[i].columnName].date, scope.df) + " " +
                        dateFilter(this.formDat[scope.columnHeaders[i].columnName].time, scope.tf);
                    }
                }
                resourceFactory.DataTablesResource.update(reqparams, this.formData, function (data) {
                    var destination = "";
                    if (data.loanId) {
                        destination = '/viewloanaccount/' + data.loanId;
                    } else if (data.savingsId) {
                        destination = '/viewsavingaccount/' + data.savingsId;
                    } else if (data.clientId) {
                        destination = '/viewclient/' + data.clientId;
                    } else if (data.groupId) {
                        if (scope.isCenter) {
                            destination = '/viewcenter/' + data.groupId;
                        } else {
                            destination = '/viewgroup/' + data.groupId;
                        }
                    } else if (data.officeId) {
                        destination = '/viewoffice/' + data.officeId;
                    }
                    location.path(destination);
                });
            };

        }
    });
    mifosX.ng.application.controller('DataTableEntryController', ['$scope', '$location', '$routeParams', '$route', 'ResourceFactory', '$uibModal', 'dateFilter', mifosX.controllers.DataTableEntryController]).run(function ($log) {
        $log.info("DataTableEntryController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditAccountNumberPreferencesController: function (scope,resourceFactory, location,routeParams) {
            scope.resourceId = routeParams.id;
            scope.addPrefix = false;
                resourceFactory.accountNumberResources.getPrefixType({accountNumberFormatId:scope.resourceId},function(data){
                    scope.accountType = data["accountType"].value;
                    scope.formData ={
                        prefixType:data.prefixType.id
                    }
                    scope.prefixTypeOptions = data.prefixTypeOptions[data["accountType"].code]
                    if(scope.formData.prefixType != null){
                        scope.addPrefix = true;
                    }
                });

            scope.cancel = function(){
                location.path('/accountnumberpreferences');
            }
            scope.submit = function(){
                resourceFactory.accountNumberResources.put({accountNumberFormatId:scope.resourceId},scope.formData,function(data){
                    location.path('/viewaccountnumberpreferences/' + data.resourceId );
                });
            }
        }
    });
    mifosX.ng.application.controller('EditAccountNumberPreferencesController', ['$scope', 'ResourceFactory', '$location','$routeParams',mifosX.controllers.EditAccountNumberPreferencesController]).run(function ($log) {
        $log.info("EditAccountNumberPreferencesController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditCodeController: function (scope, routeParams, resourceFactory, location) {
            scope.codevalues = [];
            scope.newcodevalues = [];
            scope.newEle = {};
            scope.errorDetails = [];
            scope.codevalueerror = false;
            scope.newEle.isActive = true;
            resourceFactory.codeResources.get({codeId: routeParams.id}, function (data) {
                scope.code = data;
                scope.codeId = data.id;

            });
            resourceFactory.codeValueResource.getAllCodeValues({codeId: routeParams.id}, function (data) {
                scope.codevalues = data;

            });

            scope.addCv = function () {
                if (scope.newEle != undefined && scope.newEle.hasOwnProperty('name')) {
                    //scope.codevalueerror = true;
                    resourceFactory.codeValueResource.save({codeId: routeParams.id}, this.newEle, function (data) {
                        scope.stat = false;
                        location.path('/viewcode/' + routeParams.id);
                    });
                } else if (!scope.newEle.name) {
                    scope.codevalueerror = true;
                    scope.labelerror = "codevalueerror";
                    scope.errorDetails = [];
                    var errorObj = new Object();
                    errorObj.args = {
                        params: []
                    };
                    errorObj.args.params.push({value:'label.input.codevalue'});
                    scope.errorDetails.push(errorObj);
                }

            };

            scope.deleteCv = function (id) {
                resourceFactory.codeValueResource.remove({codeId: routeParams.id, codevalueId: id}, {}, function (data) {
                    scope.stat = false;
                    location.path('/viewcode/' + routeParams.id);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditCodeController', ['$scope', '$routeParams', 'ResourceFactory', '$location', mifosX.controllers.EditCodeController]).run(function ($log) {
        $log.info("EditCodeController initialized");
    });
}(mifosX.controllers || {}));


;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditDataTableController: function (scope, routeParams, resourceFactory, location) {

            scope.columns = [];
            scope.dropColumns = [];
            scope.formData = {};
            scope.columnnameerror = false;
            scope.columntypeerror = false;
            scope.datatableTemplate = {};

            resourceFactory.codeResources.getAllCodes({}, function (data) {
                scope.codes = data;
            });

            resourceFactory.DataTablesResource.getTableDetails({datatablename: routeParams.tableName}, function (data) {
                scope.datatable = data;

                scope.formData.apptableName = data.applicationTableName;

                var temp = [];
                var colName = data.columnHeaderData[0].columnName;
                if (colName == 'id') {
                    data.columnHeaderData.splice(0, 1);
                }
                colName = data.columnHeaderData[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    data.columnHeaderData.splice(0, 1);
                }

                for (var i in data.columnHeaderData) {

                    data.columnHeaderData[i].originalName = data.columnHeaderData[i].columnName;
                    if (data.columnHeaderData[i].columnName.indexOf("_cd_") > 0) {
                        temp = data.columnHeaderData[i].columnName.split("_cd_");
                        data.columnHeaderData[i].columnName = temp[1];
                        data.columnHeaderData[i].code = temp[0];
                    }

                    var tempColumn = {name: data.columnHeaderData[i].columnName, mandatory: !data.columnHeaderData[i].isColumnNullable};
                    tempColumn.originalName = data.columnHeaderData[i].originalName;
                    var colType = data.columnHeaderData[i].columnDisplayType.toLowerCase();

                    if (colType == 'integer') {
                        colType = 'number';
                    }
                    else if (colType == 'codelookup') {
                        colType = 'dropdown';
                    }
                    tempColumn.type = colType;

                    if (colType == 'string') {
                        tempColumn.length = data.columnHeaderData[i].columnLength;
                    }

                    if (data.columnHeaderData[i].columnCode) {
                        tempColumn.code = data.columnHeaderData[i].columnCode;
                    }

                    scope.columns.push(tempColumn);
                }
            });

            scope.addColumn = function () {
                if (scope.datatableTemplate.columnName && scope.datatableTemplate.columnType) {
                    scope.columnnameerror = false;
                    scope.columntypeerror = false;
                    scope.columns.push({name: scope.datatableTemplate.columnName, type: scope.datatableTemplate.columnType, mandatory: false});
                    scope.datatableTemplate.columnName = undefined;
                    scope.datatableTemplate.columnType = undefined;
                } else if (!scope.datatableTemplate.columnName) {
                    scope.columnnameerror = true;
                    scope.labelerror = "columnnameerr";
                } else if (scope.datatableTemplate.columnName) {
                    scope.columntypeerror = true;
                    scope.labelerror = "columntypeerr";
                }
            };

            scope.removeColumn = function (index) {
                if (scope.columns[index].originalName) {
                    scope.dropColumns.push({name: scope.columns[index].originalName});
                }
                scope.columns.splice(index, 1);
            };

            scope.updateDepenedencies = function (index) {
                if (scope.columns[index].type != 'string') {
                    scope.columns[index].length = undefined;
                }
                if (scope.columns[index].type != 'dropdown') {
                    scope.columns[index].code = undefined;
                }
            };

            scope.submit = function () {

                scope.formData.addColumns = [];
                scope.formData.changeColumns = [];

                if (scope.dropColumns.length > 0) {
                    scope.formData.dropColumns = scope.dropColumns;
                }

                for (var i in scope.columns) {

                    if (scope.columns[i].originalName) {
                        //This value should be updated based on the configuration
                        /*if (scope.columns[i].newName) {
                         if (scope.columns[i].type == "dropdown") {
                         scope.columns[i].columnName = scope.columns[i].originalName;
                         scope.columns[i].newName = scope.columns[i].columnCode + "_cd_" + scope.columns[i].newName;
                         }
                         }*/

                        delete scope.columns[i].originalName;
                        delete scope.columns[i].type;

                        if (scope.columns[i].code) {
                            scope.columns[i].newCode = scope.columns[i].newCode || scope.columns[i].code;
                        }

                        if (scope.columns[i].name) {
                            scope.columns[i].newName = scope.columns[i].newName || scope.columns[i].name;
                        }
                        scope.formData.changeColumns.push(scope.columns[i]);

                    } else {
                        scope.formData.addColumns.push(scope.columns[i]);
                    }
                }

                if (scope.formData.addColumns.length == 0) delete scope.formData.addColumns;
                if (scope.formData.changeColumns.length == 0) delete scope.formData.changeColumns;

                resourceFactory.DataTablesResource.update({datatablename: routeParams.tableName}, this.formData, function (data) {
                    location.path('/viewdatatable/' + data.resourceIdentifier);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditDataTableController', ['$scope', '$routeParams', 'ResourceFactory', '$location', mifosX.controllers.EditDataTableController]).run(function ($log) {
        $log.info("EditDataTableController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditHookController: function (scope, routeParams, resourceFactory, location) {

            scope.formData = {};
            scope.template = {};
            scope.ugdTemplateEntities = [];
            scope.ugdTemplates = [];
            scope.ugdTemplate = [];
            scope.groupings = [];
            scope.schemaInputs = [];
            scope.events = [];
            scope.showUgdTemplatesDropdown = false;

            resourceFactory.templateResource.get(function (data) {
                scope.allUgdTemplates = data;
            });

            resourceFactory.hookResources.get({hookId: routeParams.id, template: 'true'}, function (data) {
                scope.formData.name = data.name;
                scope.formData.displayName = data.displayName;
                scope.formData.isActive = data.isActive;
                scope.template = data.templates[0];
                scope.groupings = data.groupings;
                if (data.templateId) {
                    scope.ugdTemplate.push({name: data.templateName, id: data.templateId});
                }
                scope.events = data.events;
                scope.hookId = data.id;
                for (var i in scope.template.schema) {
                    for(var j in data.config) {
                        if(scope.template.schema[i].fieldName == data.config[j].fieldName)
                            scope.schemaInputs[i] = data.config[j].fieldValue;
                    }
                }
            });

            resourceFactory.templateResource.getTemplateDetails({resourceType: 'template'}, function (data) {
                scope.ugdTemplateEntities = data.entities;
            });

            scope.resetActions = function () {
                scope.action = {};
            };

            scope.addEvent = function () {
                scope.events.push({ entityName : scope.entity.name, actionName : scope.action});
            };

            scope.deleteEvent = function (index) {
                scope.events.splice(index, 1);
            }

            scope.changeEntity = function(name) {
                scope.ugdTemplate = [];
                scope.ugdTemplates = [];
                for (var i = 0; i < scope.allUgdTemplates.length; ++i) {
                    if (scope.allUgdTemplates[i].entity === name.toLowerCase() &&
                        scope.allUgdTemplates[i].type === "SMS") {
                        scope.ugdTemplates.push({name: scope.allUgdTemplates[i].name, id: scope.allUgdTemplates[i].id});
                    }
                }
                scope.showUgdTemplatesDropdown = scope.ugdTemplateEntities.filter(function(entity) {
                    return entity.name === name.toLowerCase() &&
                    scope.template.name === "SMS Bridge" &&
                    scope.ugdTemplates.length > 0;
                });
            }

            scope.submit = function () {
                this.formData.name = scope.template.name;
                this.formData.config = {};
                this.formData.events = scope.events;
                if (scope.ugdTemplate !== null) {
                    this.formData.templateId = scope.ugdTemplate.id;
                }
                if (scope.template.schema.length > 0) {
                    for (var i in scope.template.schema) {
                        this.formData.config[scope.template.schema[i].fieldName] = scope.schemaInputs[i];
                    }
                }

                resourceFactory.hookResources.update({'hookId': scope.hookId}, this.formData, function (data) {
                    location.path('/viewhook/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditHookController', ['$scope', '$routeParams', 'ResourceFactory', '$location', mifosX.controllers.EditHookController]).run(function ($log) {
        $log.info("EditHookController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditReportController: function (scope, resourceFactory, location, routeParams) {
            scope.formData = {};

            resourceFactory.reportsResource.getReportDetails({id: routeParams.id, template: 'true'}, function (data) {
                scope.reportdetail = data;
                scope.reportdetail.reportParameters = data.reportParameters || [];
                scope.formData.useReport = data.useReport;
                scope.formData.reportType = data.reportType;
                scope.disableFields = false;

                if(scope.reportdetail.coreReport == true){
                    scope.disableFields = true;
                }

            });

            scope.parameterSelected = function (allowedParameterId) {
                for (var i in scope.reportdetail.allowedParameters) {
                    if (scope.reportdetail.allowedParameters[i].id == allowedParameterId) {
                        scope.reportdetail.reportParameters.push({parameterId: allowedParameterId,
                            id: "",
                            parameterName: scope.reportdetail.allowedParameters[i].parameterName
                        });
                    }
                }
                scope.allowedParameterId = '';
            }



            function deepCopy(obj) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    var out = [], i = 0, len = obj.length;
                    for (; i < len; i++) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                if (typeof obj === 'object') {
                    var out = {}, i;
                    for (i in obj) {
                        out[i] = arguments.callee(obj[i]);
                    }
                    return out;
                }
                return obj;
            }

            scope.deleteParameter = function (index) {
                scope.reportdetail.reportParameters.splice(index, 1);
            }

            scope.submit = function () {
                if (scope.reportdetail.coreReport === true) {
                    this.formData.reportParameters = scope.temp;
                    this.formData.useReport = scope.reportdetail.useReport;
                } else {
                    scope.temp = deepCopy(scope.reportdetail.reportParameters);
                    scope.reportdetail.reportParameters = scope.temp;

                    for (var i in scope.temp) {
                        delete scope.temp[i].parameterName;
                    }

                    this.formData = {
                        reportName: scope.reportdetail.reportName,
                        reportType: scope.reportdetail.reportType,
                        reportSubType: scope.reportdetail.reportSubType,
                        reportCategory: scope.reportdetail.reportCategory,
                        useReport: scope.reportdetail.useReport,
                        description: scope.reportdetail.description,
                        reportSql: scope.reportdetail.reportSql,
                        reportParameters: scope.reportdetail.reportParameters
                    }
                }
                resourceFactory.reportsResource.update({id: routeParams.id}, this.formData, function (data) {
                    location.path('/system/viewreport/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditReportController', ['$scope', 'ResourceFactory', '$location', '$routeParams', mifosX.controllers.EditReportController]).run(function ($log) {
        $log.info("EditReportController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditSchedulerJobController: function (scope, routeParams, resourceFactory, location) {
            resourceFactory.jobsResource.getJobDetails({jobId: routeParams.id}, function (data) {
                scope.job = data;
                scope.formData = {
                    displayName: data.displayName,
                    cronExpression: data.cronExpression,
                    active: data.active
                }
            });

            scope.cancel = function () {
                location.path('/viewschedulerjob/' + routeParams.id);
            }

            scope.submit = function () {
                resourceFactory.jobsResource.update({jobId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewschedulerjob/' + data.resourceId);
                });
            };
        }
    });
    mifosX.ng.application.controller('EditSchedulerJobController', ['$scope', '$routeParams', 'ResourceFactory', '$location', mifosX.controllers.EditSchedulerJobController]).run(function ($log) {
        $log.info("EditSchedulerJobController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditSurveyController: function (scope, resourceFactory,routeParams, location,WizardHandler) {
            scope.formData ={};
            scope.showQuestions = true;
            scope.id = routeParams.id;
            resourceFactory.surveyResource.get({surveyId : routeParams.id},{},function(data){               
                scope.formData = data;
            });

            scope.showQuestionsForm = function(){
                if(scope.formData.key != undefined && scope.formData.key.length>0 &&  
                    scope.formData.name != undefined && scope.formData.name.length>0 && 
                    scope.formData.countryCode != undefined && scope.formData.countryCode.length>0){
                    scope.showQuestions = true; 
                    if(scope.formData.questionDatas == undefined || scope.formData.questionDatas.length==0){
                        scope.showQuestionForm();
                    }
                }
                
            };

            scope.showQuestionForm = function(){
                var question = {};
                question.responseDatas = [];
                question.responseDatas.push({});
                scope.formData.questionDatas.push(question);
            };

            scope.showOptionForm = function(question){
                question.responseDatas.push({});
            }

            scope.deleteOption = function(question,index){
                question.responseDatas.splice(index,1);
            }

            scope.deleteQuestion = function(index){
                scope.formData.questionDatas.splice(index,1);
            }

            scope.updateSequenceNumber = function(){
                if(scope.formData.questionDatas != undefined && scope.formData.questionDatas.length>0){
                    for(var i=0;i<scope.formData.questionDatas.length;i++){
                        scope.formData.questionDatas[i].sequenceNo = i + 1;
                        if(scope.formData.questionDatas[i].responseDatas != undefined && scope.formData.questionDatas[i].responseDatas.length>0){
                            for(var j=0;j<scope.formData.questionDatas[i].responseDatas.length;j++){
                                scope.formData.questionDatas[i].responseDatas[j].sequenceNo = j + 1;
                            }
                        }
                    }
                }   
            };

            scope.updateSurvey = function(){
                scope.updateSequenceNumber();
                resourceFactory.surveyResource.update({surveyId : routeParams.id},scope.formData,function(data){
                    location.path('/viewsurvey/'+data.resourceId);
                });
            }
        }
    });

    mifosX.ng.application.controller('EditSurveyController', ['$scope', 'ResourceFactory', '$routeParams', '$location','WizardHandler', mifosX.controllers.EditSurveyController]).run(function ($log) {
        $log.info("EditSurveyController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        EntityToEntityMappingController: function (scope, dateFilter, routeParams, route, location, resourceFactory, $uibModal) {
            scope.entityMappings = [];
            scope.formData = {};
            scope.addFormData = {};
            scope.editFormData = {};
            scope.offices = [];
            scope.roles = [];
            scope.products = [];
            scope.savingsproducts = [];
            scope.charges = [];
            scope.selectedMappingType = 0;
            scope.selectedFromId = 0;
            scope.selectedToId = 0;
            scope.hasClickedFilters = false;
            scope.addScreenFilter = false;
            scope.editScreenFilter=false;
            scope.mapId = 0;
            scope.retrieveById = 0;
            scope.showTableData=false;


            scope.showFilters = function (id) {
                scope.selectedMappingType = id;
                scope.hasClickedFilters = false;
                scope.addScreenFilter = false;
                scope.editScreenFilter = false;
                scope.fetchRelatedData(scope.selectedMappingType);
                scope.selectedFromId = 0;
                scope.selectedToId = 0;
            }

            scope.cancelOperation= function(){
               this.showFilteredData();
            };

            scope.fetchRelatedData = function(id){
                scope.retrieveById = id;
                switch (scope.retrieveById) {

                    case 1:
                        resourceFactory.officeResource.getAllOffices(function (data) {
                            scope.offices = data;
                        });
                        resourceFactory.loanProductResource.getAllLoanProducts(function (data) {
                            scope.products = data;
                        });
                        break;
                    case 2:
                        resourceFactory.officeResource.getAllOffices(function (data) {
                            scope.offices = data;
                        });
                        resourceFactory.savingsTemplateResource.get(scope.inparams, function (data) {
                            scope.savingsproducts = data.productOptions;
                        });
                        break;
                    case 3:
                        resourceFactory.officeResource.getAllOffices(function (data) {
                            scope.offices = data;
                        });
                        resourceFactory.chargeResource.getAllCharges(function (data) {
                            scope.charges = data;
                        });
                        break;
                    case 4:
                        resourceFactory.roleResource.getAllRoles(function (data) {
                            scope.roles = data;
                        });
                        resourceFactory.loanProductResource.getAllLoanProducts(function (data) {
                            scope.products = data;
                        });
                        break;
                    case 5:
                        resourceFactory.roleResource.getAllRoles(function (data) {
                            scope.roles = data;
                        });
                        resourceFactory.savingsTemplateResource.get(scope.inparams, function (data) {
                            scope.savingsproducts = data.productOptions;
                        });
                        break;
                }

            }

            scope.showFilteredData = function () {
                scope.hasClickedFilters = true;
                scope.addScreenFilter = false;
                scope.editScreenFilter=false;
                if (scope.formData.selectedFromId > 0)
                    scope.selectedFromId = scope.formData.selectedFromId;
                else
                    scope.selectedFromId = 0;
                if (scope.formData.selectedToId > 0)
                    scope.selectedToId = scope.formData.selectedToId;
                else
                    scope.selectedToId = 0;
                resourceFactory.entityToEntityResource.getAllEntityMapping(
                        {
                            mappingId: scope.selectedMappingType,
                            fromId: scope.selectedFromId,
                            toId: scope.selectedToId
                        }, function (data) {
                            scope.entityMappingsList = data;
                });
            }

            scope.showAddScreen = function (selectedMappingType) {
                scope.relId = selectedMappingType;
                scope.hasClickedFilters = false;
                scope.editScreenFilter=false;
                scope.addScreenFilter=true;
                scope.fetchRelatedData(scope.relId);
                this.addFormData=null;

            }

            scope.showEditScreen = function (mapIdToEdit,selectedMappingType) {
                scope.hasClickedFilters = false;
                scope.addScreenFilter=false;
                scope.editScreenFilter=true;
                scope.relId = selectedMappingType;
                scope.mapIdToEdit=mapIdToEdit;
                resourceFactory.entityMappingResource.getEntityMapValues({'mapId':mapIdToEdit},function (data) {
                    scope.entityMap = data;
                    scope.editFormData.fromId =scope.entityMap[0].fromId;
                    scope.editFormData.toId =scope.entityMap[0].toId;
                    if (scope.entityMap[0].startDate) {
                        var startDate = dateFilter(scope.entityMap[0].startDate, scope.df);
                        scope.editFormData.startDate = new Date(startDate);
                    }
                    if (scope.entityMap[0].endDate) {
                        var endDate = dateFilter(scope.entityMap[0].endDate, scope.df);
                        scope.editFormData.endDate = new Date(endDate);
                    }

                });
                scope.fetchRelatedData(scope.relId);
            }

            scope.deleteMapping = function (mapId) {
                $uibModal.open({
                    templateUrl: 'deletemap.html',
                    controller: mapDeleteCtrl,
                    resolve: {
                        mapId: function () {
                            return mapId;
                        }
                    }
                });
            }

            scope.addEntityMappings = function (relationId) {
                scope.selectedMappingType = selectedMappingType;
                scope.fromId = 0;
                scope.toId = 0;
            }

            scope.submit = function (id) {
                scope.relId=id;
                var startDate = dateFilter(scope.addFormData.startDate, scope.df);
                var endDate = dateFilter(scope.addFormData.endDate, scope.df);

                this.addFormData.locale = scope.optlang.code;
                this.addFormData.dateFormat = scope.df;
                this.addFormData.startDate = startDate;
                this.addFormData.endDate = endDate;

                resourceFactory.entityMappingResource.save(
                    {mapId:scope.relId},this.addFormData, function (data) {
                        scope.showFilteredData();
                    });
            };

            scope.submitEdit = function(editId){
                scope.editMap = editId;
                var startDate = dateFilter(scope.editFormData.startDate, scope.df);
                var endDate = dateFilter(scope.editFormData.endDate, scope.df);

                this.editFormData.locale = scope.optlang.code;
                this.editFormData.dateFormat = scope.df;
                this.editFormData.startDate = startDate;
                this.editFormData.endDate = endDate;

                resourceFactory.entityMappingResource.update({'mapId':scope.editMap},this.editFormData, function (data) {
                    scope.showFilteredData();
                });
            };

            var mapDeleteCtrl = function ($scope, $uibModalInstance, mapId) {
                $scope.delete = function () {
                    resourceFactory.entityMappingResource.delete({
                        mapId: mapId,
                    }, function (data) {
                        $uibModalInstance.close('delete');
                        scope.showFilteredData();

                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };



            scope.routeTo = function(id, relationId) {
                location.path('/editentitymapping/'+id + '/' +relationId);
            }


            resourceFactory.entityToEntityResource.getAllEntityMapping(function (data) {
                scope.entityMappings = data;
            });


        }
    });
    mifosX.ng.application.controller('EntityToEntityMappingController', ['$scope','dateFilter','$routeParams', '$route', '$location', 'ResourceFactory', '$uibModal', mifosX.controllers.EntityToEntityMappingController]).run(function ($log) {
        $log.info("EntityToEntityMappingController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        HookController: function (scope, resourceFactory, location) {
            scope.hooks = [];

            scope.routeTo = function (id) {
                location.path('/viewhook/' + id);
            }

            if (!scope.searchCriteria.hooks) {
                scope.searchCriteria.hooks = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.hooks || '';

            scope.onFilter = function () {
                scope.searchCriteria.hooks = scope.filterText;
                scope.saveSC();
            };

            scope.HooksPerPage = 15;
            resourceFactory.hookResources.getAllHooks(function (data) {
                scope.hooks = data;
            });
        }
    });
    mifosX.ng.application.controller('HookController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.HookController]).run(function ($log) {
        $log.info("HookController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        MakeDataTableEntryController: function (scope, location, routeParams, resourceFactory, dateFilter) {
            scope.tableName = routeParams.tableName;
            scope.entityId = routeParams.entityId;
            scope.fromEntity = routeParams.fromEntity;
            scope.columnHeaders = [];
            scope.formData = {};
            scope.formDat = {};
            scope.tf = "HH:mm";
            resourceFactory.DataTablesResource.getTableDetails({ datatablename: scope.tableName, entityId: scope.entityId, genericResultSet: 'true' }, function (data) {

                var colName = data.columnHeaders[0].columnName;
                if (colName == 'id') {
                    data.columnHeaders.splice(0, 1);
                }

                colName = data.columnHeaders[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    data.columnHeaders.splice(0, 1);
                    scope.isCenter = colName == 'center_id' ? true : false;
                }

                for (var i in data.columnHeaders) {
                    if (data.columnHeaders[i].columnDisplayType == 'DATETIME') {
                        scope.formDat[data.columnHeaders[i].columnName] = {};
                    }
                }
                scope.columnHeaders = data.columnHeaders;

            });

            //return input type
            scope.fieldType = function (type) {
                var fieldType = "";
                if (type) {
                    if (type == 'CODELOOKUP' || type == 'CODEVALUE') {
                        fieldType = 'SELECT';
                    } else if (type == 'DATE') {
                        fieldType = 'DATE';
                    } else if (type == 'DATETIME') {
                        fieldType = 'DATETIME';
                    } else if (type == 'BOOLEAN') {
                        fieldType = 'BOOLEAN';
                    } else {
                        fieldType = 'TEXT';
                    }
                }
                return fieldType;
            };

            scope.dateTimeFormat = function () {
                for (var i in scope.columnHeaders) {
                    if(scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                        return scope.df + " " + scope.tf;
                    }
                }
                return scope.df;
            };

            scope.cancel = function () {
                if (scope.fromEntity == 'client') {
                    location.path('/viewclient/' + routeParams.entityId).search({});
                } else if (scope.fromEntity == 'group') {                    
                    location.path('/viewgroup/' + routeParams.entityId).search({});
                } else if (scope.fromEntity == 'center') {                    
                    location.path('/viewcenter/' + routeParams.entityId).search({});
                } else if (scope.fromEntity == 'loan') {                    
                    location.path('/viewloanaccount/' + routeParams.entityId).search({});
                } else if (scope.fromEntity == 'savings') {
                    location.path('/viewsavingaccount/' + routeParams.entityId).search({});
                } else if (scope.fromEntity == 'office') {
                    location.path('/viewoffice/' + routeParams.entityId).search({});
                };
            };
            scope.submit = function () {
                var params = {datatablename: scope.tableName, entityId: scope.entityId, genericResultSet: 'true'};
                this.formData.locale = scope.optlang.code;
                this.formData.dateFormat = scope.dateTimeFormat();
                //below logic, for the input field if data is not entered, this logic will put "", because
                //if no data entered in input field , that field name won't send to server side.
                for (var i = 0; i < scope.columnHeaders.length; i++) {
                    if (!_.contains(_.keys(this.formData), scope.columnHeaders[i].columnName)) {
                        this.formData[scope.columnHeaders[i].columnName] = "";
                    }
                    if (scope.columnHeaders[i].columnDisplayType == 'DATE') {
                        this.formData[scope.columnHeaders[i].columnName] = dateFilter(this.formDat[scope.columnHeaders[i].columnName],
                            this.formData.dateFormat);
                    } else if (scope.columnHeaders[i].columnDisplayType == 'DATETIME') {
                        this.formData[scope.columnHeaders[i].columnName] = dateFilter(this.formDat[scope.columnHeaders[i].columnName].date, scope.df)
                        + " " + dateFilter(this.formDat[scope.columnHeaders[i].columnName].time, scope.tf);
                    }
                }


                resourceFactory.DataTablesResource.save(params, this.formData, function (data) {
                    var destination = "";
                    if (data.loanId) {
                        destination = '/viewloanaccount/' + data.loanId;
                    } else if (data.savingsId) {
                        destination = '/viewsavingaccount/' + data.savingsId;
                    } else if (data.clientId) {
                        destination = '/viewclient/' + data.clientId;
                    } else if (data.groupId) {
                        if (scope.isCenter) {
                            destination = '/viewcenter/' + data.groupId;
                        } else {
                            destination = '/viewgroup/' + data.groupId;
                        }
                    } else if (data.officeId) {
                        destination = '/viewoffice/' + data.officeId;
                    }
                    location.path(destination);
                });
            };

        }
    });
    mifosX.ng.application.controller('MakeDataTableEntryController', ['$scope', '$location', '$routeParams', 'ResourceFactory', 'dateFilter', mifosX.controllers.MakeDataTableEntryController]).run(function ($log) {
        $log.info("MakeDataTableEntryController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ManageSurveysController: function (scope, resourceFactory, location,WizardHandler) {
            scope.surveys = [];
            
            scope.disabled = 'true';
            scope.question = {
                responseDatas: []
            };
            scope.option = {};
            scope.formData = {
                questionDatas: []
            };

            scope.showQuestions = false;
            scope.getAllSurveys = function(){
                resourceFactory.surveyResource.getAll(function(data){
                    scope.surveys = data;
                });
            };

            scope.getAllSurveys();

            scope.isActive = function(validFrom,validTo){
                var curdate = new Date().getTime();                
                return (curdate>validFrom && curdate<validTo);
            };

            scope.showQuestionsForm = function(){
                if(scope.formData.key != undefined && scope.formData.key.length>0 &&  
                    scope.formData.name != undefined && scope.formData.name.length>0 && 
                    scope.formData.countryCode != undefined && scope.formData.countryCode.length>0){
                    scope.showQuestions = true; 
                    if(scope.formData.questionDatas == undefined || scope.formData.questionDatas.length==0){
                        scope.showQuestionForm();
                    }
                }
                
            }
            
            scope.showQuestionForm = function(){
                var question = {};
                question.responseDatas = [];
                question.responseDatas.push({});
                scope.formData.questionDatas.push(question);
            }
            scope.showOptionForm = function(question){
                if(question.responseDatas == undefined){
                    question.responseDatas = [];
                }
                question.responseDatas.push({});
            }
            scope.discardOpt = function(){
                scope.option = {};
            }
            scope.deleteOption = function(question,index){
                question.responseDatas.splice(index,1);
            }

            scope.deleteQuestion = function(index){
                scope.formData.questionDatas.splice(index,1);
            }
            scope.discardQuestion = function(){
                scope.option = {};
                scope.question = {
                    responseDatas: []
                };

            }
            scope.addOpt = function(){
                if(scope.isValidOption(scope.option)){
                    scope.option.sequenceNo = scope.question.responseDatas.length + 1;
                    scope.question.responseDatas.push(scope.option);                     
                    scope.option = {};
                }                
            }

            scope.isValidOption = function(data){
                return (data.value != undefined  && data.text != undefined && data.text.length >0);
            }

            scope.updateSequenceNumber = function(){
                if(scope.formData.questionDatas != undefined && scope.formData.questionDatas.length>0){
                    for(var i=0;i<scope.formData.questionDatas.length;i++){
                        scope.formData.questionDatas[i].sequenceNo = i + 1;
                        if(scope.formData.questionDatas[i].responseDatas != undefined && scope.formData.questionDatas[i].responseDatas.length>0){
                            for(var j=0;j<scope.formData.questionDatas[i].responseDatas.length;j++){
                                scope.formData.questionDatas[i].responseDatas[j].sequenceNo = j + 1;
                            }
                        }
                    }
                }   
            };

            scope.createSurvey = function(){
                scope.updateSequenceNumber();
                resourceFactory.surveyResource.save(scope.formData,function(data){
                    location.path('/viewsurvey/'+data.resourceId);
                });
            }

            scope.routeTo = function(id){
                location.path('/viewsurvey/'+id);
            };

            scope.activateOrDeactivateSurvey = function(id, commandParam){
                resourceFactory.surveyResource.activateOrDeactivate({surveyId: id, command:commandParam},function(data){
                    location.path('/surveys');
                });
            };
        }
    });

    mifosX.ng.application.controller('ManageSurveysController', ['$scope', 'ResourceFactory', '$location','WizardHandler', mifosX.controllers.ManageSurveysController]).run(function ($log) {
        $log.info("ManageSurveysController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ReportsController: function (scope, resourceFactory, location) {
            scope.reports = [];

            scope.routeTo = function (id) {
                location.path('/system/viewreport/' + id);
            };

            if (!scope.searchCriteria.manrep) {
                scope.searchCriteria.manrep = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.manrep || '';

            scope.onFilter = function () {
                scope.searchCriteria.manrep = scope.filterText;
                scope.saveSC();
            }

            scope.ReportsPerPage = 15;
            resourceFactory.reportsResource.getReport(function (data) {
                scope.reports = data;
            });
        }
    });
    mifosX.ng.application.controller('ReportsController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.ReportsController]).run(function ($log) {
        $log.info("ReportsController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        SchedulerJobsController: function (scope, resourceFactory, route, location, $uibModal) {
            var jobIdArray = [];
            scope.activeall = false;
            resourceFactory.jobsResource.get(function (data) {
                scope.jobs = data;
            });

            resourceFactory.schedulerResource.get(function (data) {
                scope.schedulerstatus = data.active === true ? 'Active' : 'Standby';
            });

            scope.selectAll = function (selectAll) {
                if(selectAll === true) {
                    for (var i = 0; i < scope.jobs.length; i++) {
                        jobIdArray.push(scope.jobs[i].jobId);
                        scope.jobs[i].checkbox = true;
                    }
                } else {
                    for (var i = 0; i < scope.jobs.length; i++) {
                        jobIdArray = _.without(jobIdArray,scope.jobs[i].jobId);
                        scope.jobs[i].checkbox = false;
                    }
                }

                jobIdArray =  _.uniq(jobIdArray);
            };

            scope.errorLog = function (id){
                scope.id = id;
                $uibModal.open({
                    templateUrl: 'errorlog.html',
                    controller: ErrorLogCtrl,
                    resolve: {
                        ids: function () {
                            return id;
                        }
                    }
                });
            };

            var ErrorLogCtrl = function ($scope, $uibModalInstance,ids) {
                for (var i in scope.jobs) {
                    if (scope.jobs[i].jobId === ids) {
                        var index = i;
                    }
                }

                $scope.error = scope.jobs[index].lastRunHistory.jobRunErrorLog;
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('close');
                };
            };

            scope.routeTo = function (id){
                location.path('/viewschedulerjob/'+id);
            };

            scope.runJobSelected = function (jobId, checkbox) {
                for (var i = 0; i < scope.jobs.length; i++) {
                    if (scope.jobs[i].jobId === jobId) {
                        if (checkbox === true) {
                            scope.jobs[i].checkbox = true;
                            jobIdArray.push(jobId);
                            break;
                        } else {
                            scope.jobs[i].checkbox = false;
                            jobIdArray = _.without(jobIdArray,scope.jobs[i].jobId);
                            break;
                        }
                    }
                }

                if (jobIdArray.length === 0) {
                    scope.activeall = false;
                }

                jobIdArray =  _.uniq(jobIdArray);
            };

            scope.runSelectedJobs = function () {
                scope.sentForExecution = [];
                for (var i in jobIdArray) {
                    for (var j in scope.jobs) {
                        if (scope.jobs[j].jobId === jobIdArray[i]) {
                            scope.sentForExecution.push(scope.jobs[j].displayName);
                        }
                    }
                }

                for (var i in jobIdArray) {
                    resourceFactory.jobsResource.save({jobId: jobIdArray[i], command : 'executeJob'}, {}, function(data){
                    });
                }
            };

            scope.suspendJobs = function () {
                resourceFactory.schedulerResource.save({command : 'stop'}, {}, function(data) {
                    route.reload();
                });
            };

            scope.activeJobs = function () {
                resourceFactory.schedulerResource.save({command : 'start'}, {}, function(data) {
                    route.reload();
                });
            };

            scope.refresh = function () {
                route.reload();
            };
        }
    });
    mifosX.ng.application.controller('SchedulerJobsController', ['$scope', 'ResourceFactory', '$route','$location','$uibModal', mifosX.controllers.SchedulerJobsController]).run(function($log) {
      $log.info("SchedulerJobsController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewAccountNumberPreferencesController: function (scope, resourceFactory, location,routeParams,$uibModal) {
            scope.resourceId = routeParams.id;
            scope.addPrefix = false;
            resourceFactory.accountNumberResources.get({accountNumberFormatId:scope.resourceId},function(data){
                scope.accountType = data["accountType"].value;
                scope.prefixType = data["prefixType"].value;
                if(scope.prefixType != null){
                    scope.addPrefix = true;
                }
            });

            scope.cancel = function(){
                location.path('/accountnumberpreferences');
            }

            scope.editPreferences = function(){
                location.path('/editaccountnumberpreferences/'+ scope.resourceId);
            }

            var DeleteCtrl = function($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.accountNumberResources.delete({accountNumberFormatId:scope.resourceId},function(data){
                        location.path('/accountnumberpreferences');
                    });
                    $uibModalInstance.close('delete');
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            }

            scope.deletePreferences = function(){
                $uibModal.open({
                    templateUrl: 'deletepreferences.html',
                    controller: DeleteCtrl
                });
            }

        }
    });
    mifosX.ng.application.controller('ViewAccountNumberPreferencesController', ['$scope', 'ResourceFactory', '$location','$routeParams','$uibModal',mifosX.controllers.ViewAccountNumberPreferencesController]).run(function ($log) {
        $log.info("ViewAccountNumberPreferencesController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewAuditController: function (scope, resourceFactory, routeParams) {
            scope.details = {};
            resourceFactory.auditResource.get({templateResource: routeParams.id}, function (data) {
                scope.details = data;
                scope.commandAsJson = data.commandAsJson;
                var obj = JSON.parse(scope.commandAsJson);
                scope.jsondata = [];
                _.each(obj, function (value, key) {
                    scope.jsondata.push({name: key, property: value});
                });
            });
        }
    });
    mifosX.ng.application.controller('ViewAuditController', ['$scope', 'ResourceFactory', '$routeParams', mifosX.controllers.ViewAuditController]).run(function ($log) {
        $log.info("ViewAuditController initialized");
    });
}(mifosX.controllers || {}));


;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewCodeController: function (scope, routeParams, resourceFactory, location, $uibModal, route) {
            scope.codevalues = [];
            scope.formData = [];
            scope.newcode = {};
            scope.codename = {};
            resourceFactory.codeResources.get({codeId: routeParams.id}, function (data) {
                scope.code = data;
                scope.codename.name = data.name;
            });
            resourceFactory.codeValueResource.getAllCodeValues({codeId: routeParams.id}, function (data) {
                scope.codevalues = data;
            });

            scope.delCode = function () {
                $uibModal.open({
                    templateUrl: 'deletecode.html',
                    controller: CodeDeleteCtrl
                });
            };
            scope.showEdit = function (id, name, description,position, cv, isActive) {
                scope.formData[id] = {
                    name: name,
                    description:description,
                    position: position,
                    isActive: isActive
                }
                cv.edit = !cv.edit;
            };
            scope.editCodeValue = function (id, cv) {
                resourceFactory.codeValueResource.update({codeId: routeParams.id, codevalueId: id}, this.formData[id], function (data) {
                    cv.edit = !cv.edit;
                    route.reload();
                });
            };
            scope.showEditCode = function () {
                scope.newcode.edit = !scope.newcode.edit;
                scope.codename.name = scope.code.name;
            };
            scope.updateCode = function () {
                resourceFactory.codeResources.update({codeId: routeParams.id}, this.codename, function (data) {
                    route.reload();
                });
            }
            var CodeDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.codeResources.delete({codeId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/codes');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            var EditCodeValueCtrl = function ($scope, $uibModalInstance, cid) {
                $scope.edit = function () {

                    $uibModalInstance.close('delete');
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
            scope.deleteCodeValue = function (id) {
                $uibModal.open({
                    templateUrl: 'deletecodevalue.html',
                    controller: CodeValueDeleteCtrl,
                    resolve: {
                        cvid: function () {
                            return id;
                        }
                    }
                });
            };
            var CodeValueDeleteCtrl = function ($scope, $uibModalInstance, cvid) {
                $scope.delete = function () {
                    resourceFactory.codeValueResource.delete({codeId: routeParams.id, codevalueId: cvid}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        route.reload();
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ViewCodeController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', '$route', mifosX.controllers.ViewCodeController]).run(function ($log) {
        $log.info("ViewCodeController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewDataTableController: function (scope, routeParams, resourceFactory, location, $uibModal) {

            resourceFactory.DataTablesResource.getTableDetails({datatablename: routeParams.tableName}, function (data) {

                var temp = [];
                var colName = data.columnHeaderData[0].columnName;
                if (colName == 'id') {
                    data.columnHeaderData.splice(0, 1);
                }
                colName = data.columnHeaderData[0].columnName;
                if (colName == 'client_id' || colName == 'office_id' || colName == 'group_id' || colName == 'center_id' || colName == 'loan_id' || colName == 'savings_account_id') {
                    data.columnHeaderData.splice(0, 1);
                }

                for (var i = 0; i < data.columnHeaderData.length; i++) {
                    if (data.columnHeaderData[i].columnName.indexOf("_cd_") > 0) {
                        temp = data.columnHeaderData[i].columnName.split("_cd_");
                        data.columnHeaderData[i].columnName = temp[1];
                        data.columnHeaderData[i].code = temp[0];
                    }
                }
                scope.datatable = data;
            });
            scope.deleteTable = function () {
                $uibModal.open({
                    templateUrl: 'deletetable.html',
                    controller: TableDeleteCtrl
                });
            };
            var TableDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.DataTablesResource.delete({datatablename: routeParams.tableName}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/datatables');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewDataTableController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', mifosX.controllers.ViewDataTableController]).run(function ($log) {
        $log.info("ViewDataTableController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewHookController: function (scope, routeParams, route, location, resourceFactory, $uibModal) {
            scope.hook = [];
            scope.formData = {};
            resourceFactory.hookResources.get({hookId: routeParams.id}, function (data) {
                scope.hook = data;
            });
            scope.deletehook = function () {
                $uibModal.open({
                    templateUrl: 'deletehook.html',
                    controller: HookDeleteCtrl
                });
            };

            var HookDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.hookResources.delete({hookId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/hooks');
                        // added dummy request param because Content-Type header gets removed
                        // if the request does not contain any data (a request body)
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ViewHookController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', '$uibModal', mifosX.controllers.ViewHookController]).run(function ($log) {
        $log.info("ViewHookController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewReportController: function (scope, routeParams, resourceFactory, location, $uibModal) {
            resourceFactory.reportsResource.getReportDetails({id: routeParams.id}, function (data) {
                scope.report = data;
                scope.noncoreReport = data.coreReport == true ? false : true;
            });
            scope.deletereport = function () {
                $uibModal.open({
                    templateUrl: 'deletenoncorereport.html',
                    controller: NoncoreReportDeleteCtrl
                });
            };
            var NoncoreReportDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.reportsResource.delete({id: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/reports');
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewReportController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', mifosX.controllers.ViewReportController]).run(function ($log) {
        $log.info("ViewReportController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewSchedulerJobController: function (scope, routeParams, resourceFactory) {
            resourceFactory.jobsResource.getJobDetails({jobId: routeParams.id}, function (data) {
                scope.job = data;
            });
        }
    });
    mifosX.ng.application.controller('ViewSchedulerJobController', ['$scope', '$routeParams', 'ResourceFactory', mifosX.controllers.ViewSchedulerJobController]).run(function ($log) {
        $log.info("ViewSchedulerJobController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewSchedulerJobHistoryController: function (scope, resourceFactory, paginatorService, routeParams, $uibModal) {
            scope.jobhistory = [];
            var fetchFunction = function (offset, limit, callback) {
                resourceFactory.jobsResource.getJobHistory({jobId: routeParams.id, resourceType: 'runhistory', offset: offset, limit: limit}, callback);
            };
            scope.jobhistory = paginatorService.paginate(fetchFunction, 14);

            scope.errorLog = function (history){
                $uibModal.open({
                    templateUrl: 'errorlog.html',
                    controller: ErrorLogCtrl,
                    resolve: {
                        history: function () {
                            return history;
                        }
                    }
                });
            };

            var ErrorLogCtrl = function ($scope, $uibModalInstance,history) {
                $scope.error = history.jobRunErrorLog;
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('close');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewSchedulerJobHistoryController', ['$scope', 'ResourceFactory', 'PaginatorService', '$routeParams', '$uibModal', mifosX.controllers.ViewSchedulerJobHistoryController]).run(function ($log) {
        $log.info("ViewSchedulerJobHistoryController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewSurveyController: function (scope, resourceFactory,routeParams, location) {
            scope.formData ={};
            scope.showQuestions = true;
            scope.id = routeParams.id;
            resourceFactory.surveyResource.get({surveyId : scope.id},{},function(data){               
                scope.formData = data;
            });
        }
    });

    mifosX.ng.application.controller('ViewSurveyController', ['$scope', 'ResourceFactory', '$routeParams', '$location', mifosX.controllers.ViewSurveyController]).run(function ($log) {
        $log.info("ViewSurveyController initialized");
    });
}(mifosX.controllers || {}));;/*global mifosX _  CKEDITOR */
(function (module) {
    mifosX.controllers = _.extend(module, {
        CreateTemplateController: function (scope, resourceFactory, location, $rootScope) {
            scope.mappers = [];
            scope.formData = {};
            resourceFactory.templateResource.getTemplateDetails({resourceType: 'template'}, function (data) {
                scope.template = data;
                scope.advanceOption = 'false';
                scope.oneAtATime = 'true';
                scope.formData.entity = data.entities[0].id;
                scope.formData.type = data.types[0].id;
                scope.templateKeyEntity = "Client";
                scope.clientKeys();
                scope.mappers.push({
                    mappersorder: 0,
                    mapperskey: "client",
                    mappersvalue: "clients/{{clientId}}?tenantIdentifier=" + $rootScope.tenantIdentifier,
                    defaultAddIcon: 'true'
                });
            });

            scope.clientKeys = function () {
                scope.templateKeys = ["{{client.accountNo}}", "{{client.status.value}}", "{{client.fullname}}",
                    "{{client.displayName}}", "{{client.officeName}}", "{{#client.groups}}", "{{/client.groups}}"];
                scope.templateEntity = [
                    {"entityName": "Client",
                        "templateKeys": scope.templateKeys}
                ];
                CKEDITOR.instances.templateeditor.setData('');
            };

            scope.loanKeys = function () {
                CKEDITOR.instances.templateeditor.setData('');
                scope.loanTemplateKeys = ["{{loan.accountNo}}", "{{loan.status.value}}", "{{loan.loanProductId}}",
                    "{{loan.loanProductName}}", "{{loan.loanProductDescription}}"];
                scope.repaymentTemplateKeys = ["{{loan.repaymentSchedule.loanTermInDays}}", "{{loan.repaymentSchedule.totalPrincipalDisbursed}}",
                    "{{loan.repaymentSchedule.totalPrincipalExpected}}", "{{loan.repaymentSchedule.totalPrincipalPaid}}",
                    "{{loan.repaymentSchedule.totalInterestCharged}}", "{{loan.repaymentSchedule.totalFeeChargesCharged}}",
                    "{{loan.repaymentSchedule.totalPenaltyChargesCharged}}", "{{loan.repaymentSchedule.totalWaived}}",
                    "{{loan.repaymentSchedule.totalWrittenOff}}", "{{loan.repaymentSchedule.totalRepaymentExpected}}",
                    "{{loan.repaymentSchedule.totalRepayment}}", "{{loan.repaymentSchedule.totalPaidInAdvance}}",
                    "{{loan.repaymentSchedule.totalPaidLate}}", "{{loan.repaymentSchedule.totalOutstanding}}"];
                scope.templateEntity = [
                    {"entityName": "Loan",
                        "templateKeys": scope.loanTemplateKeys
                    },
                    {"entityName": "Repayment Schedule",
                        "templateKeys": scope.repaymentTemplateKeys
                    }
                ];
            };

            scope.entityChange = function (entityId) {
                if (entityId !== 0) {
                    scope.mappers.splice(0, 1, {
                        mappersorder: 0,
                        mapperskey: "loan",
                        mappersvalue: "loans/{{loanId}}?associations=all&tenantIdentifier=" + $rootScope.tenantIdentifier,
                        defaultAddIcon: 'true'
                    });
                    scope.loanKeys();
                    scope.templateKeyEntity = "Loan";
                } else {
                    scope.templateKeyEntity = "Client";
                    scope.mappers.splice(0, 1, {
                        mappersorder: 0,
                        mapperskey: "client",
                        mappersvalue: "clients/{{clientId}}?tenantIdentifier=" + $rootScope.tenantIdentifier,
                        defaultAddIcon: 'true'
                    });
                    scope.clientKeys();
                }
            };

            scope.templateKeySelected = function (templateKey) {
                CKEDITOR.instances.templateeditor.insertText(templateKey);
            };

            scope.addMapperKeyValue = function () {
                scope.mappers.push({
                    mappersorder: scope.mappers.length,
                    mapperskey: "",
                    mappersvalue: ""
                });
            };

            scope.deleteMapperKeyValue = function (index) {
                scope.mappers.splice(index, 1);
            };

            scope.advanceOptionClick = function () {
                if (scope.advanceOption == 'false') {
                    scope.advanceOption = 'true';
                } else {
                    scope.advanceOption = 'false';
                }
            };

            scope.submit = function () {
                for (var i in scope.mappers) {
                    delete scope.mappers[i].defaultAddIcon;
                }
                this.formData.mappers = scope.mappers;
                this.formData.text = CKEDITOR.instances.templateeditor.getData();
                resourceFactory.templateResource.save(this.formData, function (data) {
                    location.path('/viewtemplate/' + data.resourceId);
                });
            };


        }
    });
    mifosX.ng.application.controller('CreateTemplateController', ['$scope', 'ResourceFactory', '$location', '$rootScope', mifosX.controllers.CreateTemplateController]).run(function ($log) {
        $log.info("CreateTemplateController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        EditTemplateController: function (scope, resourceFactory, location, routeParams, $rootScope) {
            scope.mappers = [];
            scope.formData = {};
            resourceFactory.templateResource.getTemplateDetails({templateId: routeParams.id, resourceType: 'template'}, function (data) {
                scope.template = data;
                scope.templateId = data.template.id;
                scope.advanceOption = 'false';

                for (var i in data.entities) {
                    if (data.entities[i].name == data.template.entity) {
                        scope.formData.entity = data.entities[i].id;
                        break;
                    }
                }

                for (var i in data.types) {
                    if (data.types[i].name == data.template.type) {
                        scope.formData.type = data.types[i].id;
                        break;
                    }
                }

                scope.templateKeyEntity = data.template.entity;
                scope.formData.name = data.template.name;
                scope.formData.text = data.template.text;

                for (var i in data.template.mappers) {
                    if (i == 0) {
                        scope.mappers.push({
                            mappersorder: data.template.mappers[i].mapperorder,
                            mapperskey: data.template.mappers[i].mapperkey,
                            mappersvalue: data.template.mappers[i].mappervalue,
                            defaultAddIcon: 'true'
                        });
                    } else {
                        scope.mappers.push({
                            mappersorder: data.template.mappers[i].mapperorder,
                            mapperskey: data.template.mappers[i].mapperkey,
                            mappersvalue: data.template.mappers[i].mappervalue,
                            defaultAddIcon: 'false'
                        });
                    }
                }

                if (data.template.entity == "client") {
                    scope.clientKeys();
                } else if (data.template.entity == "loan") {
                    scope.loanKeys();
                }
                CKEDITOR.instances.templateeditor.insertHtml(data.template.text);
            });

            scope.clientKeys = function () {
                scope.clientTemplateKeys = ["{{client.accountNo}}", "{{client.status.value}}", "{{client.fullname}}",
                    "{{client.displayName}}", "{{client.officeName}}", "{{#client.groups}}", "{{/client.groups}}"];
                scope.templateEntity = [
                    {"entityName": "Client",
                        "templateKeys": scope.clientTemplateKeys}
                ];
                if (scope.templateKeyEntity != "client") {
                    CKEDITOR.instances.templateeditor.setData('');
                }
            }

            scope.loanKeys = function () {
                scope.loanTemplateKeys = ["{{loan.accountNo}}", "{{loan.status.value}}", "{{loan.loanProductId}}",
                    "{{loan.loanProductName}}", "{{loan.loanProductDescription}}"];
                scope.repaymentTemplateKeys = ["{{loan.repaymentSchedule.loanTermInDays}}", "{{loan.repaymentSchedule.totalPrincipalDisbursed}}",
                    "{{loan.repaymentSchedule.totalPrincipalExpected}}", "{{loan.repaymentSchedule.totalPrincipalPaid}}",
                    "{{loan.repaymentSchedule.totalInterestCharged}}", "{{loan.repaymentSchedule.totalFeeChargesCharged}}",
                    "{{loan.repaymentSchedule.totalPenaltyChargesCharged}}", "{{loan.repaymentSchedule.totalWaived}}",
                    "{{loan.repaymentSchedule.totalWrittenOff}}", "{{loan.repaymentSchedule.totalRepaymentExpected}}",
                    "{{loan.repaymentSchedule.totalRepayment}}", "{{loan.repaymentSchedule.totalPaidInAdvance}}",
                    "{{loan.repaymentSchedule.totalPaidLate}}", "{{loan.repaymentSchedule.totalOutstanding}}"];
                scope.templateEntity = [
                    {"entityName": "Loan",
                        "templateKeys": scope.loanTemplateKeys
                    },
                    {"entityName": "Repayment Schedule",
                        "templateKeys": scope.repaymentTemplateKeys
                    }
                ];
                if (scope.templateKeyEntity != "loan") {
                    CKEDITOR.instances.templateeditor.setData('');
                }
            }

            scope.entityChange = function (entityId) {
                if (entityId != 0) {
                    scope.mappers.splice(0, 1, {
                        mappersorder: 0,
                        mapperskey: "loan",
                        mappersvalue: "loans/{{loanId}}?associations=all&tenantIdentifier=" + $rootScope.tenantIdentifier,
                        defaultAddIcon: 'true'
                    });
                    scope.loanKeys();
                    scope.templateKeyEntity = "Loan";
                } else {
                    scope.templateKeyEntity = "Client";
                    scope.mappers.splice(0, 1, {
                        mappersorder: 0,
                        mapperskey: "client",
                        mappersvalue: "clients/{{clientId}}?tenantIdentifier=" + $rootScope.tenantIdentifier,
                        defaultAddIcon: 'true'
                    });
                    scope.clientKeys();
                }
            }

            scope.templateKeySelected = function (templateKey) {
                CKEDITOR.instances.templateeditor.insertText(templateKey);
            }

            scope.addMapperKeyValue = function () {
                scope.mappers.push({
                    mappersorder: scope.mappers.length,
                    mapperskey: "",
                    mappersvalue: ""
                });
            }

            scope.deleteMapperKeyValue = function (index) {
                scope.mappers.splice(index, 1);
            }

            scope.advanceOptionClick = function () {
                if (scope.advanceOption == 'false') {
                    scope.advanceOption = 'true';
                } else {
                    scope.advanceOption = 'false';
                }
            }

            scope.submit = function () {
                for (var i in scope.mappers) {
                    delete scope.mappers[i].defaultAddIcon;
                }
                this.formData.mappers = scope.mappers;
                this.formData.text = CKEDITOR.instances.templateeditor.getData();
                resourceFactory.templateResource.update({templateId: routeParams.id}, this.formData, function (data) {
                    location.path('/viewtemplate/' + data.resourceId);
                });
            }


        }
    });
    mifosX.ng.application.controller('EditTemplateController', ['$scope', 'ResourceFactory', '$location', '$routeParams', '$rootScope', mifosX.controllers.EditTemplateController]).run(function ($log) {
        $log.info("EditTemplateController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        TemplateController: function (scope, resourceFactory, location) {
            scope.routeTo = function (id) {
                location.path('/viewtemplate/' + id);
            };

            if (!scope.searchCriteria.templates) {
                scope.searchCriteria.templates = null;
                scope.saveSC();
            }
            scope.filterText = scope.searchCriteria.templates || '';

            scope.onFilter = function () {
                scope.searchCriteria.templates = scope.filterText;
                scope.saveSC();
            };

            resourceFactory.templateResource.get(function (data) {
                scope.templates = data;
            });
        }
    });
    mifosX.ng.application.controller('TemplateController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.TemplateController]).run(function ($log) {
        $log.info("TemplateController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewTemplateController: function (scope, routeParams, resourceFactory, location, $uibModal, $sce) {
            resourceFactory.templateResource.getTemplateDetails({templateId: routeParams.id}, function (data) {
                scope.template = data;
                scope.templateText = $sce.trustAsHtml(data.text);
            });
            scope.deleteTemplate = function () {
                $uibModal.open({
                    templateUrl: 'deletetemplate.html',
                    controller: TemplateDeleteCtrl
                });
            };
            var TemplateDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.templateResource.delete({templateId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/templates');
                        // added dummy request param because Content-Type header gets removed
                        // if the request does not contain any data (a request body)
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };
        }
    });
    mifosX.ng.application.controller('ViewTemplateController', ['$scope', '$routeParams', 'ResourceFactory', '$location', '$uibModal', '$sce', mifosX.controllers.ViewTemplateController]).run(function ($log) {
        $log.info("ViewTemplateController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        BulkImportUsersController: function (scope, resourceFactory, location, API_VERSION, $rootScope, Upload) {

            scope.first = {};
            scope.first.templateUrl =  API_VERSION + '/users/downloadtemplate' + '?tenantIdentifier=' + $rootScope.tenantIdentifier
                + '&locale=' + scope.optlang.code + '&dateFormat=' + scope.df;
            scope.formData = {};
            var requestParams = {staffInSelectedOfficeOnly:true};

            resourceFactory.clientTemplateResource.get(requestParams, function (data) {
                scope.offices = data.officeOptions;
                scope.staffs = data.staffOptions;
            });

            scope.first.queryParams = '&';
            scope.changeOffice = function () {
                if(scope.formData.officeId) {
                    if(scope.first.queryParams.indexOf("officeId")==-1) {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams += '&officeId=' + scope.formData.officeId;
                    }else {
                        resourceFactory.clientTemplateResource.get({
                            staffInSelectedOfficeOnly: true, officeId: scope.formData.officeId
                        }, function (data) {
                            scope.staffs = data.staffOptions;
                        });
                        scope.first.queryParams=scope.first.queryParams.replace(/&officeId=\d+/i,"&officeId="+ scope.formData.officeId);
                    }
                } else {
                    scope.first.queryParams ='&';
                }

            };

            scope.changeStaff = function() {
                if(scope.formData.staffId) {
                    if (scope.first.queryParams.indexOf("staffId")==-1) {
                        scope.first.queryParams = scope.first.queryParams + '&staffId=' + scope.formData.staffId;
                    }else {
                        scope.first.queryParams=scope.first.queryParams.replace(/&staffId=\d+/i,"&staffId="+ scope.formData.staffId);
                    }
                } else {
                    if(scope.formData.officeId)
                        scope.first.queryParams = '&' + 'officeId=' + scope.formData.officeId;
                    else
                        scope.first.queryParams = '&';
                }
            };
            scope.onFileSelect = function (files) {
                scope.formData.file = files[0];
            };

            scope.refreshImportTable=function () {
                resourceFactory.importResource.getImports({entityType: "users"}, function (data) {

                    for (var l in data) {
                        var importdocs = {};
                        importdocs = API_VERSION + '/imports/downloadOutputTemplate?importDocumentId='+ data[l].importId +'&tenantIdentifier=' + $rootScope.tenantIdentifier;
                        data[l].docUrl = importdocs;
                    }
                    scope.imports = data;
                });
            };


            scope.upload = function () {
                Upload.upload({
                    url: $rootScope.hostUrl + API_VERSION + '/users/uploadtemplate',
                    data: {file: scope.formData.file,locale:scope.optlang.code,dateFormat:scope.df},
                }).then(function (data) {
                    // to fix IE not refreshing the model
                    if (!scope.$$phase) {
                        scope.$apply();
                    }
                });
            };
        }
    });
    mifosX.ng.application.controller('BulkImportUsersController', ['$scope', 'ResourceFactory', '$location', 'API_VERSION', '$rootScope', 'Upload', mifosX.controllers.BulkImportUsersController]).run(function ($log) {
        $log.info("BulkImportUsersController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        UserController: function (scope, resourceFactory) {
            scope.users = [];
            scope.newUserFormDialog = function () {
                scope.$broadcast('OpenUserFormDialog', {title: 'New User'});
            };
            resourceFactory.userResource.getAllUsers({fields: "id,firstname,lastname,username,officeName"}, function (data) {
                scope.users = data;
            });
        }
    });
    mifosX.ng.application.controller('UserController', ['$scope', 'ResourceFactory', mifosX.controllers.UserController]).run(function ($log) {
        $log.info("UserController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        UserFormController: function (scope, resourceFactory) {
            scope.offices = [];
            scope.roles = [];
            resourceFactory.officeResource.getAllOffices({}, function (data) {
                scope.offices = data;
            });
            resourceFactory.roleResource.getAllRoles({}, function (data) {
                scope.roles = data;
            });

            scope.$on('OpenUserFormDialog', function () {
                scope.userFormData = {selectedRoles: {}, sendPasswordToEmail: false};
                scope.formInError = false;
                scope.errors = [];
            });

            scope.submitUserForm = function () {
                scope.formInError = false;
                scope.errors = [];
                var userData = {
                    username: scope.userFormData.username,
                    firstname: scope.userFormData.firstname,
                    lastname: scope.userFormData.lastname,
                    email: scope.userFormData.email,
                    officeId: scope.userFormData.office.id,
                    sendPasswordToEmail: scope.userFormData.sendPasswordToEmail,
                    roles: _.map(
                        _.keys(scope.userFormData.selectedRoles), function (roleId) {
                            return parseInt(roleId, 10);
                        }
                    )
                };

                scope.$emit('SubmitUserFormStart');
                new resourceFactory.userResource(userData).$save({},
                    function (data) {
                        userData.id = data.resourceId;
                        scope.users.push(userData);
                        scope.$emit('SubmitUserFormSuccess');
                    },
                    function (response) {
                        scope.formInError = true;
                        scope.errors = response.data.errors;
                        scope.$emit('SubmitUserFormError');
                    }
                );
            };

            scope.cancelUserForm = function () {
                scope.$emit('CloseUserForm');
            };
        }
    });
    mifosX.ng.application.controller('UserFormController', ['$scope', 'ResourceFactory', mifosX.controllers.UserFormController]).run(function ($log) {
        $log.info("UserFormController initialized");
    });
}(mifosX.controllers || {}));
;(function (module) {
    mifosX.controllers = _.extend(module, {
        UserListController: function (scope, resourceFactory, location) {
            scope.users = [];

            scope.routeTo = function (id) {
                location.path('/viewuser/' + id);
            };

            /* -----Throws error on test-----
             if (!scope.searchCriteria.users) {
             scope.searchCriteria.users = null;
             scope.saveSC();
             }
             scope.filterText = scope.searchCriteria.users;

             scope.onFilter = function () {
             scope.searchCriteria.users = scope.filterText;
             scope.saveSC();
             };*/

            scope.UsersPerPage = 15;
            resourceFactory.userListResource.getAllUsers(function (data) {
                scope.users = data;
            });
        }
    });
    mifosX.ng.application.controller('UserListController', ['$scope', 'ResourceFactory', '$location', mifosX.controllers.UserListController]).run(function ($log) {
        $log.info("UserListController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        UserSettingController: function (scope, translate, localStorageService, tmhDynamicLocale) {

            
            scope.dates = [
                'dd MMMM yyyy',
                'dd/MMMM/yyyy',
                'dd-MMMM-yyyy',
                'dd-MM-yy',
                'MMMM-dd-yyyy',
                'MMMM dd yyyy',
                'MMMM/dd/yyyy',
                'MM-dd-yy',
                'yyyy-MM-dd'
            ];

            scope.langs = mifosX.models.Langs;
            

            scope.$watch(function () {
                return scope.df;
            }, function () {
                scope.updateDf(scope.df);
            });

            scope.$watch(function () {
                return scope.optlang;
            }, function () {
                scope.changeLang(scope.optlang);
            });


        }
    });

    mifosX.ng.application.controller('UserSettingController', ['$scope', '$translate', 'localStorageService', 'tmhDynamicLocale', mifosX.controllers.UserSettingController]).run(function ($log) {
        $log.info("UserSettingController initialized");
    });
}(mifosX.controllers || {}));;(function (module) {
    mifosX.controllers = _.extend(module, {
        ViewUserController: function (scope, routeParams, route, location, resourceFactory, $uibModal) {
            scope.user = [];
            scope.formData = {};
            resourceFactory.userListResource.get({userId: routeParams.id}, function (data) {
                scope.user = data;
            });
            scope.open = function () {
                $uibModal.open({
                    templateUrl: 'password.html',
                    controller: ModalInstanceCtrl
                });
            };
            scope.deleteuser = function () {
                $uibModal.open({
                    templateUrl: 'deleteuser.html',
                    controller: UserDeleteCtrl
                });
            };
            var ModalInstanceCtrl = function ($scope, $uibModalInstance) {
                $scope.save = function (staffId) {
                    resourceFactory.userListResource.update({'userId': routeParams.id}, this.formData, function (data) {
                        $uibModalInstance.close('activate');
                        if (data.resourceId == scope.currentSession.user.userId) {
                            scope.logout();
                        } else{
                            route.reload();
                        };
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

            var UserDeleteCtrl = function ($scope, $uibModalInstance) {
                $scope.delete = function () {
                    resourceFactory.userListResource.delete({userId: routeParams.id}, {}, function (data) {
                        $uibModalInstance.close('delete');
                        location.path('/users');
                        // added dummy request param because Content-Type header gets removed
                        // if the request does not contain any data (a request body)
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            };

        }
    });
    mifosX.ng.application.controller('ViewUserController', ['$scope', '$routeParams', '$route', '$location', 'ResourceFactory', '$uibModal', mifosX.controllers.ViewUserController]).run(function ($log) {
        $log.info("ViewUserController initialized");
    });
}(mifosX.controllers || {}));
